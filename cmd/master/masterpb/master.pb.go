// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cmd/master/masterpb/master.proto

package masterpb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_ibalajiarun_go_consensus_peer_peerpb "github.com/ibalajiarun/go-consensus/peer/peerpb"
	peerpb "github.com/ibalajiarun/go-consensus/peer/peerpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ServerResponse struct {
	*peerpb.PeerConfig `protobuf:"bytes,1,opt,name=config,proto3,embedded=config" json:"config,omitempty"`
	PeerID             github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID `protobuf:"varint,2,opt,name=peer_id,json=peerId,proto3,casttype=github.com/ibalajiarun/go-consensus/peer/peerpb.PeerID" json:"peer_id,omitempty"`
}

func (m *ServerResponse) Reset()         { *m = ServerResponse{} }
func (m *ServerResponse) String() string { return proto.CompactTextString(m) }
func (*ServerResponse) ProtoMessage()    {}
func (*ServerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5d7820c90e72894, []int{0}
}
func (m *ServerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerResponse.Merge(m, src)
}
func (m *ServerResponse) XXX_Size() int {
	return m.Size()
}
func (m *ServerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ServerResponse proto.InternalMessageInfo

func (m *ServerResponse) GetPeerID() github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID {
	if m != nil {
		return m.PeerID
	}
	return 0
}

type BaseServerConfig struct {
	KeyFile                string                         `protobuf:"bytes,4,opt,name=key_file,json=keyFile,proto3" json:"key_file,omitempty"`
	EnclavePath            string                         `protobuf:"bytes,5,opt,name=enclave_path,json=enclavePath,proto3" json:"enclave_path,omitempty"`
	LogVerbose             bool                           `protobuf:"varint,6,opt,name=log_verbose,json=logVerbose,proto3" json:"log_verbose,omitempty"`
	EnclaveBatchSize       int32                          `protobuf:"varint,7,opt,name=enclave_batch_size,json=enclaveBatchSize,proto3" json:"enclave_batch_size,omitempty"`
	DqOBatchSize           uint32                         `protobuf:"varint,8,opt,name=dq_o_batch_size,json=dqOBatchSize,proto3" json:"dq_o_batch_size,omitempty"`
	DqOBatchTimeout        uint32                         `protobuf:"varint,18,opt,name=dq_o_batch_timeout,json=dqOBatchTimeout,proto3" json:"dq_o_batch_timeout,omitempty"`
	DestinySignerWorkers   uint32                         `protobuf:"varint,9,opt,name=destiny_signer_workers,json=destinySignerWorkers,proto3" json:"destiny_signer_workers,omitempty"`
	Workers                map[string]uint32              `protobuf:"bytes,10,rep,name=workers,proto3" json:"workers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	WorkersQueueSizes      map[string]uint32              `protobuf:"bytes,14,rep,name=workers_queue_sizes,json=workersQueueSizes,proto3" json:"workers_queue_sizes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CmdBatchSize           uint32                         `protobuf:"varint,11,opt,name=cmd_batch_size,json=cmdBatchSize,proto3" json:"cmd_batch_size,omitempty"`
	CmdBatchTimeout        uint32                         `protobuf:"varint,12,opt,name=cmd_batch_timeout,json=cmdBatchTimeout,proto3" json:"cmd_batch_timeout,omitempty"`
	ReqBufThreshold        int32                          `protobuf:"varint,13,opt,name=req_buf_threshold,json=reqBufThreshold,proto3" json:"req_buf_threshold,omitempty"`
	ThreshsignFastLagrange bool                           `protobuf:"varint,15,opt,name=threshsign_fast_lagrange,json=threshsignFastLagrange,proto3" json:"threshsign_fast_lagrange,omitempty"`
	DispelWaitForAllRb     bool                           `protobuf:"varint,16,opt,name=dispel_wait_for_all_rb,json=dispelWaitForAllRb,proto3" json:"dispel_wait_for_all_rb,omitempty"`
	RccAlgorithm           peerpb.Algorithm               `protobuf:"varint,17,opt,name=rcc_algorithm,json=rccAlgorithm,proto3,enum=peerpb.Algorithm" json:"rcc_algorithm,omitempty"`
	MultiChainDuoBFTConfig *peerpb.MultiChainDuoBFTConfig `protobuf:"bytes,19,opt,name=multichain_duobft_config,json=multichainDuobftConfig,proto3" json:"multichain_duobft_config,omitempty"`
}

func (m *BaseServerConfig) Reset()         { *m = BaseServerConfig{} }
func (m *BaseServerConfig) String() string { return proto.CompactTextString(m) }
func (*BaseServerConfig) ProtoMessage()    {}
func (*BaseServerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5d7820c90e72894, []int{1}
}
func (m *BaseServerConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseServerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseServerConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseServerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseServerConfig.Merge(m, src)
}
func (m *BaseServerConfig) XXX_Size() int {
	return m.Size()
}
func (m *BaseServerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseServerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BaseServerConfig proto.InternalMessageInfo

func (m *BaseServerConfig) GetKeyFile() string {
	if m != nil {
		return m.KeyFile
	}
	return ""
}

func (m *BaseServerConfig) GetEnclavePath() string {
	if m != nil {
		return m.EnclavePath
	}
	return ""
}

func (m *BaseServerConfig) GetLogVerbose() bool {
	if m != nil {
		return m.LogVerbose
	}
	return false
}

func (m *BaseServerConfig) GetEnclaveBatchSize() int32 {
	if m != nil {
		return m.EnclaveBatchSize
	}
	return 0
}

func (m *BaseServerConfig) GetDqOBatchSize() uint32 {
	if m != nil {
		return m.DqOBatchSize
	}
	return 0
}

func (m *BaseServerConfig) GetDqOBatchTimeout() uint32 {
	if m != nil {
		return m.DqOBatchTimeout
	}
	return 0
}

func (m *BaseServerConfig) GetDestinySignerWorkers() uint32 {
	if m != nil {
		return m.DestinySignerWorkers
	}
	return 0
}

func (m *BaseServerConfig) GetWorkers() map[string]uint32 {
	if m != nil {
		return m.Workers
	}
	return nil
}

func (m *BaseServerConfig) GetWorkersQueueSizes() map[string]uint32 {
	if m != nil {
		return m.WorkersQueueSizes
	}
	return nil
}

func (m *BaseServerConfig) GetCmdBatchSize() uint32 {
	if m != nil {
		return m.CmdBatchSize
	}
	return 0
}

func (m *BaseServerConfig) GetCmdBatchTimeout() uint32 {
	if m != nil {
		return m.CmdBatchTimeout
	}
	return 0
}

func (m *BaseServerConfig) GetReqBufThreshold() int32 {
	if m != nil {
		return m.ReqBufThreshold
	}
	return 0
}

func (m *BaseServerConfig) GetThreshsignFastLagrange() bool {
	if m != nil {
		return m.ThreshsignFastLagrange
	}
	return false
}

func (m *BaseServerConfig) GetDispelWaitForAllRb() bool {
	if m != nil {
		return m.DispelWaitForAllRb
	}
	return false
}

func (m *BaseServerConfig) GetRccAlgorithm() peerpb.Algorithm {
	if m != nil {
		return m.RccAlgorithm
	}
	return peerpb.Algorithm_PBFT
}

func (m *BaseServerConfig) GetMultiChainDuoBFTConfig() *peerpb.MultiChainDuoBFTConfig {
	if m != nil {
		return m.MultiChainDuoBFTConfig
	}
	return nil
}

type BaseClientConfig struct {
	MaxInflightRequests uint32 `protobuf:"varint,1,opt,name=max_inflight_requests,json=maxInflightRequests,proto3" json:"max_inflight_requests,omitempty"`
	TotalRequests       uint32 `protobuf:"varint,2,opt,name=total_requests,json=totalRequests,proto3" json:"total_requests,omitempty"`
	RequestPayloadSize  uint64 `protobuf:"varint,3,opt,name=request_payload_size,json=requestPayloadSize,proto3" json:"request_payload_size,omitempty"`
	RequestOpsBatchSize uint64 `protobuf:"varint,4,opt,name=request_ops_batch_size,json=requestOpsBatchSize,proto3" json:"request_ops_batch_size,omitempty"`
	SleepTimeSeconds    uint64 `protobuf:"varint,5,opt,name=sleep_time_seconds,json=sleepTimeSeconds,proto3" json:"sleep_time_seconds,omitempty"`
	ConflictPercent     uint64 `protobuf:"varint,6,opt,name=conflict_percent,json=conflictPercent,proto3" json:"conflict_percent,omitempty"`
	FastResponsePercent uint64 `protobuf:"varint,7,opt,name=fast_response_percent,json=fastResponsePercent,proto3" json:"fast_response_percent,omitempty"`
	LogVerbose          bool   `protobuf:"varint,8,opt,name=log_verbose,json=logVerbose,proto3" json:"log_verbose,omitempty"`
}

func (m *BaseClientConfig) Reset()         { *m = BaseClientConfig{} }
func (m *BaseClientConfig) String() string { return proto.CompactTextString(m) }
func (*BaseClientConfig) ProtoMessage()    {}
func (*BaseClientConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5d7820c90e72894, []int{2}
}
func (m *BaseClientConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseClientConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseClientConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseClientConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseClientConfig.Merge(m, src)
}
func (m *BaseClientConfig) XXX_Size() int {
	return m.Size()
}
func (m *BaseClientConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseClientConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BaseClientConfig proto.InternalMessageInfo

func (m *BaseClientConfig) GetMaxInflightRequests() uint32 {
	if m != nil {
		return m.MaxInflightRequests
	}
	return 0
}

func (m *BaseClientConfig) GetTotalRequests() uint32 {
	if m != nil {
		return m.TotalRequests
	}
	return 0
}

func (m *BaseClientConfig) GetRequestPayloadSize() uint64 {
	if m != nil {
		return m.RequestPayloadSize
	}
	return 0
}

func (m *BaseClientConfig) GetRequestOpsBatchSize() uint64 {
	if m != nil {
		return m.RequestOpsBatchSize
	}
	return 0
}

func (m *BaseClientConfig) GetSleepTimeSeconds() uint64 {
	if m != nil {
		return m.SleepTimeSeconds
	}
	return 0
}

func (m *BaseClientConfig) GetConflictPercent() uint64 {
	if m != nil {
		return m.ConflictPercent
	}
	return 0
}

func (m *BaseClientConfig) GetFastResponsePercent() uint64 {
	if m != nil {
		return m.FastResponsePercent
	}
	return 0
}

func (m *BaseClientConfig) GetLogVerbose() bool {
	if m != nil {
		return m.LogVerbose
	}
	return false
}

type ClientConfig struct {
	*BaseClientConfig `protobuf:"bytes,1,opt,name=config,proto3,embedded=config" json:"config,omitempty"`
	Nodes             []peerpb.PeerInfo                                      `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes"`
	Algorithm         peerpb.Algorithm                                       `protobuf:"varint,3,opt,name=algorithm,proto3,enum=peerpb.Algorithm" json:"algorithm,omitempty"`
	MaxFailures       int32                                                  `protobuf:"varint,4,opt,name=max_failures,json=maxFailures,proto3" json:"max_failures,omitempty"`
	MaxFastFailures   int32                                                  `protobuf:"varint,5,opt,name=max_fast_failures,json=maxFastFailures,proto3" json:"max_fast_failures,omitempty"`
	LeaderID          github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID `protobuf:"varint,6,opt,name=leader_id,json=leaderId,proto3,casttype=github.com/ibalajiarun/go-consensus/peer/peerpb.PeerID" json:"leader_id,omitempty"`
}

func (m *ClientConfig) Reset()         { *m = ClientConfig{} }
func (m *ClientConfig) String() string { return proto.CompactTextString(m) }
func (*ClientConfig) ProtoMessage()    {}
func (*ClientConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5d7820c90e72894, []int{3}
}
func (m *ClientConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientConfig.Merge(m, src)
}
func (m *ClientConfig) XXX_Size() int {
	return m.Size()
}
func (m *ClientConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ClientConfig proto.InternalMessageInfo

func (m *ClientConfig) GetNodes() []peerpb.PeerInfo {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *ClientConfig) GetAlgorithm() peerpb.Algorithm {
	if m != nil {
		return m.Algorithm
	}
	return peerpb.Algorithm_PBFT
}

func (m *ClientConfig) GetMaxFailures() int32 {
	if m != nil {
		return m.MaxFailures
	}
	return 0
}

func (m *ClientConfig) GetMaxFastFailures() int32 {
	if m != nil {
		return m.MaxFastFailures
	}
	return 0
}

func (m *ClientConfig) GetLeaderID() github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID {
	if m != nil {
		return m.LeaderID
	}
	return 0
}

type ClientResponse struct {
	Config   *ClientConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	ClientId uint32        `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (m *ClientResponse) Reset()         { *m = ClientResponse{} }
func (m *ClientResponse) String() string { return proto.CompactTextString(m) }
func (*ClientResponse) ProtoMessage()    {}
func (*ClientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5d7820c90e72894, []int{4}
}
func (m *ClientResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientResponse.Merge(m, src)
}
func (m *ClientResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClientResponse proto.InternalMessageInfo

func (m *ClientResponse) GetConfig() *ClientConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ClientResponse) GetClientId() uint32 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

type Empty struct {
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5d7820c90e72894, []int{5}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ServerResponse)(nil), "masterpb.ServerResponse")
	proto.RegisterType((*BaseServerConfig)(nil), "masterpb.BaseServerConfig")
	proto.RegisterMapType((map[string]uint32)(nil), "masterpb.BaseServerConfig.WorkersEntry")
	proto.RegisterMapType((map[string]uint32)(nil), "masterpb.BaseServerConfig.WorkersQueueSizesEntry")
	proto.RegisterType((*BaseClientConfig)(nil), "masterpb.BaseClientConfig")
	proto.RegisterType((*ClientConfig)(nil), "masterpb.ClientConfig")
	proto.RegisterType((*ClientResponse)(nil), "masterpb.ClientResponse")
	proto.RegisterType((*Empty)(nil), "masterpb.Empty")
}

func init() { proto.RegisterFile("cmd/master/masterpb/master.proto", fileDescriptor_b5d7820c90e72894) }

var fileDescriptor_b5d7820c90e72894 = []byte{
	// 1137 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xd1, 0x6e, 0xdb, 0x36,
	0x17, 0x8e, 0x1a, 0x3b, 0x76, 0x98, 0xd8, 0x71, 0x98, 0xd4, 0xd0, 0xef, 0x1f, 0xb0, 0xbd, 0x60,
	0xc5, 0xbc, 0xae, 0xb3, 0xbb, 0x74, 0xe8, 0x8a, 0xee, 0x2a, 0x6e, 0x9a, 0x21, 0x40, 0x87, 0xa6,
	0x4a, 0xb1, 0x02, 0x03, 0x0a, 0x82, 0x96, 0x8e, 0x65, 0x2e, 0xb2, 0xa8, 0x90, 0x54, 0x5a, 0xf7,
	0x72, 0x4f, 0x30, 0xec, 0x0d, 0xf6, 0x36, 0xbd, 0xec, 0xe5, 0x80, 0x01, 0xc1, 0x90, 0x5e, 0xee,
	0x0d, 0x76, 0x35, 0x90, 0x94, 0x2c, 0xd7, 0xe8, 0xb0, 0x0e, 0xbb, 0xb1, 0xa5, 0xef, 0xfb, 0xce,
	0x11, 0xf5, 0xf1, 0x9c, 0x43, 0xa1, 0xae, 0x3f, 0x0d, 0x06, 0x53, 0x2a, 0x15, 0x88, 0xec, 0x2f,
	0x19, 0x65, 0x17, 0xfd, 0x44, 0x70, 0xc5, 0x71, 0x35, 0x87, 0x5b, 0xbb, 0x21, 0x0f, 0xb9, 0x01,
	0x07, 0xfa, 0xca, 0xf2, 0xad, 0x66, 0x02, 0x20, 0x06, 0xfa, 0x27, 0x19, 0x99, 0x3f, 0x8b, 0xef,
	0xfd, 0xe2, 0xa0, 0xfa, 0x29, 0x88, 0x0b, 0x10, 0x1e, 0xc8, 0x84, 0xc7, 0x12, 0xf0, 0x6d, 0xb4,
	0xe6, 0xf3, 0x78, 0xcc, 0x42, 0xd7, 0xe9, 0x3a, 0xbd, 0x8d, 0x7d, 0xdc, 0xb7, 0x61, 0xfd, 0x13,
	0x00, 0xf1, 0xc0, 0x30, 0xc3, 0xd2, 0x9b, 0xcb, 0x8e, 0xe3, 0x65, 0x3a, 0xfc, 0x1c, 0x55, 0xb4,
	0x84, 0xb0, 0xc0, 0xbd, 0xd6, 0x75, 0x7a, 0xa5, 0xe1, 0xe1, 0xd5, 0x65, 0x67, 0x4d, 0xcb, 0x8f,
	0x0f, 0xff, 0xbc, 0xec, 0xdc, 0x0d, 0x99, 0x9a, 0xa4, 0xa3, 0xbe, 0xcf, 0xa7, 0x03, 0x36, 0xa2,
	0x11, 0xfd, 0x81, 0x51, 0x91, 0xc6, 0x83, 0x90, 0x7f, 0xee, 0xeb, 0x27, 0xc6, 0x32, 0x95, 0x83,
	0x85, 0xf5, 0xf5, 0x6d, 0xa4, 0xb7, 0xa6, 0x6f, 0x8f, 0x83, 0xbd, 0x3f, 0x2a, 0xa8, 0x31, 0xa4,
	0x12, 0xec, 0x3a, 0xed, 0x0a, 0xf0, 0xff, 0x50, 0xf5, 0x0c, 0x66, 0x64, 0xcc, 0x22, 0x70, 0x4b,
	0x5d, 0xa7, 0xb7, 0xee, 0x55, 0xce, 0x60, 0x76, 0xc4, 0x22, 0xc0, 0x1f, 0xa1, 0x4d, 0x88, 0xfd,
	0x88, 0x5e, 0x00, 0x49, 0xa8, 0x9a, 0xb8, 0x65, 0x43, 0x6f, 0x64, 0xd8, 0x09, 0x55, 0x13, 0xdc,
	0x41, 0x1b, 0x11, 0x0f, 0xc9, 0x05, 0x88, 0x11, 0x97, 0xe0, 0xae, 0x75, 0x9d, 0x5e, 0xd5, 0x43,
	0x11, 0x0f, 0xbf, 0xb3, 0x08, 0xbe, 0x85, 0x70, 0x9e, 0x63, 0x44, 0x95, 0x3f, 0x21, 0x92, 0xbd,
	0x02, 0xb7, 0xd2, 0x75, 0x7a, 0x65, 0xaf, 0x91, 0x31, 0x43, 0x4d, 0x9c, 0xb2, 0x57, 0x80, 0x6f,
	0xa0, 0xad, 0xe0, 0x9c, 0xf0, 0x45, 0x69, 0xb5, 0xeb, 0xf4, 0x6a, 0xde, 0x66, 0x70, 0xfe, 0xb8,
	0x90, 0x7d, 0x86, 0xf0, 0x82, 0x4c, 0xb1, 0x29, 0xf0, 0x54, 0xb9, 0xd8, 0x28, 0xb7, 0x72, 0xe5,
	0x53, 0x0b, 0xe3, 0x2f, 0x51, 0x33, 0x00, 0xa9, 0x58, 0x3c, 0x23, 0x92, 0x85, 0x31, 0x08, 0xf2,
	0x82, 0x8b, 0x33, 0x10, 0xd2, 0x5d, 0x37, 0x01, 0xbb, 0x19, 0x7b, 0x6a, 0xc8, 0x67, 0x96, 0xc3,
	0x07, 0xa8, 0x92, 0xcb, 0x50, 0x77, 0xb5, 0xb7, 0xb1, 0xff, 0x49, 0x3f, 0xaf, 0x8c, 0xfe, 0xb2,
	0x87, 0xfd, 0x2c, 0xe8, 0x61, 0xac, 0xc4, 0xcc, 0xcb, 0xe3, 0x30, 0x45, 0x3b, 0xd9, 0x25, 0x39,
	0x4f, 0x21, 0x05, 0xf3, 0x3e, 0xd2, 0xad, 0x9b, 0x74, 0x5f, 0xfc, 0x73, 0xba, 0x27, 0x3a, 0x48,
	0xbf, 0x6f, 0x96, 0x78, 0xfb, 0xc5, 0x32, 0x8e, 0x3f, 0x46, 0x75, 0x7f, 0x1a, 0x2c, 0xda, 0xb5,
	0x61, 0xed, 0xf2, 0xa7, 0x41, 0x61, 0xd7, 0x4d, 0xb4, 0x5d, 0xa8, 0x72, 0xb7, 0x36, 0xad, 0x5b,
	0xb9, 0x30, 0x77, 0xeb, 0x26, 0xda, 0x16, 0x70, 0x4e, 0x46, 0xe9, 0x98, 0xa8, 0x89, 0x00, 0x39,
	0xe1, 0x51, 0xe0, 0xd6, 0xcc, 0x76, 0x6d, 0x09, 0x38, 0x1f, 0xa6, 0xe3, 0xa7, 0x39, 0x8c, 0xef,
	0x21, 0xd7, 0x6a, 0xb4, 0xaf, 0x64, 0x4c, 0xa5, 0x22, 0x11, 0x0d, 0x05, 0x8d, 0x43, 0x70, 0xb7,
	0x4c, 0x25, 0x34, 0x0b, 0xfe, 0x88, 0x4a, 0xf5, 0x28, 0x63, 0xf1, 0x3e, 0x6a, 0x06, 0x4c, 0x26,
	0x10, 0x91, 0x17, 0x94, 0x29, 0x32, 0xe6, 0x82, 0xd0, 0x28, 0x22, 0x62, 0xe4, 0x36, 0x4c, 0x1c,
	0xb6, 0xec, 0x33, 0xca, 0xd4, 0x11, 0x17, 0x07, 0x51, 0xe4, 0x8d, 0xf0, 0x5d, 0x54, 0x13, 0xbe,
	0x4f, 0x68, 0x14, 0x72, 0xc1, 0xd4, 0x64, 0xea, 0x6e, 0x77, 0x9d, 0x5e, 0x7d, 0x7f, 0x3b, 0xef,
	0xaa, 0x83, 0x9c, 0xf0, 0x36, 0x85, 0xef, 0xcf, 0xef, 0xb0, 0x42, 0xee, 0x34, 0x8d, 0x14, 0xf3,
	0x27, 0x94, 0xc5, 0x24, 0x48, 0xf9, 0x68, 0xac, 0x48, 0xd6, 0x98, 0x3b, 0xa6, 0x31, 0xdb, 0x79,
	0x8a, 0x6f, 0xb5, 0xee, 0x81, 0xd6, 0x1d, 0xa6, 0x7c, 0x78, 0xf4, 0x34, 0x6b, 0xd2, 0xd6, 0xd5,
	0x65, 0xa7, 0xf9, 0x7e, 0xce, 0x6b, 0x16, 0xb9, 0x0f, 0x4d, 0x6a, 0x8b, 0xb7, 0xee, 0xa3, 0xcd,
	0xc5, 0xaa, 0xc0, 0x0d, 0xb4, 0x7a, 0x06, 0x33, 0x33, 0x09, 0xd6, 0x3d, 0x7d, 0x89, 0x77, 0x51,
	0xf9, 0x82, 0x46, 0x29, 0x98, 0x56, 0xaf, 0x79, 0xf6, 0xe6, 0xfe, 0xb5, 0x7b, 0x4e, 0xeb, 0x10,
	0x35, 0xdf, 0x5f, 0x02, 0xff, 0x26, 0xcb, 0xde, 0x8f, 0xab, 0xb6, 0xdb, 0x1f, 0x44, 0x0c, 0xe2,
	0x6c, 0x59, 0x78, 0x1f, 0x5d, 0x9f, 0xd2, 0x97, 0x84, 0xc5, 0xe3, 0x88, 0x85, 0x13, 0x45, 0x04,
	0x9c, 0xa7, 0x20, 0x95, 0x34, 0x29, 0x6b, 0xde, 0xce, 0x94, 0xbe, 0x3c, 0xce, 0x38, 0x2f, 0xa3,
	0xf0, 0x0d, 0x54, 0x57, 0x5c, 0xd1, 0xa8, 0x10, 0xdb, 0x67, 0xd5, 0x0c, 0x3a, 0x97, 0xdd, 0x46,
	0xbb, 0x99, 0x80, 0x24, 0x74, 0x16, 0x71, 0x1a, 0xd8, 0x8a, 0x5c, 0xd5, 0x93, 0xcc, 0xc3, 0x19,
	0x77, 0x62, 0x29, 0x53, 0x97, 0x77, 0x50, 0x33, 0x8f, 0xe0, 0x89, 0x5c, 0xac, 0xe2, 0x92, 0x89,
	0xd9, 0xc9, 0xd8, 0xc7, 0x89, 0x2c, 0x8a, 0xf9, 0x16, 0xc2, 0x32, 0x02, 0x48, 0x4c, 0x21, 0x13,
	0x09, 0x3e, 0x8f, 0x03, 0x69, 0x46, 0x53, 0xc9, 0x6b, 0x18, 0x46, 0x97, 0xf2, 0xa9, 0xc5, 0xf1,
	0xa7, 0xa8, 0xa1, 0xb7, 0x3a, 0x62, 0xbe, 0x22, 0x09, 0x08, 0x1f, 0x62, 0x65, 0x86, 0x54, 0xc9,
	0xdb, 0xca, 0xf1, 0x13, 0x0b, 0x6b, 0x6b, 0x4c, 0x09, 0x8b, 0x6c, 0x7e, 0xcf, 0xf5, 0x15, 0xbb,
	0x18, 0x4d, 0xe6, 0xb3, 0x3d, 0x8f, 0x59, 0x1a, 0x7f, 0xd5, 0xe5, 0xf1, 0xb7, 0xf7, 0xdb, 0x35,
	0xb4, 0xf9, 0xce, 0x06, 0xdc, 0x5b, 0x3a, 0x14, 0x5a, 0xef, 0xce, 0x81, 0x45, 0xed, 0xd2, 0xe1,
	0x70, 0x0b, 0x95, 0x63, 0x1e, 0x80, 0x76, 0x5f, 0x0f, 0x90, 0xc6, 0xe2, 0x69, 0x72, 0x1c, 0x8f,
	0xf9, 0xb0, 0xf4, 0xfa, 0xb2, 0xb3, 0xe2, 0x59, 0x11, 0x1e, 0xa0, 0xf5, 0xa2, 0x53, 0x56, 0xff,
	0xae, 0x53, 0x0a, 0x8d, 0x1e, 0xf6, 0xba, 0x32, 0xc6, 0x94, 0x45, 0xa9, 0x00, 0x69, 0xb6, 0xa0,
	0xec, 0x6d, 0x4c, 0xe9, 0xcb, 0xa3, 0x0c, 0xd2, 0xb3, 0xc1, 0x4a, 0xa4, 0x2a, 0x74, 0x65, 0x3b,
	0x1b, 0x8c, 0x4e, 0xaa, 0xb9, 0xd6, 0x47, 0xeb, 0x11, 0xd0, 0xc0, 0x1e, 0x66, 0xc6, 0xf1, 0xe1,
	0xd1, 0xd5, 0x65, 0xa7, 0xfa, 0xc8, 0x80, 0xff, 0xe9, 0x38, 0xab, 0xda, 0xc4, 0xc7, 0xc1, 0xde,
	0x73, 0x54, 0xb7, 0x86, 0xcd, 0xcf, 0xdc, 0xfe, 0x92, 0xbd, 0xcd, 0xc2, 0xde, 0x45, 0x6b, 0xe7,
	0xa6, 0xfe, 0x1f, 0xad, 0xfb, 0x06, 0xcf, 0xcf, 0xdc, 0x9a, 0x57, 0xb5, 0xc0, 0x71, 0xb0, 0x57,
	0x41, 0xe5, 0x87, 0xd3, 0x44, 0xcd, 0xf6, 0x7f, 0x76, 0x50, 0x43, 0x4f, 0x68, 0xe6, 0xc3, 0x21,
	0x93, 0x3e, 0xbf, 0x00, 0x31, 0xc3, 0x5f, 0xa3, 0xaa, 0x07, 0x21, 0xd3, 0xd9, 0xf1, 0xf5, 0xdc,
	0xda, 0x21, 0x95, 0xcc, 0xcf, 0x77, 0xa4, 0xe5, 0x16, 0x4f, 0x5f, 0xfa, 0x36, 0x38, 0x40, 0xf5,
	0x6f, 0x40, 0x65, 0x39, 0xb5, 0xf6, 0x03, 0x52, 0xbc, 0xfb, 0xaa, 0xc3, 0x27, 0xaf, 0xaf, 0xda,
	0xce, 0x9b, 0xab, 0xb6, 0xf3, 0xfb, 0x55, 0xdb, 0xf9, 0xe9, 0x6d, 0x7b, 0xe5, 0xcd, 0xdb, 0xf6,
	0xca, 0xaf, 0x6f, 0xdb, 0x2b, 0xdf, 0x7f, 0xf5, 0x21, 0xc6, 0xbe, 0xe7, 0x4b, 0x68, 0xb4, 0x66,
	0xbe, 0x65, 0xee, 0xfc, 0x15, 0x00, 0x00, 0xff, 0xff, 0xcf, 0xec, 0xfa, 0x9a, 0x27, 0x09, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceDiscoveryClient is the client API for ServiceDiscovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceDiscoveryClient interface {
	Register(ctx context.Context, in *peerpb.BasicPeerInfo, opts ...grpc.CallOption) (*ServerResponse, error)
	GetServiceInfo(ctx context.Context, in *peerpb.BasicPeerInfo, opts ...grpc.CallOption) (*ClientResponse, error)
}

type serviceDiscoveryClient struct {
	cc *grpc.ClientConn
}

func NewServiceDiscoveryClient(cc *grpc.ClientConn) ServiceDiscoveryClient {
	return &serviceDiscoveryClient{cc}
}

func (c *serviceDiscoveryClient) Register(ctx context.Context, in *peerpb.BasicPeerInfo, opts ...grpc.CallOption) (*ServerResponse, error) {
	out := new(ServerResponse)
	err := c.cc.Invoke(ctx, "/masterpb.ServiceDiscovery/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDiscoveryClient) GetServiceInfo(ctx context.Context, in *peerpb.BasicPeerInfo, opts ...grpc.CallOption) (*ClientResponse, error) {
	out := new(ClientResponse)
	err := c.cc.Invoke(ctx, "/masterpb.ServiceDiscovery/GetServiceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceDiscoveryServer is the server API for ServiceDiscovery service.
type ServiceDiscoveryServer interface {
	Register(context.Context, *peerpb.BasicPeerInfo) (*ServerResponse, error)
	GetServiceInfo(context.Context, *peerpb.BasicPeerInfo) (*ClientResponse, error)
}

// UnimplementedServiceDiscoveryServer can be embedded to have forward compatible implementations.
type UnimplementedServiceDiscoveryServer struct {
}

func (*UnimplementedServiceDiscoveryServer) Register(ctx context.Context, req *peerpb.BasicPeerInfo) (*ServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedServiceDiscoveryServer) GetServiceInfo(ctx context.Context, req *peerpb.BasicPeerInfo) (*ClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceInfo not implemented")
}

func RegisterServiceDiscoveryServer(s *grpc.Server, srv ServiceDiscoveryServer) {
	s.RegisterService(&_ServiceDiscovery_serviceDesc, srv)
}

func _ServiceDiscovery_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(peerpb.BasicPeerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDiscoveryServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/masterpb.ServiceDiscovery/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDiscoveryServer).Register(ctx, req.(*peerpb.BasicPeerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDiscovery_GetServiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(peerpb.BasicPeerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDiscoveryServer).GetServiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/masterpb.ServiceDiscovery/GetServiceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDiscoveryServer).GetServiceInfo(ctx, req.(*peerpb.BasicPeerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceDiscovery_serviceDesc = grpc.ServiceDesc{
	ServiceName: "masterpb.ServiceDiscovery",
	HandlerType: (*ServiceDiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ServiceDiscovery_Register_Handler,
		},
		{
			MethodName: "GetServiceInfo",
			Handler:    _ServiceDiscovery_GetServiceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/master/masterpb/master.proto",
}

func (m *ServerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PeerID != 0 {
		i = encodeVarintMaster(dAtA, i, uint64(m.PeerID))
		i--
		dAtA[i] = 0x10
	}
	if m.PeerConfig != nil {
		{
			size, err := m.PeerConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMaster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BaseServerConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseServerConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseServerConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MultiChainDuoBFTConfig != nil {
		{
			size, err := m.MultiChainDuoBFTConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMaster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.DqOBatchTimeout != 0 {
		i = encodeVarintMaster(dAtA, i, uint64(m.DqOBatchTimeout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.RccAlgorithm != 0 {
		i = encodeVarintMaster(dAtA, i, uint64(m.RccAlgorithm))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.DispelWaitForAllRb {
		i--
		if m.DispelWaitForAllRb {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.ThreshsignFastLagrange {
		i--
		if m.ThreshsignFastLagrange {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if len(m.WorkersQueueSizes) > 0 {
		for k := range m.WorkersQueueSizes {
			v := m.WorkersQueueSizes[k]
			baseI := i
			i = encodeVarintMaster(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMaster(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMaster(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x72
		}
	}
	if m.ReqBufThreshold != 0 {
		i = encodeVarintMaster(dAtA, i, uint64(m.ReqBufThreshold))
		i--
		dAtA[i] = 0x68
	}
	if m.CmdBatchTimeout != 0 {
		i = encodeVarintMaster(dAtA, i, uint64(m.CmdBatchTimeout))
		i--
		dAtA[i] = 0x60
	}
	if m.CmdBatchSize != 0 {
		i = encodeVarintMaster(dAtA, i, uint64(m.CmdBatchSize))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Workers) > 0 {
		for k := range m.Workers {
			v := m.Workers[k]
			baseI := i
			i = encodeVarintMaster(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMaster(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMaster(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.DestinySignerWorkers != 0 {
		i = encodeVarintMaster(dAtA, i, uint64(m.DestinySignerWorkers))
		i--
		dAtA[i] = 0x48
	}
	if m.DqOBatchSize != 0 {
		i = encodeVarintMaster(dAtA, i, uint64(m.DqOBatchSize))
		i--
		dAtA[i] = 0x40
	}
	if m.EnclaveBatchSize != 0 {
		i = encodeVarintMaster(dAtA, i, uint64(m.EnclaveBatchSize))
		i--
		dAtA[i] = 0x38
	}
	if m.LogVerbose {
		i--
		if m.LogVerbose {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.EnclavePath) > 0 {
		i -= len(m.EnclavePath)
		copy(dAtA[i:], m.EnclavePath)
		i = encodeVarintMaster(dAtA, i, uint64(len(m.EnclavePath)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.KeyFile) > 0 {
		i -= len(m.KeyFile)
		copy(dAtA[i:], m.KeyFile)
		i = encodeVarintMaster(dAtA, i, uint64(len(m.KeyFile)))
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}

func (m *BaseClientConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseClientConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseClientConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogVerbose {
		i--
		if m.LogVerbose {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.FastResponsePercent != 0 {
		i = encodeVarintMaster(dAtA, i, uint64(m.FastResponsePercent))
		i--
		dAtA[i] = 0x38
	}
	if m.ConflictPercent != 0 {
		i = encodeVarintMaster(dAtA, i, uint64(m.ConflictPercent))
		i--
		dAtA[i] = 0x30
	}
	if m.SleepTimeSeconds != 0 {
		i = encodeVarintMaster(dAtA, i, uint64(m.SleepTimeSeconds))
		i--
		dAtA[i] = 0x28
	}
	if m.RequestOpsBatchSize != 0 {
		i = encodeVarintMaster(dAtA, i, uint64(m.RequestOpsBatchSize))
		i--
		dAtA[i] = 0x20
	}
	if m.RequestPayloadSize != 0 {
		i = encodeVarintMaster(dAtA, i, uint64(m.RequestPayloadSize))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalRequests != 0 {
		i = encodeVarintMaster(dAtA, i, uint64(m.TotalRequests))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxInflightRequests != 0 {
		i = encodeVarintMaster(dAtA, i, uint64(m.MaxInflightRequests))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClientConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LeaderID != 0 {
		i = encodeVarintMaster(dAtA, i, uint64(m.LeaderID))
		i--
		dAtA[i] = 0x30
	}
	if m.MaxFastFailures != 0 {
		i = encodeVarintMaster(dAtA, i, uint64(m.MaxFastFailures))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxFailures != 0 {
		i = encodeVarintMaster(dAtA, i, uint64(m.MaxFailures))
		i--
		dAtA[i] = 0x20
	}
	if m.Algorithm != 0 {
		i = encodeVarintMaster(dAtA, i, uint64(m.Algorithm))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMaster(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BaseClientConfig != nil {
		{
			size, err := m.BaseClientConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMaster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientId != 0 {
		i = encodeVarintMaster(dAtA, i, uint64(m.ClientId))
		i--
		dAtA[i] = 0x10
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMaster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMaster(dAtA []byte, offset int, v uint64) int {
	offset -= sovMaster(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ServerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeerConfig != nil {
		l = m.PeerConfig.Size()
		n += 1 + l + sovMaster(uint64(l))
	}
	if m.PeerID != 0 {
		n += 1 + sovMaster(uint64(m.PeerID))
	}
	return n
}

func (m *BaseServerConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KeyFile)
	if l > 0 {
		n += 1 + l + sovMaster(uint64(l))
	}
	l = len(m.EnclavePath)
	if l > 0 {
		n += 1 + l + sovMaster(uint64(l))
	}
	if m.LogVerbose {
		n += 2
	}
	if m.EnclaveBatchSize != 0 {
		n += 1 + sovMaster(uint64(m.EnclaveBatchSize))
	}
	if m.DqOBatchSize != 0 {
		n += 1 + sovMaster(uint64(m.DqOBatchSize))
	}
	if m.DestinySignerWorkers != 0 {
		n += 1 + sovMaster(uint64(m.DestinySignerWorkers))
	}
	if len(m.Workers) > 0 {
		for k, v := range m.Workers {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMaster(uint64(len(k))) + 1 + sovMaster(uint64(v))
			n += mapEntrySize + 1 + sovMaster(uint64(mapEntrySize))
		}
	}
	if m.CmdBatchSize != 0 {
		n += 1 + sovMaster(uint64(m.CmdBatchSize))
	}
	if m.CmdBatchTimeout != 0 {
		n += 1 + sovMaster(uint64(m.CmdBatchTimeout))
	}
	if m.ReqBufThreshold != 0 {
		n += 1 + sovMaster(uint64(m.ReqBufThreshold))
	}
	if len(m.WorkersQueueSizes) > 0 {
		for k, v := range m.WorkersQueueSizes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMaster(uint64(len(k))) + 1 + sovMaster(uint64(v))
			n += mapEntrySize + 1 + sovMaster(uint64(mapEntrySize))
		}
	}
	if m.ThreshsignFastLagrange {
		n += 2
	}
	if m.DispelWaitForAllRb {
		n += 3
	}
	if m.RccAlgorithm != 0 {
		n += 2 + sovMaster(uint64(m.RccAlgorithm))
	}
	if m.DqOBatchTimeout != 0 {
		n += 2 + sovMaster(uint64(m.DqOBatchTimeout))
	}
	if m.MultiChainDuoBFTConfig != nil {
		l = m.MultiChainDuoBFTConfig.Size()
		n += 2 + l + sovMaster(uint64(l))
	}
	return n
}

func (m *BaseClientConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxInflightRequests != 0 {
		n += 1 + sovMaster(uint64(m.MaxInflightRequests))
	}
	if m.TotalRequests != 0 {
		n += 1 + sovMaster(uint64(m.TotalRequests))
	}
	if m.RequestPayloadSize != 0 {
		n += 1 + sovMaster(uint64(m.RequestPayloadSize))
	}
	if m.RequestOpsBatchSize != 0 {
		n += 1 + sovMaster(uint64(m.RequestOpsBatchSize))
	}
	if m.SleepTimeSeconds != 0 {
		n += 1 + sovMaster(uint64(m.SleepTimeSeconds))
	}
	if m.ConflictPercent != 0 {
		n += 1 + sovMaster(uint64(m.ConflictPercent))
	}
	if m.FastResponsePercent != 0 {
		n += 1 + sovMaster(uint64(m.FastResponsePercent))
	}
	if m.LogVerbose {
		n += 2
	}
	return n
}

func (m *ClientConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseClientConfig != nil {
		l = m.BaseClientConfig.Size()
		n += 1 + l + sovMaster(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovMaster(uint64(l))
		}
	}
	if m.Algorithm != 0 {
		n += 1 + sovMaster(uint64(m.Algorithm))
	}
	if m.MaxFailures != 0 {
		n += 1 + sovMaster(uint64(m.MaxFailures))
	}
	if m.MaxFastFailures != 0 {
		n += 1 + sovMaster(uint64(m.MaxFastFailures))
	}
	if m.LeaderID != 0 {
		n += 1 + sovMaster(uint64(m.LeaderID))
	}
	return n
}

func (m *ClientResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovMaster(uint64(l))
	}
	if m.ClientId != 0 {
		n += 1 + sovMaster(uint64(m.ClientId))
	}
	return n
}

func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMaster(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMaster(x uint64) (n int) {
	return sovMaster(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ServerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PeerConfig == nil {
				m.PeerConfig = &peerpb.PeerConfig{}
			}
			if err := m.PeerConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseServerConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseServerConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseServerConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnclavePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnclavePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogVerbose", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogVerbose = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnclaveBatchSize", wireType)
			}
			m.EnclaveBatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnclaveBatchSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DqOBatchSize", wireType)
			}
			m.DqOBatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DqOBatchSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinySignerWorkers", wireType)
			}
			m.DestinySignerWorkers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinySignerWorkers |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Workers == nil {
				m.Workers = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMaster
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMaster
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMaster
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMaster
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMaster
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMaster(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMaster
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Workers[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdBatchSize", wireType)
			}
			m.CmdBatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdBatchSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdBatchTimeout", wireType)
			}
			m.CmdBatchTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdBatchTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqBufThreshold", wireType)
			}
			m.ReqBufThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqBufThreshold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkersQueueSizes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WorkersQueueSizes == nil {
				m.WorkersQueueSizes = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMaster
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMaster
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMaster
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMaster
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMaster
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMaster(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMaster
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.WorkersQueueSizes[mapkey] = mapvalue
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThreshsignFastLagrange", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ThreshsignFastLagrange = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DispelWaitForAllRb", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DispelWaitForAllRb = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RccAlgorithm", wireType)
			}
			m.RccAlgorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RccAlgorithm |= peerpb.Algorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DqOBatchTimeout", wireType)
			}
			m.DqOBatchTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DqOBatchTimeout |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiChainDuoBFTConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MultiChainDuoBFTConfig == nil {
				m.MultiChainDuoBFTConfig = &peerpb.MultiChainDuoBFTConfig{}
			}
			if err := m.MultiChainDuoBFTConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseClientConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseClientConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseClientConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxInflightRequests", wireType)
			}
			m.MaxInflightRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxInflightRequests |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRequests", wireType)
			}
			m.TotalRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRequests |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestPayloadSize", wireType)
			}
			m.RequestPayloadSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestPayloadSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestOpsBatchSize", wireType)
			}
			m.RequestOpsBatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestOpsBatchSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SleepTimeSeconds", wireType)
			}
			m.SleepTimeSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SleepTimeSeconds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConflictPercent", wireType)
			}
			m.ConflictPercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConflictPercent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastResponsePercent", wireType)
			}
			m.FastResponsePercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FastResponsePercent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogVerbose", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LogVerbose = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseClientConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseClientConfig == nil {
				m.BaseClientConfig = &BaseClientConfig{}
			}
			if err := m.BaseClientConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, peerpb.PeerInfo{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			m.Algorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algorithm |= peerpb.Algorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFailures", wireType)
			}
			m.MaxFailures = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxFailures |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxFastFailures", wireType)
			}
			m.MaxFastFailures = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxFastFailures |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderID", wireType)
			}
			m.LeaderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderID |= github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMaster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &ClientConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMaster(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMaster
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMaster
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMaster
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMaster        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMaster          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMaster = fmt.Errorf("proto: unexpected end of group")
)
