package threshsign

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"runtime"
	"strings"
	"sync"
	"testing"

	"github.com/ibalajiarun/go-consensus/peer/peerpb"
)

func readKeys(count string) ([]string, []string) {
	var skeys []string
	var vkeys []string

	keys, ok := keysMap[count]
	if !ok {
		log.Fatalf("key file not found: count=%s", count)
	}

	scanner := bufio.NewScanner(strings.NewReader(keys))
	idx := 0
	for idx < 4 && scanner.Scan() {
		vkey := scanner.Text()
		vkeys = append(vkeys, vkey)
		idx++
	}

	if idx < 4 {
		log.Fatal("too few lines in file")
	}

	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}

	for scanner.Scan() {
		skey := scanner.Text()
		skeys = append(skeys, skey)
	}

	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}

	return skeys, vkeys
}

func TestThreshsignAllSignatures(t *testing.T) {
	threshold := uint32(13)
	total := uint32(13)

	skeys, vkeys := readKeys(fmt.Sprintf("%d_%d", threshold, total))

	enclavePrefix, ok := os.LookupEnv("workspaceFolder")
	if !ok {
		t.Fatalf("Please set the $workspaceFolder environment variable to point to the project root")
	}
	enclavePath := fmt.Sprintf("%v/enclaves/threshsign/enclave_threshsign/", enclavePrefix)

	var enclaves []*ThreshsignEnclave
	for index := 0; index < int(total); index++ {
		s := NewThreshsignEnclave(enclavePath, threshold, total)
		s.Init(index+1, skeys[index], vkeys, total)
		enclaves = append(enclaves, s)
	}

	sigs := make(map[peerpb.PeerID][]byte)
	for i, e := range enclaves {
		sig := e.SignUsingEnclave([]byte("hello"), 0, uint64(100))
		sigs[peerpb.PeerID(i)] = sig
	}

	for _, e := range enclaves {
		aggSig := e.AggregateSigAndVerify([]byte("hello"), uint32(0), uint64(100), sigs)
		// fmt.Println(string(aggSig))
		e.Verify([]byte("hello"), 0, uint64(100), aggSig)
		break
	}
	// t.FailNow()
}

func TestThreshsignOnlyThreshold(t *testing.T) {
	threshold := uint32(2)
	total := uint32(3)

	skeys, vkeys := readKeys(fmt.Sprintf("%d_%d", threshold, total))

	enclavePrefix, ok := os.LookupEnv("workspaceFolder")
	if !ok {
		t.Fatalf("Please set the $workspaceFolder environment variable to point to the project root")
	}
	enclavePath := fmt.Sprintf("%v/enclaves/threshsign/enclave_threshsign/", enclavePrefix)

	var enclaves []*ThreshsignEnclave
	for index := 0; index < int(total); index++ {
		s := NewThreshsignEnclave(enclavePath, threshold, total)
		s.Init(index+1, skeys[index], vkeys, total)
		enclaves = append(enclaves, s)
	}

	sigs := make(map[peerpb.PeerID][]byte)
	c := uint32(0)
	for i, e := range enclaves {
		sig := e.SignUsingEnclave([]byte("hello"), 0, uint64(100))
		sigs[peerpb.PeerID(i)] = sig
		c++
		if c >= threshold {
			break
		}
	}

	for _, e := range enclaves {
		aggSig := e.AggregateSigAndVerify([]byte("hello"), uint32(0), uint64(100), sigs)
		e.Verify([]byte("hello"), 0, uint64(100), aggSig)
	}
}

func TestParallelThreshsignAllSignatures(t *testing.T) {
	pCount := 10
	var wg sync.WaitGroup
	for i := 0; i < pCount; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			threshold := uint32(13)
			total := uint32(13)

			skeys, vkeys := readKeys(fmt.Sprintf("%d_%d", threshold, total))

			enclavePrefix, ok := os.LookupEnv("workspaceFolder")
			if !ok {
				t.Fatalf("Please set the $workspaceFolder environment variable to point to the project root")
			}
			enclavePath := fmt.Sprintf("%v/enclaves/threshsign/enclave_threshsign/", enclavePrefix)

			var enclaves []*ThreshsignEnclave
			for index := 0; index < int(total); index++ {
				s := NewThreshsignEnclave(enclavePath, threshold, total)
				s.Init(index+1, skeys[index], vkeys, total)
				enclaves = append(enclaves, s)
			}

			sigs := make(map[peerpb.PeerID][]byte)
			for i, e := range enclaves {
				sig := e.SignUsingEnclave([]byte("hello"), 0, uint64(100))
				sigs[peerpb.PeerID(i)] = sig
			}

			for _, e := range enclaves {
				aggSig := e.AggregateSigAndVerify([]byte("hello"), uint32(0), uint64(100), sigs)
				e.Verify([]byte("hello"), 0, uint64(100), aggSig)
			}
		}()
	}
	wg.Wait()
}

func BenchmarkEnclaveThreshsignVerify(b *testing.B) {
	threshold := uint32(97)
	total := uint32(97)

	skeys, vkeys := readKeys(fmt.Sprintf("%d_%d", threshold, total))

	enclavePrefix, ok := os.LookupEnv("workspaceFolder")
	if !ok {
		b.Fatalf("Please set the $workspaceFolder environment variable to point to the project root")
	}
	enclavePath := fmt.Sprintf("%v/enclaves/threshsign/enclave_threshsign/", enclavePrefix)

	var enclaves []*ThreshsignEnclave
	for index := 0; index < int(total); index++ {
		s := NewThreshsignEnclave(enclavePath, threshold, total)
		s.Init(index+1, skeys[index], vkeys, total)
		enclaves = append(enclaves, s)
	}

	sigsMap := make(map[peerpb.PeerID][]byte)
	req := ThreshsignRequest{
		Message: []byte(fmt.Sprintf("hello")),
		Counter: 100,
	}

	c := uint32(0)
	for i, e := range enclaves {
		sig := e.SignUsingEnclave(req.Message, 0, req.Counter)
		sigsMap[peerpb.PeerID(i)] = sig
		c++
		if c >= threshold {
			break
		}
	}

	req.SigShares = sigsMap
	e := enclaves[0]

	aggSig := e.AggregateSigAndVerify(req.Message, uint32(0), req.Counter, req.SigShares)
	req.CombinedSig = aggSig

	b.ResetTimer()
	// for n := 0; n < b.N; n++ {
	// 	e.Verify(req.Message, req.Counter, req.CombinedSig)
	// }
	// b.SetParallelism(30)
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			e.Verify(req.Message, 0, req.Counter, req.CombinedSig)
		}
	})
}

func BenchmarkEnclaveThreshsignSign(b *testing.B) {
	threshold := uint32(13)
	total := uint32(13)

	skeys, vkeys := readKeys(fmt.Sprintf("%d_%d", threshold, total))

	enclavePrefix, ok := os.LookupEnv("workspaceFolder")
	if !ok {
		b.Fatalf("Please set the $workspaceFolder environment variable to point to the project root")
	}
	enclavePath := fmt.Sprintf("%v/enclaves/threshsign/enclave_threshsign/", enclavePrefix)

	var enclaves []*ThreshsignEnclave
	for index := 0; index < int(total); index++ {
		s := NewThreshsignEnclave(enclavePath, threshold, total)
		s.Init(index+1, skeys[index], vkeys, total)
		enclaves = append(enclaves, s)
	}

	sigsMap := make(map[peerpb.PeerID][]byte)
	msg := []byte(fmt.Sprintf("hello"))
	ctr := uint64(100)

	c := uint32(0)
	for i, e := range enclaves {
		sig := e.SignUsingEnclave(msg, 0, ctr)
		sigsMap[peerpb.PeerID(i)] = sig
		c++
		if c >= threshold {
			break
		}
	}

	e := enclaves[0]

	b.ResetTimer()
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			_ = e.SignUsingEnclave(msg, 0, ctr)
		}
	})
}

func BenchmarkEnclaveThreshsignAggregate(b *testing.B) {
	threshold := uint32(13)
	total := uint32(13)

	skeys, vkeys := readKeys(fmt.Sprintf("%d_%d", threshold, total))

	enclavePrefix, ok := os.LookupEnv("workspaceFolder")
	if !ok {
		b.Fatalf("Please set the $workspaceFolder environment variable to point to the project root")
	}
	enclavePath := fmt.Sprintf("%v/enclaves/threshsign/enclave_threshsign/", enclavePrefix)

	var enclaves []*ThreshsignEnclave
	for index := 0; index < int(total); index++ {
		s := NewThreshsignEnclave(enclavePath, threshold, total)
		s.Init(index+1, skeys[index], vkeys, total)
		enclaves = append(enclaves, s)
	}

	sigsMap := make(map[peerpb.PeerID][]byte)
	msg := []byte(fmt.Sprintf("hello"))
	ctr := uint64(100)

	c := uint32(0)
	for i, e := range enclaves {
		sig := e.SignUsingEnclave(msg, 0, ctr)
		sigsMap[peerpb.PeerID(i)] = sig
		c++
		if c >= threshold {
			break
		}
	}

	e := enclaves[0]

	b.ResetTimer()
	b.SetParallelism(2)
	b.RunParallel(func(pb *testing.PB) {
		runtime.LockOSThread()
		for pb.Next() {
			_ = e.AggregateSigAndVerify(msg, uint32(0), ctr, sigsMap)
		}
	})
}

var (
	keysMap = map[string]string{
		"2_3": `3872398145671381750051310361161029866141599796961754550720954525373154029641
18913992266273626846214164704318441079079824927432633934738241159011855215319
7545865829532108925029707269152845926323190473050391644910514830901650171418
6044262478369222839265815623050805443715326867730809093545852876997568163314
13495860062249993865734902048793710375616417009831840885382880613253415974387
14432995725644194091092767544667816115262418605728523769974352756346168301805
15370131389038394316450633040541921854908420201625206654565824899438920629223`,
		"4_4": `10036052446616306226114094596945404101960435492575977716301194857204775076145
5518289815549875603598616958501098868810458719113235757804645761415932327121
12681278488763693231869849159509035064235382153197383251937034672238371437128
18557060260487301208324222725310509112715252975345611136986407692064969687024
14756620501597198494796990608793525338359814346116041458225065097271804861754
2569551292016190362508315314549980432571200999335596080692964548779431993676
12826866644963640281859987701291748015511451908792963750192053677326918084007
5904614305218804751007051663196764902306678861394133863403025344969074705247`,
		"5_6": `18480008935796592298615540406934461065248989045656446439663476714643172014464
13191385750097814186314680587825126578066562471652009156869590892619488916338
44859618481580811774415207139224813045432173289471462602500158422062066332
15476105971780499066894024748836305437917931575712428374802296901465521978978
11834380792246539710165111861211499013416268053159389379810073008399537452057
960633691752025037230990677911601964367071571279370830568448169229950209414
18342073071868192741504461454159076431448838335728503206092414548092171577440
4895585319214182255137110430997417499975244468818699673297271760469391602683
19252790119873137616320670393185566158792999475756934754677659858514148241146
9867498233697589881789104052390697495134753292025057823248400552428109223693`,
		"13_13": `6355893937383476120080232522015780725139934004882492468393840026656421410348
8915690552332061665734015322635268758117979077396797973701111697829907896349
12908539370426941816533000213632891230843698438308514470657774613667429089634
11650879960976779263395620377313334737672272564821063684221012611151189272547
170335925379052947594372294131636281240559193920635104510293906673869785586
1787634686222425090876727859487802179590167450356467264640792971924903130699
1753930592776127070213114944659026631761634762285812642644875772379881279451
474195141927841556559156724680404246794384596538951472584967123525276535599
2022685300720746418839750239542270977849923934745881240085877633072824605487
20456277352091905450193217873980186700502119974074180343766049063077784073787
13884665666906373387402920875231549835041466222825853246320715885265073516005
6997107106510846216471080134389467153129312179486506292773256390117361268182
16650617699065413956892330721693311596723590967728167970254018310919965200769
14781496937901126479421539326538281821845019824181961103117044505807000903552
4846726738880600721635973147268373493351598962798745655718308399103454794581
1407261136414264038930713585502031369511816636639158776592549494703334177529
17803534452831361751661339245629224214729546267888754176977905997397634684771`,
		"97_97": `2137745591226779774290694010745744414401355772149016463274431226935375572494
14110801790313935202945509313342927426725706274801675072700990614094165203650
10598907041220450437892023268107002995026361494977929733989821256203193750021
17613427086537024828877993215701780295384160185763173147739793509626387531475
8543398234775761504161186868959005915259523680189194735282359391942950972647
8272420637879480222880859825980257775013984131822838183018097052191819708935
4988427888608191674866819850172120124462186564499755436574974338836789360282
5090853261995643816777154108065076292655514191853485783481610790041492704978
2132190795827377350413923743761780361507226576004405264331049709496953350893
19519364675801605495831191871188820232910530871145143023702313502200955062078
1762146627534610232900901341322786562080996301985279347268065972430910045274
17398319800187482161935178586032874621811559351582789442487793194797099585934
3915127134191059175482337033688005232096807006309000610762128587316742239340
7580220084089339142068486020746475405270391378946526589378808500013773540530
7713005734185514407990908491805596109052677654154959218924211199466130491506
17741488828030322296954288562244919499604875198695725010236082740200736563340
21635643281301862179202595161616126634234300860723240253208981322854686417926
14381090313266585290289273767199137159891155802535711396087620101073045203693
18511707328091349398372244088847664338691356611888324938575021014138300259847
9661107847186049923143949711824836233780356590239999120065032319488869468076
3298656534554435860482425612725458287689033119990923242531317470875290889535
6288978009164247145183871256349126638167802010463608635954739550722618996919
6554555673658024197493609639214573488662149366692164815985532113048282403009
9624295342646579724308924867793301886157579709765596761638924483858345802671
21587853656589672246101883425367946358860942917434540075576327044344445059671
20034664436917744886734449695530015732681036248407660355946038143480900422387
15741154672516334938528495529454383583059352884939772405521948350503526780944
15601566637126476630098247286549783051128500296738136870296878791303319652834
8831272791708916829716744806743139482884564578254215786688579252326985602380
8104391484693813261812308969599611645750400516116123123791457284040503943416
14399245779675484644885554696365030432257714561487041458515198967477502487450
15325108005196117209542931618008670337870596849236587468765444367906765214276
10781846919099387652206854040030009402327390319503581907803607070157563483178
16126249744323498398271336354512389229836293055629241820750301286574117455143
2345551198834716583710535756378413461295767812568080404063357306771117504003
15071006823658889205297676901824225809933791730310804491841619355115413836571
10283252177566952465457177456006386399248819944712784483728668903017138183712
20779580039872965979248256467611072830247186701600903806621288616487446082072
9617006905197988531535466305932536003444431531176207693024936613882930621274
14269392250997822567173574649936704037293938925741393751633493579215270467613
17667233191186888430427565177457658876072333356201620759447254340670901637212
6665823886560382627239852716624388166855444311017230173058106961259472690963
20533246407311342595131826599669258718920361699369484837685221225184768478973
16083090517660794546262714784292111930386754471795676395468387281505398817144
20279169872847360559138252103759744906182409089818145146889771053963770717061
11566845428869196532587657550874278544113261470949390799959686932756557734115
19457296632668432384017493364532966349527652578207917248660386934658980863622
9073321977356931116268523308161923402231582628257563455187799084483261734726
14813107398283760257386855100520369001784253002384869148133785103858471247001
10607848435612154818884835509600483704089023254909331904083716635283445842880
8761739408638932431604932295685031333688982362593895401749638074111381250248
4689339737496623907824216025585061402995287667032010528110734183685712313778
2545491897761829697318230399995030267652254829088195865907931132214988307264
10315479243444629987656022645609085988880139744221407335894355945802162598959
12908247210449001068281751747925642301876862919854138504982748199543477994745
18097297566397390436461655638079677762134151624745791030972892458532411482192
4806958671786249089672051812624619084848816588753699214232188487632293568816
6501417827194827989840400683857472197148036915206268944977001257972648931067
6202969805905239794124951684324079564960740139188606151362450637370668457118
9448584741913831067863852649564530743638401929434982518252013618182224679227
19619648885038120241106415084082581587854159936436243130681361193096578457565
13425512690196322153295849729054478077911003445426167859429590231596732758463
7491782351374219903025794702789838622771959919118849207788022454013881984378
4659635029782594646008115816737610978689066039417144278027775575894589597739
2362204866759753318303317529856425846506026885915264258868018718651621607276
4281798176776734640036608058092913153679655558668794642189589707417980187116
20098114166733718382897985858459473778221001307966107792003916973399983517073
16431845922430519192052689621679849297434541022637980476245451151817978601603
18101622130471177590570149663620417952947593611136294816895924906058509414899
272335358787428091444795601656114389648807893025252628645180823131153079383
6459721754896100316888623570657980932707782543064246168877872292926801458926
11983769957944036823041398308806157300225506255729702803698242998901932042669
5132924137685011395976555668926802298680957281132614743649492895086154230811
4305037295614573098472307907592630119855253452331336843160829057882632447914
15185446550876409589942457138914998242079709895278147701812845122068931527058
1821709460425135590684367215035542567815662056263038168729299382976216693180
3014498891536207589513046146686930192846837284049165917735206136092026558190
17491179176747082142388602352823972230962463622931209618850145946664104161352
11818293378962375865969320557185628238383289301371256156259224713273131997575
15428050272376346691613653839738020355618828988903983707859100091249108602422
1525469814360222168231266539235443976220938089583631991745052707136504461455
6490825146063679850930429802217280678189559214182134483793043359460531362426
4241913869172527568631975864292680304674586365470240982728721559330355757600
9954549913397789672689544948675835057223818215373709173475161193443721350222
20888447551101217424544170258126274301044248921744239645146159224694377779678
12793457724819658793782153822082894054193325928080853987372109099477016573946
11776946373109283658325192116598897931398687778139696400021328384404944455164
14302384497946656065281873275740796543453930460800107622107157878289786186841
9809709185580656589274260211961393844319452863814852298370796150753994690476
21744615020438312364026987212237886384620067224161911286029653431985374865553
8523676879842576422129441019515305849980270899270136316809795931444458511796
11527787171910698097886807649622592743752983795341666799771910622813096480737
17714533482728692097810812838069623769390115187182123867442647073942580892687
14724622313288527367682277831926090040166491736050984021654382927479009339469
8819338586327282461466811529764454240369955499372369438541131245794054221242
14116339853134658284819107728657836219974242020228405244886589571994112354313
1568721154677463560025444937367392450677714427876320319713604288557996983032
10540122474850401923654223938778079900339811836056732405803291352268964317565
5400656597121588629123358226058558031411291786874213049473851561142196343392
2782955853387811941729913127755010884053668033789688169677570400010352279043
11227955181046021739026374680669239356160666282370470156194319959940352965143`,
	}
)
