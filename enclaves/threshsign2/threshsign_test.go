package threshsign2

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"runtime"
	"strings"
	"sync"
	"testing"

	"github.com/ibalajiarun/go-consensus/peer/peerpb"
)

func readKeys(count string) ([]string, []string) {
	var skeys []string
	var vkeys []string

	keys, ok := keysMap[count]
	if !ok {
		log.Fatalf("key file not found: count=%s", count)
	}

	scanner := bufio.NewScanner(strings.NewReader(keys))
	idx := 0
	for idx < 4 && scanner.Scan() {
		vkey := scanner.Text()
		vkeys = append(vkeys, vkey)
		idx++
	}

	if idx < 4 {
		log.Fatal("too few lines in file")
	}

	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}

	for scanner.Scan() {
		skey := scanner.Text()
		skeys = append(skeys, skey)
	}

	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}

	return skeys, vkeys
}

func TestThreshsignAllSignatures(t *testing.T) {
	threshold := uint32(13)
	total := uint32(13)

	skeys, vkeys := readKeys(fmt.Sprintf("%d_%d", threshold, total))

	enclavePrefix, ok := os.LookupEnv("workspaceFolder")
	if !ok {
		t.Fatalf("Please set the $workspaceFolder environment variable to point to the project root")
	}
	enclavePath := fmt.Sprintf("%v/enclaves/threshsign2/enclave_threshsign/", enclavePrefix)

	var enclaves []*ThreshsignEnclave
	for index := 0; index < int(total); index++ {
		s := NewThreshsignEnclave(enclavePath, threshold, total)
		s.Init(index, skeys[index], strings.Join(vkeys, ":"), false)
		enclaves = append(enclaves, s)
	}

	sigs := make(map[peerpb.PeerID][]byte)
	for i, e := range enclaves {
		sig := e.SignUsingEnclave([]byte("hello"), uint64(100))
		sigs[peerpb.PeerID(i)] = sig
	}

	for _, e := range enclaves {
		aggSig := e.AggregateSigAndVerify([]byte("hello"), uint64(100), sigs)
		// fmt.Println(string(aggSig))
		e.Verify([]byte("hello"), uint64(100), aggSig)
	}
	// t.FailNow()
}

func TestThreshsignOnlyThreshold(t *testing.T) {
	threshold := uint32(13)
	total := uint32(13)

	skeys, vkeys := readKeys(fmt.Sprintf("%d_%d", threshold, total))

	enclavePrefix, ok := os.LookupEnv("workspaceFolder")
	if !ok {
		t.Fatalf("Please set the $workspaceFolder environment variable to point to the project root")
	}
	enclavePath := fmt.Sprintf("%v/enclaves/threshsign2/enclave_threshsign/", enclavePrefix)

	var enclaves []*ThreshsignEnclave
	for index := 0; index < int(total); index++ {
		s := NewThreshsignEnclave(enclavePath, threshold, total)
		s.Init(index+1, skeys[index], strings.Join(vkeys, ":"), false)
		enclaves = append(enclaves, s)
	}

	for i := 0; i < 5; i++ {
		msg := []byte(fmt.Sprintf("hello%d", i))
		sigs := make(map[peerpb.PeerID][]byte)
		c := uint32(0)
		for i, e := range enclaves {
			sig := e.SignUsingEnclave(msg, uint64(100))
			sigs[peerpb.PeerID(i)] = sig
			c++
			if c >= threshold {
				break
			}
		}

		var aggSigs [][]byte
		for _, e := range enclaves {
			aggSig := e.AggregateSigAndVerify(msg, uint64(100), sigs)
			aggSigs = append(aggSigs, aggSig)
		}
		for _, e := range enclaves {
			for _, aggSig := range aggSigs {
				e.Verify(msg, uint64(100), aggSig)
			}
		}
	}
}

func TestParallelThreshsignAllSignatures(t *testing.T) {
	pCount := 10
	var wg sync.WaitGroup
	for i := 0; i < pCount; i++ {
		wg.Add(1)
		go func() {
			defer wg.Done()
			threshold := uint32(13)
			total := uint32(13)

			skeys, vkeys := readKeys(fmt.Sprintf("%d_%d", threshold, total))

			enclavePrefix, ok := os.LookupEnv("workspaceFolder")
			if !ok {
				t.Fatalf("Please set the $workspaceFolder environment variable to point to the project root")
			}
			enclavePath := fmt.Sprintf("%v/enclaves/threshsign2/enclave_threshsign/", enclavePrefix)

			var enclaves []*ThreshsignEnclave
			for index := 0; index < int(total); index++ {
				s := NewThreshsignEnclave(enclavePath, threshold, total)
				s.Init(index+1, skeys[index], strings.Join(vkeys, ":"), false)
				enclaves = append(enclaves, s)
			}

			sigs := make(map[peerpb.PeerID][]byte)
			for i, e := range enclaves {
				sig := e.SignUsingEnclave([]byte("hello"), uint64(100))
				sigs[peerpb.PeerID(i)] = sig
			}

			aggSig := make([][]byte, len(enclaves))
			for i, e := range enclaves {
				aggSig[i] = e.AggregateSigAndVerify([]byte("hello"), uint64(100), sigs)
			}
			// for i, e := range enclaves {
			// 	e.Verify([]byte("hello"), uint64(100), aggSig[i])
			// }
		}()
	}
	wg.Wait()
}

func BenchmarkEnclaveThreshsignVerify(b *testing.B) {
	threshold := uint32(97)
	total := uint32(97)

	skeys, vkeys := readKeys(fmt.Sprintf("%d_%d", threshold, total))

	enclavePrefix, ok := os.LookupEnv("workspaceFolder")
	if !ok {
		b.Fatalf("Please set the $workspaceFolder environment variable to point to the project root")
	}
	enclavePath := fmt.Sprintf("%v/enclaves/threshsign2/enclave_threshsign/", enclavePrefix)

	var enclaves []*ThreshsignEnclave
	for index := 0; index < int(total); index++ {
		s := NewThreshsignEnclave(enclavePath, threshold, total)
		s.Init(index+1, skeys[index], strings.Join(vkeys, ":"), true)
		enclaves = append(enclaves, s)
	}

	sigsMap := make(map[peerpb.PeerID][]byte)
	msg := []byte(fmt.Sprintf("hello"))
	ctr := 100

	c := uint32(0)
	for i, e := range enclaves {
		sig := e.SignUsingEnclave(msg, ctr)
		sigsMap[peerpb.PeerID(i)] = sig
		c++
		if c >= threshold {
			break
		}
	}

	e := enclaves[0]

	aggSig := e.AggregateSigAndVerify(msg, ctr, sigsMap)

	b.ResetTimer()
	// for n := 0; n < b.N; n++ {
	// 	e.Verify(req.Message, req.Counter, req.CombinedSig)
	// }
	// b.SetParallelism(30)
	// b.SetParallelism(2)
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			e.Verify(msg, ctr, aggSig)
		}
	})
}

func BenchmarkEnclaveThreshsignSign(b *testing.B) {
	threshold := uint32(13)
	total := uint32(13)

	skeys, vkeys := readKeys(fmt.Sprintf("%d_%d", threshold, total))

	enclavePrefix, ok := os.LookupEnv("workspaceFolder")
	if !ok {
		b.Fatalf("Please set the $workspaceFolder environment variable to point to the project root")
	}
	enclavePath := fmt.Sprintf("%v/enclaves/threshsign2/enclave_threshsign/", enclavePrefix)

	var enclaves []*ThreshsignEnclave
	for index := 0; index < int(total); index++ {
		s := NewThreshsignEnclave(enclavePath, threshold, total)
		s.Init(index+1, skeys[index], strings.Join(vkeys, ":"), false)
		enclaves = append(enclaves, s)
	}

	sigsMap := make(map[peerpb.PeerID][]byte)
	msg := []byte(fmt.Sprintf("hello"))
	ctr := 100

	c := uint32(0)
	for i, e := range enclaves {
		sig := e.SignUsingEnclave(msg, ctr)
		sigsMap[peerpb.PeerID(i)] = sig
		c++
		if c >= threshold {
			break
		}
	}

	e := enclaves[0]

	// aggSig := e.AggregateSigAndVerify(msg, ctr, sigsMap)

	b.ResetTimer()
	// for n := 0; n < b.N; n++ {
	// 	e.Verify(req.Message, req.Counter, req.CombinedSig)
	// }
	// b.SetParallelism(30)
	b.SetParallelism(4)
	b.RunParallel(func(pb *testing.PB) {
		runtime.LockOSThread()
		for pb.Next() {
			_ = e.SignUsingEnclave(msg, ctr)
		}
	})
}

func BenchmarkEnclaveThreshsignAggregate(b *testing.B) {
	threshold := uint32(13)
	total := uint32(13)

	skeys, vkeys := readKeys(fmt.Sprintf("%d_%d", threshold, total))

	enclavePrefix, ok := os.LookupEnv("workspaceFolder")
	if !ok {
		b.Fatalf("Please set the $workspaceFolder environment variable to point to the project root")
	}
	enclavePath := fmt.Sprintf("%v/enclaves/threshsign2/enclave_threshsign/", enclavePrefix)

	var enclaves []*ThreshsignEnclave
	for index := 0; index < int(total); index++ {
		s := NewThreshsignEnclave(enclavePath, threshold, total)
		s.Init(index+1, skeys[index], strings.Join(vkeys, ":"), false)
		enclaves = append(enclaves, s)
	}

	sigsMap := make(map[peerpb.PeerID][]byte)
	msg := []byte(fmt.Sprintf("hello"))
	ctr := 100

	c := uint32(0)
	for i, e := range enclaves {
		sig := e.SignUsingEnclave(msg, ctr)
		sigsMap[peerpb.PeerID(i)] = sig
		c++
		if c >= threshold {
			break
		}
	}

	e := enclaves[0]

	b.ResetTimer()
	b.SetParallelism(2)
	b.RunParallel(func(pb *testing.PB) {
		runtime.LockOSThread()
		for pb.Next() {
			_ = e.AggregateSigAndVerify(msg, ctr, sigsMap)
		}
	})
}

func TestThreshsignMemory(t *testing.T) {
	threshold := uint32(13)
	total := uint32(13)

	skeys, vkeys := readKeys(fmt.Sprintf("%d_%d", threshold, total))

	enclavePrefix, ok := os.LookupEnv("workspaceFolder")
	if !ok {
		t.Fatalf("Please set the $workspaceFolder environment variable to point to the project root")
	}
	enclavePath := fmt.Sprintf("%v/enclaves/threshsign2/enclave_threshsign/", enclavePrefix)

	var enclaves []*ThreshsignEnclave
	for index := 0; index < int(total); index++ {
		s := NewThreshsignEnclave(enclavePath, threshold, total)
		s.Init(index+1, skeys[index], strings.Join(vkeys, ":"), false)
		enclaves = append(enclaves, s)
	}

	for i := 0; i < 100; i++ {
		for idx, e := range enclaves[:1] {
			_ = e.SignUsingEnclave([]byte(fmt.Sprintf("hello")), idx*i)
		}
	}

	sigsMap := make(map[peerpb.PeerID][]byte)
	msg := []byte(fmt.Sprintf("hello"))
	ctr := 1024

	c := uint32(0)
	for i, e := range enclaves {
		sig := e.SignUsingEnclave(msg, ctr)
		sigsMap[peerpb.PeerID(i)] = sig
		c++
		if c >= threshold {
			break
		}
	}

	e := enclaves[0]

	for i := 0; i < 100; i++ {
		_ = e.AggregateSigAndVerify(msg, ctr, sigsMap)
	}
}

var (
	keysMap = map[string]string{
		"4_4": `10036052446616306226114094596945404101960435492575977716301194857204775076145
5518289815549875603598616958501098868810458719113235757804645761415932327121
12681278488763693231869849159509035064235382153197383251937034672238371437128
18557060260487301208324222725310509112715252975345611136986407692064969687024
14756620501597198494796990608793525338359814346116041458225065097271804861754
2569551292016190362508315314549980432571200999335596080692964548779431993676
12826866644963640281859987701291748015511451908792963750192053677326918084007
5904614305218804751007051663196764902306678861394133863403025344969074705247`,
		"5_6": `18480008935796592298615540406934461065248989045656446439663476714643172014464
13191385750097814186314680587825126578066562471652009156869590892619488916338
44859618481580811774415207139224813045432173289471462602500158422062066332
15476105971780499066894024748836305437917931575712428374802296901465521978978
11834380792246539710165111861211499013416268053159389379810073008399537452057
960633691752025037230990677911601964367071571279370830568448169229950209414
18342073071868192741504461454159076431448838335728503206092414548092171577440
4895585319214182255137110430997417499975244468818699673297271760469391602683
19252790119873137616320670393185566158792999475756934754677659858514148241146
9867498233697589881789104052390697495134753292025057823248400552428109223693`,
		"13_13": `20037943962760441401478019440824250045696493186208312621114541336441992159229
12017508488409304170589739863842407869679713832239793273360403535409077851038
4300003645864866090559097066614590676289853019894813307805950141892556608437
4931554312052468791415854460941491293631920319151428022179031555546003902930
12215138923291962595825225054188828311672286547516661745715131471178595114748
20981973552348555255941679243538459548697596337163686980529733019124583222955
7676497100603651627347381810489257951046780915336618783873213603578888426716
2734433731719849769725687560049412974767724621902303157387974777099006052538
9578128440266919025003007627990384307074082327891255937279910334581114321412
16807635276302576703591586923235282719386939402754300508876611504063824553646
8054944243054822163355468077427331671461999732144636910068787675856463145274
13109988213677378554397205830805184319984165886877956908767258030334269026745
6300465971691100020316274032131568721614037402857422512036658021163592187603
9298245404885592361052645519617356271770358341062554316994987408157066155628
10751706490030242830851874858526396826855511878827637333376596837682787242410
3262542288148279604472958080271052900851247594214188114359848930600016022704
10481719936901180747201111309824715868086578592016979895163385575009079894939`,
		"97_97": `465300641478028398612430137394666446845603196171909592638511644909530872681
10118398487580634662220451559232915896154795626162752476207267665850958296454
17287313899951523946501416061896410484523156503072160540029357801725303938813
4677843873154066614235483930200921870811084964451699333855289419402274358991
14590976171380188528757364880206724447231350041293575923381107508990618114560
8108389781320126833307419808423244735866905735468239769158571971192261451669
1220381626983456578622153229791482636247904833969099592095769821660954710193
1799119514113788630258815603342548147804408470016707705751079561035905300868
10859236998702231016934458180700081353808003384261089960635667078558472614421
16971236843857454044499932160868260940100664037684169726948366832189679849526
20430430901565563285724029132921256597592033808318068189676855208112530892545
13644953105211446566346694187951300654894815416017678922482793536192954418874
6948625777923701648416025506387757811866889974858639745491584271918339101943
20444718065589295417686999105765362088814924298165167539293062255164824932181
18457812354578359817145143896206743764275750314998636033653258176651082887557
7274968745365366786221387989165544830754215436388114193447397016491909308792
7181563677763970734236942809007017449801268173396946146208944951919395192112
6596401510272330552523502796627496792058035936158261036848399246140391929889
9108138714291405433914604064491013444149865870511728258760416591045228809003
6290961605157611628599265750793790279394341750676286981809300845098716591615
247473720896393174123154692541094356320922669910817281660222244269545157456
13211540762849445627138998489810700221606764796552573235668011965877028343018
1609409787466351559806136778294426519029641870346576421390088128515747862663
9672909956497943541343650758940776059195904860728428508933401278778398667821
6559853955473818345990535596041738445285370395228219480797532978319960073319
9293359215259247669741873434160806395845673277226705442134485321422630508039
21397621281057019543982589961452994578783766711761849900848884399591709471880
20923865635574581770278823465770560535353894839769105304720349902197898869799
1477647137866054223308453091257332728156025735699000149172684638008615494864
950443920370876104700406133737532437761279698569581784004326294757183992331
5559979314431199231515899192350132191782902684597270329719604275745941948734
10406016025304045682575062767040332020282410041749153038205905417972649908254
11602223280673217035837627859819882048108221043502640076123158584924387930663
20646913783859265513716446630091221633426664063050783664962556618234731644775
5533581545265915210242058167832592857588656929755942787272861020147900101994
13358063917166892879022919893852780799784258062837475910963322339650589229662
8538628575384803247371700038670730029256819145649804484068483669468438617483
4262110171198829339538193756618647050866618305900295523843925742216357185850
15942865441759021209332012019796455474488492453745130096556790019796971581240
10644038208392841257467227836347712739416224822032117235077011479782458587676
5322992549270899663989299985736330112023359080763030334788261387377145359841
18037014425500878367732175491052262365595200610374446639053095930222412670759
21174083701187966778272361634794958350324637784661838087584437024960258657191
6053171877403638926570919888170414481808378719711296247587644399031384526039
1111089369319773213084078539202665814454053354915514915760198125588517149216
7057013651055688132030984888957387872742062082619717972302810819444614421641
18022977792571104208428460780375533504955130687896565526522158942824200473671
15730209905779235225122270527163699514258133816600201649724448520974109697685
13370515212609693653975549279534218116281544364876505436699641798247293565976
16466279322724413839222248326034886255671748288589811852435988571254227822186
7643512367312920386798707502204171663920978572454026863415713275132649927686
11165521129473650194631428591467714207476634985352300214429480519928105859925
11588266696655067492833464291843075543693383976442857941798169291220689834754
17341292000451380306338634095675077192986541815620125273816361024139969416639
15019166299426688021615620879535794068127538856671731665330067227048361728728
12871660336492573523544260158906725782985346207509656799463614191402422828216
15246432602870660379615274425185890313757027384323593805882280132482775148313
12457070133777464906724300139444459489493193443029885677227875592865814387442
9482570144835184744101540432134021567624304236155336682159444447301581580233
3234804285169727049766355291591313070577135178301097429523994033588492945007
2944220235678494525296980407080980008553400581830412220135562611300232164213
15393920266616051140471216889733295413278840034407150603839257120652979690906
5233766795377206072559087162519717574250305389174472787773375700360523813235
18505445338904992076209398223217451481060767237129319473825571104991839925157
10113366563888432461302014705135750897785481637591106959427501081731807315568
18943251174090928899347869678954154440089013098142925714064016912237357209472
16490049408302309230785625561234056926873721873589962358304900927164314862358
3209613919299537543282611478372392313576449018274618179683474667604150475276
13291097899659769612368955010904552782120912718406796747295049628095861234481
21099778289669718084903029117228344880307889098515999783929632179275490140371
20114100176441711129101367408568115747767623433991203457658336983821423232229
7343586835761158158542658620237258482593870534004680289000718082739088765946
13316782222143004540275621885149966965363850954089185698592381672213210665068
1066638209089456248028767318815007284760896049409777083872143439995261350322
5849866008127159672539119509877653212921540947610668556047369212775514837186
16527722024063860656532914168836174675546556379203930694930059668898196119080
7979824816211934133227087789491777328292839702090435938570084768433728304242
5398723831209588727371814685186054083234798290145145856370350856446306841578
21537633547020153576782058137334608099064172758465833063722534416831157240747
13701044845923494417794724773383494636516395418897218200267489020267990796855
10727120047224882461977127022533318750776833254956690647601207100053525379405
5599933919835701169432375660712208300261289895871120352900203251430845642729
15826650774837769861275106801546199922298523633811771726144351145625570535439
13056212246272116163298594237426096143835957719637604036822188748782977816752
12093961900777220791413472616295774999905327712300777282879641623209013683660
19703891429992133929792175544369206710347179542157704462825458654854413121520
8157952487495165755038994766193940670472380105418390737141964689874886415453
7811972672970502995324356343495643578835146820024086948717714474440641100802
990447740139367646357468384829122173546046291151632700026545179028827812585
6151189906225075905992758532287525870608807941733068772994642972706103104180
14540993729442930797030735751129277511833128000735152345668728117879294476601
791995106699173798114995909863259898911372111115238232147280464745299568048
2790452971819599996175690894612063526781626405123149417238059292785692871370
15035207823273512076760648835169137930459511803347496288568045182683971963451
8900637923623185840797121503058812995192185217856947935107288622417580860360
21712137780933478351369012850272827036708534839351311276249818095011737681094
21383566335424318750704139042361500349259372529515579085371820564622208493288
14488086077306771098357730984017005109061397821393182838966652627660851479243
6688578825664031615304889602477482290293968940062740654987302757383421837656
17754199725178982555207786145016568478294117800708803248866890590399280159895
8888508536854544205589951051082625931811372606165732265687384257080049185109`,
	}
)
