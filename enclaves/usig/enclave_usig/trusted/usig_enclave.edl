/*
 * Copyright (C) 2011-2020 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/* Enclave.edl - Top EDL file. */

enclave {
    include "sgx_tcrypto.h"
    
    trusted {
        public sgx_status_t ecall_usig_init(
            [in, size=mackey_len] const char* mackey,
            uint32_t mackey_len,
            sgx_ec256_private_t _privkey,
            uint32_t num_counters,
            [in, size=_edd25519_sk_len] const char *_edd25519_sk, 
            uint32_t _edd25519_sk_len);
        
        public sgx_status_t ecall_usig_create_ui_sig_edd25519(
    			[in, isary] sgx_sha256_hash_t digest,
                uint32_t ctr_id,
                [out] uint64_t *counter,
    			[out, size=sig_size] uint8_t* sig, uint32_t sig_size);

        public sgx_status_t ecall_usig_create_ui_sig(
    			[in, isary] sgx_sha256_hash_t digest,
                [out] uint64_t *counter,
                [out] sgx_ec256_signature_t *signature);

        public sgx_status_t ecall_usig_create_ui_mac(
    			[in, isary] sgx_sha256_hash_t digest,
                [out] uint64_t *counter,
    			[out, size=cert_size] uint8_t* cert, uint32_t cert_size);

        public sgx_status_t ecall_usig_verify_ui_mac(
    			[in, isary] sgx_sha256_hash_t digest,
                uint64_t counter,
    			[in, size=cert_size] const uint8_t* cert, uint32_t cert_size, 
                [out, size=1] uint8_t* identical);
    			
    };

    /* 
     * ocall_print_string - invokes OCALL to display string buffer inside the enclave.
     *  [in]: copy the string buffer to App outside.
     *  [string]: specifies 'str' is a NULL terminated buffer.
     */
    untrusted {
        void ocall_print_string([in, string] const char *str);
    };

};
