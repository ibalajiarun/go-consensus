// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocols/chainhotstuff/chainhotstuffpb/chainhostuff.proto

package chainhotstuffpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_ibalajiarun_go_consensus_peer_peerpb "github.com/ibalajiarun/go-consensus/peer/peerpb"
	commandpb "github.com/ibalajiarun/go-consensus/pkg/command/commandpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Signature struct {
	Sig    []byte                                                 `protobuf:"bytes,1,opt,name=sig,proto3" json:"sig,omitempty"`
	Signer github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID `protobuf:"varint,2,opt,name=signer,proto3,casttype=github.com/ibalajiarun/go-consensus/peer/peerpb.PeerID" json:"signer,omitempty"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_9588aeefd2ae7aea, []int{0}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return m.Size()
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *Signature) GetSigner() github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID {
	if m != nil {
		return m.Signer
	}
	return 0
}

type QuorumCert struct {
	Sigs      map[github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID]*Signature `protobuf:"bytes,1,rep,name=sigs,proto3,castkey=github.com/ibalajiarun/go-consensus/peer/peerpb.PeerID" json:"sigs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BlockHash BlockHashSlice                                                        `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3,casttype=BlockHashSlice" json:"block_hash,omitempty"`
}

func (m *QuorumCert) Reset()         { *m = QuorumCert{} }
func (m *QuorumCert) String() string { return proto.CompactTextString(m) }
func (*QuorumCert) ProtoMessage()    {}
func (*QuorumCert) Descriptor() ([]byte, []int) {
	return fileDescriptor_9588aeefd2ae7aea, []int{1}
}
func (m *QuorumCert) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuorumCert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *QuorumCert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuorumCert.Merge(m, src)
}
func (m *QuorumCert) XXX_Size() int {
	return m.Size()
}
func (m *QuorumCert) XXX_DiscardUnknown() {
	xxx_messageInfo_QuorumCert.DiscardUnknown(m)
}

var xxx_messageInfo_QuorumCert proto.InternalMessageInfo

func (m *QuorumCert) GetSigs() map[github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID]*Signature {
	if m != nil {
		return m.Sigs
	}
	return nil
}

func (m *QuorumCert) GetBlockHash() BlockHashSlice {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type BlockState struct {
	Parent   BlockHashSlice                                         `protobuf:"bytes,1,opt,name=parent,proto3,casttype=BlockHashSlice" json:"parent,omitempty"`
	Command  *commandpb.Command                                     `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	Height   View                                                   `protobuf:"varint,3,opt,name=height,proto3,casttype=View" json:"height,omitempty"`
	QC       *QuorumCert                                            `protobuf:"bytes,4,opt,name=q_c,json=qC,proto3" json:"q_c,omitempty"`
	Proposer github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID `protobuf:"varint,5,opt,name=proposer,proto3,casttype=github.com/ibalajiarun/go-consensus/peer/peerpb.PeerID" json:"proposer,omitempty"`
}

func (m *BlockState) Reset()         { *m = BlockState{} }
func (m *BlockState) String() string { return proto.CompactTextString(m) }
func (*BlockState) ProtoMessage()    {}
func (*BlockState) Descriptor() ([]byte, []int) {
	return fileDescriptor_9588aeefd2ae7aea, []int{2}
}
func (m *BlockState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *BlockState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockState.Merge(m, src)
}
func (m *BlockState) XXX_Size() int {
	return m.Size()
}
func (m *BlockState) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockState.DiscardUnknown(m)
}

var xxx_messageInfo_BlockState proto.InternalMessageInfo

func (m *BlockState) GetParent() BlockHashSlice {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *BlockState) GetCommand() *commandpb.Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *BlockState) GetHeight() View {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockState) GetQC() *QuorumCert {
	if m != nil {
		return m.QC
	}
	return nil
}

func (m *BlockState) GetProposer() github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID {
	if m != nil {
		return m.Proposer
	}
	return 0
}

type ProposeMessage struct {
	BlockState `protobuf:"bytes,1,opt,name=block,proto3,embedded=block" json:"block"`
}

func (m *ProposeMessage) Reset()         { *m = ProposeMessage{} }
func (m *ProposeMessage) String() string { return proto.CompactTextString(m) }
func (*ProposeMessage) ProtoMessage()    {}
func (*ProposeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_9588aeefd2ae7aea, []int{3}
}
func (m *ProposeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposeMessage.Merge(m, src)
}
func (m *ProposeMessage) XXX_Size() int {
	return m.Size()
}
func (m *ProposeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ProposeMessage proto.InternalMessageInfo

type VoteMessage struct {
	BlockHash BlockHashSlice `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3,casttype=BlockHashSlice" json:"block_hash,omitempty"`
	Signature *Signature     `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *VoteMessage) Reset()         { *m = VoteMessage{} }
func (m *VoteMessage) String() string { return proto.CompactTextString(m) }
func (*VoteMessage) ProtoMessage()    {}
func (*VoteMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_9588aeefd2ae7aea, []int{4}
}
func (m *VoteMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteMessage.Merge(m, src)
}
func (m *VoteMessage) XXX_Size() int {
	return m.Size()
}
func (m *VoteMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteMessage.DiscardUnknown(m)
}

var xxx_messageInfo_VoteMessage proto.InternalMessageInfo

func (m *VoteMessage) GetBlockHash() BlockHashSlice {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *VoteMessage) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

type NewViewMessage struct {
	Height  View        `protobuf:"varint,1,opt,name=height,proto3,casttype=View" json:"height,omitempty"`
	QC      *QuorumCert `protobuf:"bytes,2,opt,name=q_c,json=qC,proto3" json:"q_c,omitempty"`
	Hash512 []byte      `protobuf:"bytes,3,opt,name=hash512,proto3" json:"hash512,omitempty"`
}

func (m *NewViewMessage) Reset()         { *m = NewViewMessage{} }
func (m *NewViewMessage) String() string { return proto.CompactTextString(m) }
func (*NewViewMessage) ProtoMessage()    {}
func (*NewViewMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_9588aeefd2ae7aea, []int{5}
}
func (m *NewViewMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewViewMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewViewMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewViewMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewViewMessage.Merge(m, src)
}
func (m *NewViewMessage) XXX_Size() int {
	return m.Size()
}
func (m *NewViewMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NewViewMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NewViewMessage proto.InternalMessageInfo

func (m *NewViewMessage) GetHeight() View {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *NewViewMessage) GetQC() *QuorumCert {
	if m != nil {
		return m.QC
	}
	return nil
}

func (m *NewViewMessage) GetHash512() []byte {
	if m != nil {
		return m.Hash512
	}
	return nil
}

type ChainHotstuffMessage struct {
	// Types that are valid to be assigned to Type:
	//	*ChainHotstuffMessage_Propose
	//	*ChainHotstuffMessage_Vote
	//	*ChainHotstuffMessage_NewView
	Type isChainHotstuffMessage_Type `protobuf_oneof:"type"`
}

func (m *ChainHotstuffMessage) Reset()         { *m = ChainHotstuffMessage{} }
func (m *ChainHotstuffMessage) String() string { return proto.CompactTextString(m) }
func (*ChainHotstuffMessage) ProtoMessage()    {}
func (*ChainHotstuffMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_9588aeefd2ae7aea, []int{6}
}
func (m *ChainHotstuffMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainHotstuffMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainHotstuffMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainHotstuffMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainHotstuffMessage.Merge(m, src)
}
func (m *ChainHotstuffMessage) XXX_Size() int {
	return m.Size()
}
func (m *ChainHotstuffMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainHotstuffMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChainHotstuffMessage proto.InternalMessageInfo

type isChainHotstuffMessage_Type interface {
	isChainHotstuffMessage_Type()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ChainHotstuffMessage_Propose struct {
	Propose *ProposeMessage `protobuf:"bytes,1,opt,name=propose,proto3,oneof" json:"propose,omitempty"`
}
type ChainHotstuffMessage_Vote struct {
	Vote *VoteMessage `protobuf:"bytes,2,opt,name=vote,proto3,oneof" json:"vote,omitempty"`
}
type ChainHotstuffMessage_NewView struct {
	NewView *NewViewMessage `protobuf:"bytes,3,opt,name=new_view,json=newView,proto3,oneof" json:"new_view,omitempty"`
}

func (*ChainHotstuffMessage_Propose) isChainHotstuffMessage_Type() {}
func (*ChainHotstuffMessage_Vote) isChainHotstuffMessage_Type()    {}
func (*ChainHotstuffMessage_NewView) isChainHotstuffMessage_Type() {}

func (m *ChainHotstuffMessage) GetType() isChainHotstuffMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ChainHotstuffMessage) GetPropose() *ProposeMessage {
	if x, ok := m.GetType().(*ChainHotstuffMessage_Propose); ok {
		return x.Propose
	}
	return nil
}

func (m *ChainHotstuffMessage) GetVote() *VoteMessage {
	if x, ok := m.GetType().(*ChainHotstuffMessage_Vote); ok {
		return x.Vote
	}
	return nil
}

func (m *ChainHotstuffMessage) GetNewView() *NewViewMessage {
	if x, ok := m.GetType().(*ChainHotstuffMessage_NewView); ok {
		return x.NewView
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ChainHotstuffMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ChainHotstuffMessage_Propose)(nil),
		(*ChainHotstuffMessage_Vote)(nil),
		(*ChainHotstuffMessage_NewView)(nil),
	}
}

func init() {
	proto.RegisterType((*Signature)(nil), "chainhotstuffpb.Signature")
	proto.RegisterType((*QuorumCert)(nil), "chainhotstuffpb.QuorumCert")
	proto.RegisterMapType((map[github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID]*Signature)(nil), "chainhotstuffpb.QuorumCert.SigsEntry")
	proto.RegisterType((*BlockState)(nil), "chainhotstuffpb.BlockState")
	proto.RegisterType((*ProposeMessage)(nil), "chainhotstuffpb.ProposeMessage")
	proto.RegisterType((*VoteMessage)(nil), "chainhotstuffpb.VoteMessage")
	proto.RegisterType((*NewViewMessage)(nil), "chainhotstuffpb.NewViewMessage")
	proto.RegisterType((*ChainHotstuffMessage)(nil), "chainhotstuffpb.ChainHotstuffMessage")
}

func init() {
	proto.RegisterFile("protocols/chainhotstuff/chainhotstuffpb/chainhostuff.proto", fileDescriptor_9588aeefd2ae7aea)
}

var fileDescriptor_9588aeefd2ae7aea = []byte{
	// 649 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xce, 0x26, 0x6e, 0x9a, 0x4e, 0xab, 0xfe, 0x7e, 0x5a, 0xf5, 0x60, 0x05, 0x14, 0x47, 0x41,
	0x48, 0x15, 0x2a, 0x36, 0x0d, 0x02, 0x55, 0x81, 0x93, 0x03, 0x52, 0x10, 0x2a, 0x2a, 0x1b, 0xa9,
	0x07, 0x2e, 0x95, 0x6d, 0xb6, 0xf6, 0xd2, 0xc4, 0xeb, 0x7a, 0xd7, 0x8d, 0xda, 0x23, 0x4f, 0x00,
	0x12, 0x07, 0xae, 0xbc, 0x4d, 0x2f, 0x48, 0x3d, 0x72, 0x0a, 0xa8, 0x7d, 0x8b, 0x9e, 0x90, 0xd7,
	0x76, 0x42, 0xda, 0xaa, 0x8a, 0xe0, 0x62, 0xcf, 0x8c, 0xbf, 0xf9, 0xf7, 0x7d, 0x23, 0x43, 0x27,
	0x8a, 0xb9, 0xe4, 0x1e, 0x1f, 0x08, 0xcb, 0x0b, 0x1c, 0x16, 0x06, 0x5c, 0x0a, 0x99, 0xec, 0xef,
	0xcf, 0x7a, 0x91, 0x5b, 0xf8, 0xca, 0x35, 0x55, 0x12, 0xfe, 0xef, 0x0a, 0xa6, 0xbe, 0xe6, 0x73,
	0x9f, 0xab, 0x6f, 0x56, 0x6a, 0x65, 0xb0, 0xfa, 0xbd, 0xe8, 0xc0, 0xb7, 0x3c, 0x3e, 0x1c, 0x3a,
	0xe1, 0xfb, 0xe2, 0x9d, 0x16, 0xcc, 0xac, 0x0c, 0xd4, 0x3a, 0x84, 0xa5, 0x3e, 0xf3, 0x43, 0x47,
	0x26, 0x31, 0xc5, 0xff, 0x43, 0x45, 0x30, 0x5f, 0x47, 0x4d, 0xb4, 0xbe, 0x42, 0x52, 0x13, 0x13,
	0xa8, 0x0a, 0xe6, 0x87, 0x34, 0xd6, 0xcb, 0x4d, 0xb4, 0xae, 0xd9, 0x9d, 0xcb, 0xb1, 0xf1, 0xd4,
	0x67, 0x32, 0x48, 0x5c, 0xd3, 0xe3, 0x43, 0x8b, 0xb9, 0xce, 0xc0, 0xf9, 0xc0, 0x9c, 0x38, 0x09,
	0x2d, 0x9f, 0x3f, 0xf4, 0x78, 0x28, 0x68, 0x28, 0x12, 0x61, 0x45, 0x94, 0xc6, 0xea, 0x11, 0xb9,
	0xe6, 0x0e, 0xa5, 0xf1, 0xab, 0x17, 0x24, 0xaf, 0xd4, 0xfa, 0x5c, 0x06, 0x78, 0x9b, 0xf0, 0x38,
	0x19, 0x76, 0x69, 0x2c, 0x71, 0x02, 0x9a, 0x60, 0xbe, 0xd0, 0x51, 0xb3, 0xb2, 0xbe, 0xdc, 0xbe,
	0x6f, 0x5e, 0x59, 0xce, 0x9c, 0x42, 0xcd, 0x3e, 0xf3, 0xc5, 0xcb, 0x50, 0xc6, 0xc7, 0x76, 0xe7,
	0xe3, 0xcf, 0xbf, 0x9e, 0x43, 0xb5, 0xc3, 0x9b, 0x00, 0xee, 0x80, 0x7b, 0x07, 0x7b, 0x81, 0x23,
	0x02, 0xb5, 0xdd, 0x8a, 0x8d, 0x2f, 0xc7, 0xc6, 0xaa, 0x9d, 0x46, 0x7b, 0x8e, 0x08, 0xfa, 0x03,
	0xe6, 0x51, 0xb2, 0xe4, 0x16, 0x7e, 0xbd, 0xaf, 0xb8, 0xca, 0x26, 0x48, 0xb9, 0x3a, 0xa0, 0xc7,
	0x8a, 0x2b, 0x8d, 0xa4, 0x26, 0x7e, 0x04, 0x0b, 0x47, 0xce, 0x20, 0xa1, 0xaa, 0xd8, 0x72, 0xbb,
	0x7e, 0x6d, 0x93, 0x09, 0xd1, 0x24, 0x03, 0x76, 0xca, 0x5b, 0xa8, 0xa3, 0x7d, 0xfd, 0x66, 0xa0,
	0xd6, 0x97, 0x32, 0x80, 0x6a, 0xdc, 0x97, 0x8e, 0xa4, 0xf8, 0x01, 0x54, 0x23, 0x27, 0xa6, 0xa1,
	0xcc, 0xb4, 0xb8, 0x71, 0xb0, 0x1c, 0x81, 0x37, 0x60, 0x31, 0x97, 0x34, 0x6f, 0x8c, 0xcd, 0x89,
	0xd8, 0x66, 0x37, 0xb3, 0x48, 0x01, 0xc1, 0x4d, 0xa8, 0x06, 0x94, 0xf9, 0x81, 0xd4, 0x2b, 0x4a,
	0xd0, 0xda, 0xe5, 0xd8, 0xd0, 0x76, 0x19, 0x1d, 0x91, 0x3c, 0x8e, 0x37, 0xa0, 0x72, 0xb8, 0xe7,
	0xe9, 0x9a, 0xaa, 0x75, 0xe7, 0x16, 0x39, 0x48, 0xf9, 0xb0, 0x8b, 0x77, 0xa1, 0x16, 0xc5, 0x3c,
	0xe2, 0x82, 0xc6, 0xfa, 0xc2, 0x3f, 0x9f, 0xc8, 0xa4, 0x56, 0x4e, 0xcb, 0x36, 0xac, 0xee, 0x64,
	0x91, 0x6d, 0x2a, 0x84, 0xe3, 0x53, 0xfc, 0x0c, 0x16, 0x94, 0x20, 0x8a, 0x98, 0x9b, 0xe6, 0x9b,
	0xb2, 0x68, 0xd7, 0x4e, 0xc7, 0x46, 0xe9, 0x6c, 0x6c, 0x20, 0x92, 0xe5, 0xb4, 0x4e, 0x60, 0x79,
	0x97, 0xcb, 0x49, 0xad, 0xd9, 0x13, 0x40, 0x73, 0x9c, 0x00, 0xde, 0x82, 0x25, 0x51, 0xa8, 0x38,
	0x87, 0xce, 0x53, 0x70, 0xeb, 0x04, 0x56, 0xdf, 0xd0, 0x51, 0xca, 0x74, 0xd1, 0x7e, 0x2a, 0x05,
	0xba, 0x5d, 0x8a, 0xf2, 0x7c, 0x52, 0xe8, 0xb0, 0x98, 0x2e, 0xf2, 0x64, 0xb3, 0xad, 0xb4, 0x5d,
	0x21, 0x85, 0xdb, 0xfa, 0x8e, 0x60, 0xad, 0x9b, 0x26, 0xf7, 0xf2, 0xe4, 0x29, 0x9b, 0x8b, 0x39,
	0xe3, 0x39, 0x9f, 0xc6, 0xb5, 0x26, 0xb3, 0xfc, 0xf7, 0x4a, 0xa4, 0xc8, 0xc0, 0x6d, 0xd0, 0x8e,
	0xb8, 0x2c, 0x68, 0xb8, 0x7b, 0x2d, 0xf3, 0x0f, 0xaa, 0x7b, 0x25, 0xa2, 0xb0, 0xf8, 0x39, 0xd4,
	0x42, 0x3a, 0xda, 0x3b, 0x62, 0x74, 0xa4, 0x86, 0xbc, 0xa9, 0xe3, 0x2c, 0x4d, 0x69, 0xc7, 0x30,
	0x8b, 0xd8, 0x55, 0xd0, 0xe4, 0x71, 0x44, 0x6d, 0x7a, 0x7a, 0xde, 0x40, 0x67, 0xe7, 0x0d, 0xf4,
	0xeb, 0xbc, 0x81, 0x3e, 0x5d, 0x34, 0x4a, 0x67, 0x17, 0x8d, 0xd2, 0x8f, 0x8b, 0x46, 0xe9, 0xdd,
	0xeb, 0xb9, 0x0e, 0x6f, 0xbe, 0x5f, 0xaf, 0x5b, 0x55, 0xc0, 0xc7, 0xbf, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x6e, 0xbc, 0x74, 0xa4, 0xac, 0x05, 0x00, 0x00,
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Signer != 0 {
		i = encodeVarintChainhostuff(dAtA, i, uint64(m.Signer))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintChainhostuff(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuorumCert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuorumCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuorumCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintChainhostuff(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sigs) > 0 {
		keysForSigs := make([]uint64, 0, len(m.Sigs))
		for k := range m.Sigs {
			keysForSigs = append(keysForSigs, uint64(k))
		}
		github_com_gogo_protobuf_sortkeys.Uint64s(keysForSigs)
		for iNdEx := len(keysForSigs) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Sigs[github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID(keysForSigs[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintChainhostuff(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintChainhostuff(dAtA, i, uint64(keysForSigs[iNdEx]))
			i--
			dAtA[i] = 0x8
			i = encodeVarintChainhostuff(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlockState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proposer != 0 {
		i = encodeVarintChainhostuff(dAtA, i, uint64(m.Proposer))
		i--
		dAtA[i] = 0x28
	}
	if m.QC != nil {
		{
			size, err := m.QC.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainhostuff(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Height != 0 {
		i = encodeVarintChainhostuff(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainhostuff(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Parent) > 0 {
		i -= len(m.Parent)
		copy(dAtA[i:], m.Parent)
		i = encodeVarintChainhostuff(dAtA, i, uint64(len(m.Parent)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BlockState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintChainhostuff(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VoteMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainhostuff(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintChainhostuff(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewViewMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewViewMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewViewMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash512) > 0 {
		i -= len(m.Hash512)
		copy(dAtA[i:], m.Hash512)
		i = encodeVarintChainhostuff(dAtA, i, uint64(len(m.Hash512)))
		i--
		dAtA[i] = 0x1a
	}
	if m.QC != nil {
		{
			size, err := m.QC.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainhostuff(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Height != 0 {
		i = encodeVarintChainhostuff(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ChainHotstuffMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainHotstuffMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainHotstuffMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChainHotstuffMessage_Propose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainHotstuffMessage_Propose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Propose != nil {
		{
			size, err := m.Propose.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainhostuff(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ChainHotstuffMessage_Vote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainHotstuffMessage_Vote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainhostuff(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *ChainHotstuffMessage_NewView) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainHotstuffMessage_NewView) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NewView != nil {
		{
			size, err := m.NewView.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainhostuff(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func encodeVarintChainhostuff(dAtA []byte, offset int, v uint64) int {
	offset -= sovChainhostuff(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Signature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovChainhostuff(uint64(l))
	}
	if m.Signer != 0 {
		n += 1 + sovChainhostuff(uint64(m.Signer))
	}
	return n
}

func (m *QuorumCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sigs) > 0 {
		for k, v := range m.Sigs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovChainhostuff(uint64(l))
			}
			mapEntrySize := 1 + sovChainhostuff(uint64(k)) + l
			n += mapEntrySize + 1 + sovChainhostuff(uint64(mapEntrySize))
		}
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovChainhostuff(uint64(l))
	}
	return n
}

func (m *BlockState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovChainhostuff(uint64(l))
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovChainhostuff(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovChainhostuff(uint64(m.Height))
	}
	if m.QC != nil {
		l = m.QC.Size()
		n += 1 + l + sovChainhostuff(uint64(l))
	}
	if m.Proposer != 0 {
		n += 1 + sovChainhostuff(uint64(m.Proposer))
	}
	return n
}

func (m *ProposeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BlockState.Size()
	n += 1 + l + sovChainhostuff(uint64(l))
	return n
}

func (m *VoteMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovChainhostuff(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovChainhostuff(uint64(l))
	}
	return n
}

func (m *NewViewMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovChainhostuff(uint64(m.Height))
	}
	if m.QC != nil {
		l = m.QC.Size()
		n += 1 + l + sovChainhostuff(uint64(l))
	}
	l = len(m.Hash512)
	if l > 0 {
		n += 1 + l + sovChainhostuff(uint64(l))
	}
	return n
}

func (m *ChainHotstuffMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *ChainHotstuffMessage_Propose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Propose != nil {
		l = m.Propose.Size()
		n += 1 + l + sovChainhostuff(uint64(l))
	}
	return n
}
func (m *ChainHotstuffMessage_Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovChainhostuff(uint64(l))
	}
	return n
}
func (m *ChainHotstuffMessage_NewView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewView != nil {
		l = m.NewView.Size()
		n += 1 + l + sovChainhostuff(uint64(l))
	}
	return n
}

func sovChainhostuff(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChainhostuff(x uint64) (n int) {
	return sovChainhostuff(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainhostuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainhostuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainhostuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			m.Signer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainhostuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Signer |= github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChainhostuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuorumCert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainhostuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuorumCert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuorumCert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainhostuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainhostuff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sigs == nil {
				m.Sigs = make(map[github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID]*Signature)
			}
			var mapkey uint64
			var mapvalue *Signature
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChainhostuff
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChainhostuff
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChainhostuff
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthChainhostuff
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthChainhostuff
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Signature{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipChainhostuff(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthChainhostuff
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Sigs[github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID(mapkey)] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainhostuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainhostuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainhostuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainhostuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainhostuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainhostuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = append(m.Parent[:0], dAtA[iNdEx:postIndex]...)
			if m.Parent == nil {
				m.Parent = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainhostuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainhostuff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &commandpb.Command{}
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainhostuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainhostuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainhostuff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QC == nil {
				m.QC = &QuorumCert{}
			}
			if err := m.QC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			m.Proposer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainhostuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Proposer |= github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChainhostuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainhostuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainhostuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainhostuff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BlockState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainhostuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainhostuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainhostuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainhostuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainhostuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainhostuff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &Signature{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainhostuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewViewMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainhostuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewViewMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewViewMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainhostuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainhostuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainhostuff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QC == nil {
				m.QC = &QuorumCert{}
			}
			if err := m.QC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash512", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainhostuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainhostuff
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash512 = append(m.Hash512[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash512 == nil {
				m.Hash512 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainhostuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainHotstuffMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainhostuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainHotstuffMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainHotstuffMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Propose", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainhostuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainhostuff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProposeMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &ChainHotstuffMessage_Propose{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainhostuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainhostuff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VoteMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &ChainHotstuffMessage_Vote{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewView", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainhostuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainhostuff
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NewViewMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &ChainHotstuffMessage_NewView{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainhostuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainhostuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChainhostuff(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChainhostuff
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainhostuff
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainhostuff
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChainhostuff
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChainhostuff
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChainhostuff
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChainhostuff        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChainhostuff          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChainhostuff = fmt.Errorf("proto: unexpected end of group")
)
