// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocols/dqsbftslow/dqsbftslowpb/sbftx.proto

package dqsbftslowpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_ibalajiarun_go_consensus_peer_peerpb "github.com/ibalajiarun/go-consensus/peer/peerpb"
	commandpb "github.com/ibalajiarun/go-consensus/pkg/command/commandpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InstanceState_Status int32

const (
	InstanceState_None            InstanceState_Status = 0
	InstanceState_Preprepared     InstanceState_Status = 1
	InstanceState_SignShared      InstanceState_Status = 2
	InstanceState_Prepared        InstanceState_Status = 3
	InstanceState_CommitSigShared InstanceState_Status = 4
	InstanceState_Committed       InstanceState_Status = 5
	InstanceState_StateShared     InstanceState_Status = 6
	InstanceState_Executed        InstanceState_Status = 7
)

var InstanceState_Status_name = map[int32]string{
	0: "None",
	1: "Preprepared",
	2: "SignShared",
	3: "Prepared",
	4: "CommitSigShared",
	5: "Committed",
	6: "StateShared",
	7: "Executed",
}

var InstanceState_Status_value = map[string]int32{
	"None":            0,
	"Preprepared":     1,
	"SignShared":      2,
	"Prepared":        3,
	"CommitSigShared": 4,
	"Committed":       5,
	"StateShared":     6,
	"Executed":        7,
}

func (x InstanceState_Status) String() string {
	return proto.EnumName(InstanceState_Status_name, int32(x))
}

func (InstanceState_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_58c6d19954df1c8b, []int{2, 0}
}

type NormalMessage_Type int32

const (
	NormalMessage_None       NormalMessage_Type = 0
	NormalMessage_Preprepare NormalMessage_Type = 1
	NormalMessage_SignShare  NormalMessage_Type = 2
	NormalMessage_Prepare    NormalMessage_Type = 3
	NormalMessage_CommitSig  NormalMessage_Type = 4
	NormalMessage_CommitSlow NormalMessage_Type = 5
	NormalMessage_StateShare NormalMessage_Type = 6
	NormalMessage_ExecProof  NormalMessage_Type = 7
)

var NormalMessage_Type_name = map[int32]string{
	0: "None",
	1: "Preprepare",
	2: "SignShare",
	3: "Prepare",
	4: "CommitSig",
	5: "CommitSlow",
	6: "StateShare",
	7: "ExecProof",
}

var NormalMessage_Type_value = map[string]int32{
	"None":       0,
	"Preprepare": 1,
	"SignShare":  2,
	"Prepare":    3,
	"CommitSig":  4,
	"CommitSlow": 5,
	"StateShare": 6,
	"ExecProof":  7,
}

func (x NormalMessage_Type) String() string {
	return proto.EnumName(NormalMessage_Type_name, int32(x))
}

func (NormalMessage_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_58c6d19954df1c8b, []int{3, 0}
}

type OInstanceState_Status int32

const (
	OInstanceState_None            OInstanceState_Status = 0
	OInstanceState_Preprepared     OInstanceState_Status = 1
	OInstanceState_SignShared      OInstanceState_Status = 2
	OInstanceState_Prepared        OInstanceState_Status = 3
	OInstanceState_CommitSigShared OInstanceState_Status = 4
	OInstanceState_Committed       OInstanceState_Status = 5
	OInstanceState_StateShared     OInstanceState_Status = 6
	OInstanceState_Executed        OInstanceState_Status = 7
)

var OInstanceState_Status_name = map[int32]string{
	0: "None",
	1: "Preprepared",
	2: "SignShared",
	3: "Prepared",
	4: "CommitSigShared",
	5: "Committed",
	6: "StateShared",
	7: "Executed",
}

var OInstanceState_Status_value = map[string]int32{
	"None":            0,
	"Preprepared":     1,
	"SignShared":      2,
	"Prepared":        3,
	"CommitSigShared": 4,
	"Committed":       5,
	"StateShared":     6,
	"Executed":        7,
}

func (x OInstanceState_Status) String() string {
	return proto.EnumName(OInstanceState_Status_name, int32(x))
}

func (OInstanceState_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_58c6d19954df1c8b, []int{5, 0}
}

type ONormalMessage_Type int32

const (
	ONormalMessage_None       ONormalMessage_Type = 0
	ONormalMessage_Preprepare ONormalMessage_Type = 1
	ONormalMessage_SignShare  ONormalMessage_Type = 2
	ONormalMessage_Prepare    ONormalMessage_Type = 3
	ONormalMessage_CommitSig  ONormalMessage_Type = 4
	ONormalMessage_CommitSlow ONormalMessage_Type = 5
	ONormalMessage_StateShare ONormalMessage_Type = 6
	ONormalMessage_ExecProof  ONormalMessage_Type = 7
)

var ONormalMessage_Type_name = map[int32]string{
	0: "None",
	1: "Preprepare",
	2: "SignShare",
	3: "Prepare",
	4: "CommitSig",
	5: "CommitSlow",
	6: "StateShare",
	7: "ExecProof",
}

var ONormalMessage_Type_value = map[string]int32{
	"None":       0,
	"Preprepare": 1,
	"SignShare":  2,
	"Prepare":    3,
	"CommitSig":  4,
	"CommitSlow": 5,
	"StateShare": 6,
	"ExecProof":  7,
}

func (x ONormalMessage_Type) String() string {
	return proto.EnumName(ONormalMessage_Type_name, int32(x))
}

func (ONormalMessage_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_58c6d19954df1c8b, []int{6, 0}
}

type DQSBFTSlowMessage struct {
	// Types that are valid to be assigned to Type:
	//	*DQSBFTSlowMessage_Normal
	//	*DQSBFTSlowMessage_ONormal
	//	*DQSBFTSlowMessage_Result
	Type isDQSBFTSlowMessage_Type `protobuf_oneof:"type"`
}

func (m *DQSBFTSlowMessage) Reset()         { *m = DQSBFTSlowMessage{} }
func (m *DQSBFTSlowMessage) String() string { return proto.CompactTextString(m) }
func (*DQSBFTSlowMessage) ProtoMessage()    {}
func (*DQSBFTSlowMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c6d19954df1c8b, []int{0}
}
func (m *DQSBFTSlowMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DQSBFTSlowMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DQSBFTSlowMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DQSBFTSlowMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DQSBFTSlowMessage.Merge(m, src)
}
func (m *DQSBFTSlowMessage) XXX_Size() int {
	return m.Size()
}
func (m *DQSBFTSlowMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DQSBFTSlowMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DQSBFTSlowMessage proto.InternalMessageInfo

type isDQSBFTSlowMessage_Type interface {
	isDQSBFTSlowMessage_Type()
	MarshalTo([]byte) (int, error)
	Size() int
}

type DQSBFTSlowMessage_Normal struct {
	Normal *NormalMessage `protobuf:"bytes,1,opt,name=normal,proto3,oneof" json:"normal,omitempty"`
}
type DQSBFTSlowMessage_ONormal struct {
	ONormal *ONormalMessage `protobuf:"bytes,2,opt,name=oNormal,proto3,oneof" json:"oNormal,omitempty"`
}
type DQSBFTSlowMessage_Result struct {
	Result *ResultMessage `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (*DQSBFTSlowMessage_Normal) isDQSBFTSlowMessage_Type()  {}
func (*DQSBFTSlowMessage_ONormal) isDQSBFTSlowMessage_Type() {}
func (*DQSBFTSlowMessage_Result) isDQSBFTSlowMessage_Type()  {}

func (m *DQSBFTSlowMessage) GetType() isDQSBFTSlowMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *DQSBFTSlowMessage) GetNormal() *NormalMessage {
	if x, ok := m.GetType().(*DQSBFTSlowMessage_Normal); ok {
		return x.Normal
	}
	return nil
}

func (m *DQSBFTSlowMessage) GetONormal() *ONormalMessage {
	if x, ok := m.GetType().(*DQSBFTSlowMessage_ONormal); ok {
		return x.ONormal
	}
	return nil
}

func (m *DQSBFTSlowMessage) GetResult() *ResultMessage {
	if x, ok := m.GetType().(*DQSBFTSlowMessage_Result); ok {
		return x.Result
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DQSBFTSlowMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DQSBFTSlowMessage_Normal)(nil),
		(*DQSBFTSlowMessage_ONormal)(nil),
		(*DQSBFTSlowMessage_Result)(nil),
	}
}

type InstanceID struct {
	ReplicaID github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3,casttype=github.com/ibalajiarun/go-consensus/peer/peerpb.PeerID" json:"replica_id,omitempty"`
	Index     Index                                                  `protobuf:"varint,2,opt,name=index,proto3,casttype=Index" json:"index,omitempty"`
}

func (m *InstanceID) Reset()         { *m = InstanceID{} }
func (m *InstanceID) String() string { return proto.CompactTextString(m) }
func (*InstanceID) ProtoMessage()    {}
func (*InstanceID) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c6d19954df1c8b, []int{1}
}
func (m *InstanceID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstanceID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstanceID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceID.Merge(m, src)
}
func (m *InstanceID) XXX_Size() int {
	return m.Size()
}
func (m *InstanceID) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceID.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceID proto.InternalMessageInfo

func (m *InstanceID) GetReplicaID() github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID {
	if m != nil {
		return m.ReplicaID
	}
	return 0
}

func (m *InstanceID) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return 0
}

type InstanceState struct {
	View        View                 `protobuf:"varint,1,opt,name=view,proto3,casttype=View" json:"view,omitempty"`
	InstanceID  InstanceID           `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id"`
	Status      InstanceState_Status `protobuf:"varint,3,opt,name=status,proto3,enum=dqsbftslowpb.InstanceState_Status" json:"status,omitempty"`
	Command     *commandpb.Command   `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	CommandHash []byte               `protobuf:"bytes,5,opt,name=command_hash,json=commandHash,proto3" json:"command_hash,omitempty"`
}

func (m *InstanceState) Reset()         { *m = InstanceState{} }
func (m *InstanceState) String() string { return proto.CompactTextString(m) }
func (*InstanceState) ProtoMessage()    {}
func (*InstanceState) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c6d19954df1c8b, []int{2}
}
func (m *InstanceState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstanceState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstanceState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceState.Merge(m, src)
}
func (m *InstanceState) XXX_Size() int {
	return m.Size()
}
func (m *InstanceState) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceState.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceState proto.InternalMessageInfo

func (m *InstanceState) GetView() View {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *InstanceState) GetInstanceID() InstanceID {
	if m != nil {
		return m.InstanceID
	}
	return InstanceID{}
}

func (m *InstanceState) GetStatus() InstanceState_Status {
	if m != nil {
		return m.Status
	}
	return InstanceState_None
}

func (m *InstanceState) GetCommand() *commandpb.Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *InstanceState) GetCommandHash() []byte {
	if m != nil {
		return m.CommandHash
	}
	return nil
}

type NormalMessage struct {
	View        View               `protobuf:"varint,1,opt,name=view,proto3,casttype=View" json:"view,omitempty"`
	InstanceID  InstanceID         `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id"`
	Type        NormalMessage_Type `protobuf:"varint,3,opt,name=type,proto3,enum=dqsbftslowpb.NormalMessage_Type" json:"type,omitempty"`
	Command     *commandpb.Command `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	CommandHash []byte             `protobuf:"bytes,5,opt,name=command_hash,json=commandHash,proto3" json:"command_hash,omitempty"`
}

func (m *NormalMessage) Reset()         { *m = NormalMessage{} }
func (m *NormalMessage) String() string { return proto.CompactTextString(m) }
func (*NormalMessage) ProtoMessage()    {}
func (*NormalMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c6d19954df1c8b, []int{3}
}
func (m *NormalMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NormalMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NormalMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NormalMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NormalMessage.Merge(m, src)
}
func (m *NormalMessage) XXX_Size() int {
	return m.Size()
}
func (m *NormalMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NormalMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NormalMessage proto.InternalMessageInfo

func (m *NormalMessage) GetView() View {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *NormalMessage) GetInstanceID() InstanceID {
	if m != nil {
		return m.InstanceID
	}
	return InstanceID{}
}

func (m *NormalMessage) GetType() NormalMessage_Type {
	if m != nil {
		return m.Type
	}
	return NormalMessage_None
}

func (m *NormalMessage) GetCommand() *commandpb.Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *NormalMessage) GetCommandHash() []byte {
	if m != nil {
		return m.CommandHash
	}
	return nil
}

type ResultMessage struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Id     uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ResultMessage) Reset()         { *m = ResultMessage{} }
func (m *ResultMessage) String() string { return proto.CompactTextString(m) }
func (*ResultMessage) ProtoMessage()    {}
func (*ResultMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c6d19954df1c8b, []int{4}
}
func (m *ResultMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResultMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResultMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResultMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultMessage.Merge(m, src)
}
func (m *ResultMessage) XXX_Size() int {
	return m.Size()
}
func (m *ResultMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ResultMessage proto.InternalMessageInfo

func (m *ResultMessage) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ResultMessage) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type OInstanceState struct {
	View        View                  `protobuf:"varint,1,opt,name=view,proto3,casttype=View" json:"view,omitempty"`
	Index       Index                 `protobuf:"varint,2,opt,name=index,proto3,casttype=Index" json:"index,omitempty"`
	Status      OInstanceState_Status `protobuf:"varint,3,opt,name=status,proto3,enum=dqsbftslowpb.OInstanceState_Status" json:"status,omitempty"`
	Instances   []InstanceID          `protobuf:"bytes,4,rep,name=instances,proto3" json:"instances"`
	CommandHash []byte                `protobuf:"bytes,5,opt,name=command_hash,json=commandHash,proto3" json:"command_hash,omitempty"`
}

func (m *OInstanceState) Reset()         { *m = OInstanceState{} }
func (m *OInstanceState) String() string { return proto.CompactTextString(m) }
func (*OInstanceState) ProtoMessage()    {}
func (*OInstanceState) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c6d19954df1c8b, []int{5}
}
func (m *OInstanceState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OInstanceState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OInstanceState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OInstanceState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OInstanceState.Merge(m, src)
}
func (m *OInstanceState) XXX_Size() int {
	return m.Size()
}
func (m *OInstanceState) XXX_DiscardUnknown() {
	xxx_messageInfo_OInstanceState.DiscardUnknown(m)
}

var xxx_messageInfo_OInstanceState proto.InternalMessageInfo

func (m *OInstanceState) GetView() View {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *OInstanceState) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *OInstanceState) GetStatus() OInstanceState_Status {
	if m != nil {
		return m.Status
	}
	return OInstanceState_None
}

func (m *OInstanceState) GetInstances() []InstanceID {
	if m != nil {
		return m.Instances
	}
	return nil
}

func (m *OInstanceState) GetCommandHash() []byte {
	if m != nil {
		return m.CommandHash
	}
	return nil
}

type ONormalMessage struct {
	View        View                `protobuf:"varint,1,opt,name=view,proto3,casttype=View" json:"view,omitempty"`
	Index       Index               `protobuf:"varint,2,opt,name=index,proto3,casttype=Index" json:"index,omitempty"`
	Type        ONormalMessage_Type `protobuf:"varint,3,opt,name=type,proto3,enum=dqsbftslowpb.ONormalMessage_Type" json:"type,omitempty"`
	Instances   []InstanceID        `protobuf:"bytes,4,rep,name=instances,proto3" json:"instances"`
	CommandHash []byte              `protobuf:"bytes,5,opt,name=command_hash,json=commandHash,proto3" json:"command_hash,omitempty"`
}

func (m *ONormalMessage) Reset()         { *m = ONormalMessage{} }
func (m *ONormalMessage) String() string { return proto.CompactTextString(m) }
func (*ONormalMessage) ProtoMessage()    {}
func (*ONormalMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_58c6d19954df1c8b, []int{6}
}
func (m *ONormalMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ONormalMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ONormalMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ONormalMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ONormalMessage.Merge(m, src)
}
func (m *ONormalMessage) XXX_Size() int {
	return m.Size()
}
func (m *ONormalMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ONormalMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ONormalMessage proto.InternalMessageInfo

func (m *ONormalMessage) GetView() View {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *ONormalMessage) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ONormalMessage) GetType() ONormalMessage_Type {
	if m != nil {
		return m.Type
	}
	return ONormalMessage_None
}

func (m *ONormalMessage) GetInstances() []InstanceID {
	if m != nil {
		return m.Instances
	}
	return nil
}

func (m *ONormalMessage) GetCommandHash() []byte {
	if m != nil {
		return m.CommandHash
	}
	return nil
}

func init() {
	proto.RegisterEnum("dqsbftslowpb.InstanceState_Status", InstanceState_Status_name, InstanceState_Status_value)
	proto.RegisterEnum("dqsbftslowpb.NormalMessage_Type", NormalMessage_Type_name, NormalMessage_Type_value)
	proto.RegisterEnum("dqsbftslowpb.OInstanceState_Status", OInstanceState_Status_name, OInstanceState_Status_value)
	proto.RegisterEnum("dqsbftslowpb.ONormalMessage_Type", ONormalMessage_Type_name, ONormalMessage_Type_value)
	proto.RegisterType((*DQSBFTSlowMessage)(nil), "dqsbftslowpb.DQSBFTSlowMessage")
	proto.RegisterType((*InstanceID)(nil), "dqsbftslowpb.InstanceID")
	proto.RegisterType((*InstanceState)(nil), "dqsbftslowpb.InstanceState")
	proto.RegisterType((*NormalMessage)(nil), "dqsbftslowpb.NormalMessage")
	proto.RegisterType((*ResultMessage)(nil), "dqsbftslowpb.ResultMessage")
	proto.RegisterType((*OInstanceState)(nil), "dqsbftslowpb.OInstanceState")
	proto.RegisterType((*ONormalMessage)(nil), "dqsbftslowpb.ONormalMessage")
}

func init() {
	proto.RegisterFile("protocols/dqsbftslow/dqsbftslowpb/sbftx.proto", fileDescriptor_58c6d19954df1c8b)
}

var fileDescriptor_58c6d19954df1c8b = []byte{
	// 754 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x4b, 0x6f, 0xda, 0x58,
	0x14, 0xc6, 0x60, 0x20, 0x1c, 0x1e, 0xf1, 0xdc, 0x19, 0x8d, 0x50, 0x26, 0x02, 0xe2, 0x6c, 0xb2,
	0x98, 0x18, 0x29, 0x33, 0x99, 0x19, 0xcd, 0xcc, 0x8a, 0x92, 0x36, 0x2c, 0x92, 0x50, 0x3b, 0xea,
	0xa2, 0x9b, 0xc8, 0xe0, 0x1b, 0xe3, 0xd6, 0xf8, 0xba, 0xbe, 0xa6, 0x24, 0x5d, 0xf7, 0x07, 0x64,
	0xd3, 0x5f, 0xd4, 0x4d, 0x96, 0x59, 0x76, 0x85, 0x2a, 0xf8, 0x0b, 0x5d, 0x65, 0xd3, 0xea, 0x5e,
	0x5f, 0xf3, 0x88, 0x22, 0xd2, 0x48, 0x7d, 0xa8, 0x1b, 0xb8, 0x3e, 0xe7, 0x3b, 0x8f, 0x7b, 0xbe,
	0xf3, 0x61, 0x60, 0xdb, 0x0f, 0x48, 0x48, 0xba, 0xc4, 0xa5, 0x75, 0xeb, 0x05, 0xed, 0x9c, 0x86,
	0xd4, 0x25, 0xc3, 0xb9, 0xa3, 0xdf, 0xa9, 0xb3, 0xe3, 0x99, 0xc6, 0x71, 0xa8, 0x30, 0xef, 0x59,
	0xfb, 0xc5, 0x26, 0x36, 0xe1, 0x8e, 0x3a, 0x3b, 0x45, 0x98, 0xb5, 0x4d, 0xff, 0xb9, 0x5d, 0xef,
	0x92, 0x7e, 0xdf, 0xf4, 0xac, 0xf8, 0xdb, 0xef, 0xc4, 0xa7, 0x08, 0xa4, 0xbe, 0x95, 0xe0, 0xa7,
	0xe6, 0x63, 0xa3, 0xf1, 0xf0, 0xd8, 0x70, 0xc9, 0xf0, 0x00, 0x53, 0x6a, 0xda, 0x18, 0xed, 0x42,
	0xc6, 0x23, 0x41, 0xdf, 0x74, 0xcb, 0x52, 0x4d, 0xda, 0xca, 0xef, 0xfc, 0xa6, 0xcd, 0xd7, 0xd3,
	0x0e, 0xb9, 0x4f, 0x80, 0xf7, 0x13, 0xba, 0x00, 0xa3, 0x7f, 0x20, 0x4b, 0x22, 0x5f, 0x39, 0xc9,
	0xe3, 0xd6, 0x17, 0xe3, 0x8e, 0x6e, 0x06, 0xc6, 0x70, 0x56, 0x30, 0xc0, 0x74, 0xe0, 0x86, 0xe5,
	0xd4, 0x6d, 0x05, 0x75, 0xee, 0x9b, 0x2b, 0x18, 0x81, 0x1b, 0x19, 0x90, 0xc3, 0x73, 0x1f, 0xab,
	0x6f, 0x24, 0x80, 0x96, 0x47, 0x43, 0xd3, 0xeb, 0xe2, 0x56, 0x13, 0x9d, 0x02, 0x04, 0xd8, 0x77,
	0x9d, 0xae, 0x79, 0xe2, 0x58, 0xfc, 0x0a, 0x72, 0xe3, 0xd1, 0x78, 0x54, 0xcd, 0xe9, 0x91, 0xb5,
	0xd5, 0xbc, 0x1e, 0x55, 0xff, 0xb2, 0x9d, 0xb0, 0x37, 0xe8, 0x68, 0x5d, 0xd2, 0xaf, 0x3b, 0x1d,
	0xd3, 0x35, 0x9f, 0x39, 0x66, 0x30, 0xf0, 0xea, 0x36, 0xd9, 0xee, 0x12, 0x8f, 0x62, 0x8f, 0x0e,
	0x68, 0xdd, 0xc7, 0x38, 0xe0, 0x1f, 0x7e, 0x47, 0x6b, 0x63, 0x1c, 0xb4, 0x9a, 0x7a, 0x4e, 0xa4,
	0x6e, 0x59, 0xa8, 0x0a, 0x69, 0xc7, 0xb3, 0xf0, 0x19, 0xbf, 0xad, 0xdc, 0xc8, 0x5d, 0x8f, 0xaa,
	0xe9, 0x16, 0x33, 0xe8, 0x91, 0x5d, 0xbd, 0x48, 0x41, 0x31, 0xee, 0xcb, 0x08, 0xcd, 0x10, 0xa3,
	0x75, 0x90, 0x5f, 0x3a, 0x78, 0x28, 0x9a, 0x5a, 0xb9, 0x1e, 0x55, 0xe5, 0x27, 0x0e, 0x1e, 0xea,
	0xdc, 0x8a, 0x0e, 0x20, 0xef, 0x08, 0x38, 0xeb, 0x3c, 0x1a, 0x62, 0x79, 0x71, 0x16, 0xb3, 0x7b,
	0x36, 0xd0, 0xe5, 0xa8, 0x9a, 0x18, 0x8f, 0xaa, 0x73, 0x77, 0xd7, 0x21, 0x4e, 0xd0, 0xb2, 0xd0,
	0xbf, 0x90, 0xa1, 0xa1, 0x19, 0x0e, 0x28, 0x9f, 0x6a, 0x69, 0x47, 0xbd, 0x3d, 0x13, 0xef, 0x4c,
	0x33, 0x38, 0x52, 0x17, 0x11, 0xe8, 0x77, 0xc8, 0x8a, 0x4d, 0x29, 0xcb, 0xbc, 0x0d, 0xa4, 0x4d,
	0x77, 0x48, 0x7b, 0x10, 0x9d, 0xf4, 0x18, 0x82, 0x36, 0xa0, 0x20, 0x8e, 0x27, 0x3d, 0x93, 0xf6,
	0xca, 0xe9, 0x9a, 0xb4, 0x55, 0xd0, 0xf3, 0xc2, 0xb6, 0x6f, 0xd2, 0x9e, 0xfa, 0x5a, 0x82, 0x4c,
	0x54, 0x03, 0xad, 0x80, 0x7c, 0x48, 0x3c, 0xac, 0x24, 0xd0, 0x2a, 0xe4, 0xdb, 0x01, 0xf6, 0x03,
	0xec, 0x9b, 0x01, 0xb6, 0x14, 0x09, 0x95, 0x00, 0x0c, 0xc7, 0xf6, 0x8c, 0x1e, 0x7f, 0x4e, 0xa2,
	0x02, 0xac, 0xb4, 0x63, 0x6f, 0x0a, 0xfd, 0x0c, 0xab, 0xac, 0xb4, 0x13, 0x1a, 0x8e, 0x2d, 0x20,
	0x32, 0x2a, 0x42, 0x2e, 0x32, 0x86, 0xd8, 0x52, 0xd2, 0x2c, 0x25, 0xbf, 0x90, 0xf0, 0x67, 0x58,
	0x8a, 0xbd, 0x33, 0xdc, 0x1d, 0x30, 0x77, 0x56, 0xfd, 0x98, 0x84, 0xe2, 0xc2, 0x1a, 0x7e, 0x5b,
	0x4a, 0xfe, 0x8c, 0x36, 0x56, 0x10, 0x52, 0x5b, 0xa2, 0x2b, 0xed, 0xf8, 0xdc, 0xc7, 0x3a, 0x47,
	0x7f, 0x79, 0x32, 0x5e, 0x81, 0xcc, 0xd2, 0xcf, 0x31, 0x51, 0x02, 0x98, 0x31, 0xa1, 0x48, 0x6c,
	0xaa, 0x53, 0x22, 0x94, 0x24, 0xca, 0x43, 0x56, 0xf0, 0xa0, 0xa4, 0x66, 0x13, 0x37, 0x1c, 0x5b,
	0x91, 0x59, 0xa8, 0x78, 0x74, 0xc9, 0x50, 0x49, 0x73, 0x0e, 0xa7, 0x0c, 0x28, 0x19, 0x06, 0x67,
	0x04, 0xb4, 0x03, 0x42, 0x4e, 0x95, 0xac, 0xfa, 0x37, 0x14, 0x17, 0xf4, 0x8c, 0x7e, 0x9d, 0x8a,
	0x5f, 0xe2, 0x9d, 0x8a, 0x27, 0x54, 0x82, 0xa4, 0x98, 0xb8, 0xac, 0x27, 0x1d, 0x4b, 0xfd, 0x90,
	0x84, 0xd2, 0xd1, 0x7d, 0xe4, 0x74, 0x97, 0x3e, 0xd1, 0x7f, 0x37, 0x04, 0xb2, 0x79, 0xe3, 0xf7,
	0x6a, 0xa9, 0x42, 0xfe, 0x87, 0x5c, 0x4c, 0x2c, 0x2d, 0xcb, 0xb5, 0xd4, 0xd2, 0xbd, 0x90, 0xd9,
	0x5e, 0xe8, 0xb3, 0x80, 0x1f, 0x48, 0x31, 0x13, 0x36, 0xf6, 0xfb, 0x48, 0xe6, 0xce, 0xb1, 0xef,
	0x2e, 0x88, 0x60, 0x63, 0xd9, 0x4b, 0x62, 0x5e, 0x05, 0x5f, 0x7d, 0xe0, 0xdf, 0x51, 0x15, 0x8d,
	0x93, 0xcb, 0x71, 0x45, 0xba, 0x1a, 0x57, 0xa4, 0xf7, 0xe3, 0x8a, 0x74, 0x31, 0xa9, 0x24, 0xae,
	0x26, 0x95, 0xc4, 0xbb, 0x49, 0x25, 0xf1, 0x74, 0xef, 0xb3, 0x5e, 0x54, 0x77, 0xfd, 0x7d, 0xe8,
	0x64, 0x38, 0xe4, 0x8f, 0x4f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x81, 0x00, 0x67, 0x8c, 0x6a, 0x08,
	0x00, 0x00,
}

func (m *DQSBFTSlowMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DQSBFTSlowMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DQSBFTSlowMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DQSBFTSlowMessage_Normal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DQSBFTSlowMessage_Normal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Normal != nil {
		{
			size, err := m.Normal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSbftx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *DQSBFTSlowMessage_ONormal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DQSBFTSlowMessage_ONormal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ONormal != nil {
		{
			size, err := m.ONormal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSbftx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DQSBFTSlowMessage_Result) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DQSBFTSlowMessage_Result) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSbftx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *InstanceID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstanceID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintSbftx(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.ReplicaID != 0 {
		i = encodeVarintSbftx(dAtA, i, uint64(m.ReplicaID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InstanceState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstanceState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommandHash) > 0 {
		i -= len(m.CommandHash)
		copy(dAtA[i:], m.CommandHash)
		i = encodeVarintSbftx(dAtA, i, uint64(len(m.CommandHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSbftx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintSbftx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.InstanceID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSbftx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.View != 0 {
		i = encodeVarintSbftx(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NormalMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NormalMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NormalMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommandHash) > 0 {
		i -= len(m.CommandHash)
		copy(dAtA[i:], m.CommandHash)
		i = encodeVarintSbftx(dAtA, i, uint64(len(m.CommandHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSbftx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintSbftx(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.InstanceID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSbftx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.View != 0 {
		i = encodeVarintSbftx(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResultMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResultMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintSbftx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintSbftx(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OInstanceState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OInstanceState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OInstanceState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommandHash) > 0 {
		i -= len(m.CommandHash)
		copy(dAtA[i:], m.CommandHash)
		i = encodeVarintSbftx(dAtA, i, uint64(len(m.CommandHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Instances) > 0 {
		for iNdEx := len(m.Instances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Instances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSbftx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Status != 0 {
		i = encodeVarintSbftx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintSbftx(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.View != 0 {
		i = encodeVarintSbftx(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ONormalMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ONormalMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ONormalMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommandHash) > 0 {
		i -= len(m.CommandHash)
		copy(dAtA[i:], m.CommandHash)
		i = encodeVarintSbftx(dAtA, i, uint64(len(m.CommandHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Instances) > 0 {
		for iNdEx := len(m.Instances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Instances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSbftx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Type != 0 {
		i = encodeVarintSbftx(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintSbftx(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.View != 0 {
		i = encodeVarintSbftx(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSbftx(dAtA []byte, offset int, v uint64) int {
	offset -= sovSbftx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DQSBFTSlowMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *DQSBFTSlowMessage_Normal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Normal != nil {
		l = m.Normal.Size()
		n += 1 + l + sovSbftx(uint64(l))
	}
	return n
}
func (m *DQSBFTSlowMessage_ONormal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ONormal != nil {
		l = m.ONormal.Size()
		n += 1 + l + sovSbftx(uint64(l))
	}
	return n
}
func (m *DQSBFTSlowMessage_Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovSbftx(uint64(l))
	}
	return n
}
func (m *InstanceID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReplicaID != 0 {
		n += 1 + sovSbftx(uint64(m.ReplicaID))
	}
	if m.Index != 0 {
		n += 1 + sovSbftx(uint64(m.Index))
	}
	return n
}

func (m *InstanceState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovSbftx(uint64(m.View))
	}
	l = m.InstanceID.Size()
	n += 1 + l + sovSbftx(uint64(l))
	if m.Status != 0 {
		n += 1 + sovSbftx(uint64(m.Status))
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovSbftx(uint64(l))
	}
	l = len(m.CommandHash)
	if l > 0 {
		n += 1 + l + sovSbftx(uint64(l))
	}
	return n
}

func (m *NormalMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovSbftx(uint64(m.View))
	}
	l = m.InstanceID.Size()
	n += 1 + l + sovSbftx(uint64(l))
	if m.Type != 0 {
		n += 1 + sovSbftx(uint64(m.Type))
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovSbftx(uint64(l))
	}
	l = len(m.CommandHash)
	if l > 0 {
		n += 1 + l + sovSbftx(uint64(l))
	}
	return n
}

func (m *ResultMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovSbftx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSbftx(uint64(m.Id))
	}
	return n
}

func (m *OInstanceState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovSbftx(uint64(m.View))
	}
	if m.Index != 0 {
		n += 1 + sovSbftx(uint64(m.Index))
	}
	if m.Status != 0 {
		n += 1 + sovSbftx(uint64(m.Status))
	}
	if len(m.Instances) > 0 {
		for _, e := range m.Instances {
			l = e.Size()
			n += 1 + l + sovSbftx(uint64(l))
		}
	}
	l = len(m.CommandHash)
	if l > 0 {
		n += 1 + l + sovSbftx(uint64(l))
	}
	return n
}

func (m *ONormalMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovSbftx(uint64(m.View))
	}
	if m.Index != 0 {
		n += 1 + sovSbftx(uint64(m.Index))
	}
	if m.Type != 0 {
		n += 1 + sovSbftx(uint64(m.Type))
	}
	if len(m.Instances) > 0 {
		for _, e := range m.Instances {
			l = e.Size()
			n += 1 + l + sovSbftx(uint64(l))
		}
	}
	l = len(m.CommandHash)
	if l > 0 {
		n += 1 + l + sovSbftx(uint64(l))
	}
	return n
}

func sovSbftx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSbftx(x uint64) (n int) {
	return sovSbftx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DQSBFTSlowMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSbftx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DQSBFTSlowMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DQSBFTSlowMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Normal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSbftx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSbftx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NormalMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &DQSBFTSlowMessage_Normal{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ONormal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSbftx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSbftx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ONormalMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &DQSBFTSlowMessage_ONormal{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSbftx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSbftx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResultMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &DQSBFTSlowMessage_Result{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSbftx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSbftx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSbftx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSbftx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstanceID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstanceID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaID", wireType)
			}
			m.ReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaID |= github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSbftx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSbftx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSbftx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSbftx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstanceState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstanceState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSbftx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSbftx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InstanceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= InstanceState_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSbftx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSbftx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &commandpb.Command{}
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSbftx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSbftx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandHash = append(m.CommandHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CommandHash == nil {
				m.CommandHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSbftx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSbftx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSbftx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NormalMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSbftx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NormalMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NormalMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSbftx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSbftx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InstanceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= NormalMessage_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSbftx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSbftx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &commandpb.Command{}
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSbftx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSbftx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandHash = append(m.CommandHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CommandHash == nil {
				m.CommandHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSbftx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSbftx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSbftx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSbftx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSbftx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSbftx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSbftx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSbftx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSbftx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OInstanceState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSbftx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OInstanceState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OInstanceState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= OInstanceState_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSbftx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSbftx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instances = append(m.Instances, InstanceID{})
			if err := m.Instances[len(m.Instances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSbftx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSbftx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandHash = append(m.CommandHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CommandHash == nil {
				m.CommandHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSbftx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSbftx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSbftx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ONormalMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSbftx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ONormalMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ONormalMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ONormalMessage_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSbftx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSbftx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instances = append(m.Instances, InstanceID{})
			if err := m.Instances[len(m.Instances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSbftx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSbftx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandHash = append(m.CommandHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CommandHash == nil {
				m.CommandHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSbftx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSbftx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSbftx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSbftx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSbftx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSbftx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSbftx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSbftx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSbftx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSbftx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSbftx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSbftx = fmt.Errorf("proto: unexpected end of group")
)
