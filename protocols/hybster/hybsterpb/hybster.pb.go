// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocols/hybster/hybsterpb/hybster.proto

package hybsterpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_ibalajiarun_go_consensus_peer_peerpb "github.com/ibalajiarun/go-consensus/peer/peerpb"
	commandpb "github.com/ibalajiarun/go-consensus/pkg/command/commandpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NormalMessage_Type int32

const (
	NormalMessage_Prepare    NormalMessage_Type = 0
	NormalMessage_Commit     NormalMessage_Type = 1
	NormalMessage_ViewChange NormalMessage_Type = 3
	NormalMessage_NewView    NormalMessage_Type = 4
	NormalMessage_NewViewAck NormalMessage_Type = 5
)

var NormalMessage_Type_name = map[int32]string{
	0: "Prepare",
	1: "Commit",
	3: "ViewChange",
	4: "NewView",
	5: "NewViewAck",
}

var NormalMessage_Type_value = map[string]int32{
	"Prepare":    0,
	"Commit":     1,
	"ViewChange": 3,
	"NewView":    4,
	"NewViewAck": 5,
}

func (x NormalMessage_Type) String() string {
	return proto.EnumName(NormalMessage_Type_name, int32(x))
}

func (NormalMessage_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0ca0e2c64c316480, []int{1, 0}
}

type HybsterMessage struct {
	// Types that are valid to be assigned to Type:
	//	*HybsterMessage_Normal
	//	*HybsterMessage_ViewChange
	//	*HybsterMessage_NewView
	//	*HybsterMessage_NewViewAck
	Type isHybsterMessage_Type `protobuf_oneof:"type"`
}

func (m *HybsterMessage) Reset()         { *m = HybsterMessage{} }
func (m *HybsterMessage) String() string { return proto.CompactTextString(m) }
func (*HybsterMessage) ProtoMessage()    {}
func (*HybsterMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ca0e2c64c316480, []int{0}
}
func (m *HybsterMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HybsterMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HybsterMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HybsterMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HybsterMessage.Merge(m, src)
}
func (m *HybsterMessage) XXX_Size() int {
	return m.Size()
}
func (m *HybsterMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_HybsterMessage.DiscardUnknown(m)
}

var xxx_messageInfo_HybsterMessage proto.InternalMessageInfo

type isHybsterMessage_Type interface {
	isHybsterMessage_Type()
	MarshalTo([]byte) (int, error)
	Size() int
}

type HybsterMessage_Normal struct {
	Normal *NormalMessage `protobuf:"bytes,1,opt,name=normal,proto3,oneof" json:"normal,omitempty"`
}
type HybsterMessage_ViewChange struct {
	ViewChange *ViewChangeMessage `protobuf:"bytes,2,opt,name=view_change,json=viewChange,proto3,oneof" json:"view_change,omitempty"`
}
type HybsterMessage_NewView struct {
	NewView *NewViewMessage `protobuf:"bytes,3,opt,name=new_view,json=newView,proto3,oneof" json:"new_view,omitempty"`
}
type HybsterMessage_NewViewAck struct {
	NewViewAck *NewViewAckMessage `protobuf:"bytes,4,opt,name=new_view_ack,json=newViewAck,proto3,oneof" json:"new_view_ack,omitempty"`
}

func (*HybsterMessage_Normal) isHybsterMessage_Type()     {}
func (*HybsterMessage_ViewChange) isHybsterMessage_Type() {}
func (*HybsterMessage_NewView) isHybsterMessage_Type()    {}
func (*HybsterMessage_NewViewAck) isHybsterMessage_Type() {}

func (m *HybsterMessage) GetType() isHybsterMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *HybsterMessage) GetNormal() *NormalMessage {
	if x, ok := m.GetType().(*HybsterMessage_Normal); ok {
		return x.Normal
	}
	return nil
}

func (m *HybsterMessage) GetViewChange() *ViewChangeMessage {
	if x, ok := m.GetType().(*HybsterMessage_ViewChange); ok {
		return x.ViewChange
	}
	return nil
}

func (m *HybsterMessage) GetNewView() *NewViewMessage {
	if x, ok := m.GetType().(*HybsterMessage_NewView); ok {
		return x.NewView
	}
	return nil
}

func (m *HybsterMessage) GetNewViewAck() *NewViewAckMessage {
	if x, ok := m.GetType().(*HybsterMessage_NewViewAck); ok {
		return x.NewViewAck
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HybsterMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HybsterMessage_Normal)(nil),
		(*HybsterMessage_ViewChange)(nil),
		(*HybsterMessage_NewView)(nil),
		(*HybsterMessage_NewViewAck)(nil),
	}
}

type NormalMessage struct {
	Type        NormalMessage_Type `protobuf:"varint,1,opt,name=type,proto3,enum=hybsterpb.NormalMessage_Type" json:"type,omitempty"`
	View        View               `protobuf:"varint,2,opt,name=view,proto3,casttype=View" json:"view,omitempty"`
	Order       Order              `protobuf:"varint,3,opt,name=order,proto3,casttype=Order" json:"order,omitempty"`
	Command     *commandpb.Command `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	CommandHash []byte             `protobuf:"bytes,5,opt,name=command_hash,json=commandHash,proto3" json:"command_hash,omitempty"`
}

func (m *NormalMessage) Reset()         { *m = NormalMessage{} }
func (m *NormalMessage) String() string { return proto.CompactTextString(m) }
func (*NormalMessage) ProtoMessage()    {}
func (*NormalMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ca0e2c64c316480, []int{1}
}
func (m *NormalMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NormalMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NormalMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NormalMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NormalMessage.Merge(m, src)
}
func (m *NormalMessage) XXX_Size() int {
	return m.Size()
}
func (m *NormalMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NormalMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NormalMessage proto.InternalMessageInfo

func (m *NormalMessage) GetType() NormalMessage_Type {
	if m != nil {
		return m.Type
	}
	return NormalMessage_Prepare
}

func (m *NormalMessage) GetView() View {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *NormalMessage) GetOrder() Order {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *NormalMessage) GetCommand() *commandpb.Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *NormalMessage) GetCommandHash() []byte {
	if m != nil {
		return m.CommandHash
	}
	return nil
}

type Support struct {
	RawMsg []byte                                                 `protobuf:"bytes,1,opt,name=raw_msg,json=rawMsg,proto3" json:"raw_msg,omitempty"`
	Cert   []byte                                                 `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	From   github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID `protobuf:"varint,3,opt,name=from,proto3,casttype=github.com/ibalajiarun/go-consensus/peer/peerpb.PeerID" json:"from,omitempty"`
}

func (m *Support) Reset()         { *m = Support{} }
func (m *Support) String() string { return proto.CompactTextString(m) }
func (*Support) ProtoMessage()    {}
func (*Support) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ca0e2c64c316480, []int{2}
}
func (m *Support) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Support) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Support.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Support) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Support.Merge(m, src)
}
func (m *Support) XXX_Size() int {
	return m.Size()
}
func (m *Support) XXX_DiscardUnknown() {
	xxx_messageInfo_Support.DiscardUnknown(m)
}

var xxx_messageInfo_Support proto.InternalMessageInfo

func (m *Support) GetRawMsg() []byte {
	if m != nil {
		return m.RawMsg
	}
	return nil
}

func (m *Support) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *Support) GetFrom() github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID {
	if m != nil {
		return m.From
	}
	return 0
}

type ViewChangeMessage struct {
	FromView View      `protobuf:"varint,1,opt,name=from_view,json=fromView,proto3,casttype=View" json:"from_view,omitempty"`
	ToView   View      `protobuf:"varint,2,opt,name=to_view,json=toView,proto3,casttype=View" json:"to_view,omitempty"`
	Order    Order     `protobuf:"varint,3,opt,name=order,proto3,casttype=Order" json:"order,omitempty"`
	History  []Support `protobuf:"bytes,4,rep,name=history,proto3" json:"history"`
	LastCtr  uint64    `protobuf:"varint,5,opt,name=last_ctr,json=lastCtr,proto3" json:"last_ctr,omitempty"`
}

func (m *ViewChangeMessage) Reset()         { *m = ViewChangeMessage{} }
func (m *ViewChangeMessage) String() string { return proto.CompactTextString(m) }
func (*ViewChangeMessage) ProtoMessage()    {}
func (*ViewChangeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ca0e2c64c316480, []int{3}
}
func (m *ViewChangeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ViewChangeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ViewChangeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ViewChangeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ViewChangeMessage.Merge(m, src)
}
func (m *ViewChangeMessage) XXX_Size() int {
	return m.Size()
}
func (m *ViewChangeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ViewChangeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ViewChangeMessage proto.InternalMessageInfo

func (m *ViewChangeMessage) GetFromView() View {
	if m != nil {
		return m.FromView
	}
	return 0
}

func (m *ViewChangeMessage) GetToView() View {
	if m != nil {
		return m.ToView
	}
	return 0
}

func (m *ViewChangeMessage) GetOrder() Order {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *ViewChangeMessage) GetHistory() []Support {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *ViewChangeMessage) GetLastCtr() uint64 {
	if m != nil {
		return m.LastCtr
	}
	return 0
}

type NewViewMessage struct {
	FromView View      `protobuf:"varint,1,opt,name=from_view,json=fromView,proto3,casttype=View" json:"from_view,omitempty"`
	ToView   View      `protobuf:"varint,2,opt,name=to_view,json=toView,proto3,casttype=View" json:"to_view,omitempty"`
	Order    Order     `protobuf:"varint,3,opt,name=order,proto3,casttype=Order" json:"order,omitempty"`
	History  []Support `protobuf:"bytes,4,rep,name=history,proto3" json:"history"`
	Proof    []Support `protobuf:"bytes,5,rep,name=proof,proto3" json:"proof"`
}

func (m *NewViewMessage) Reset()         { *m = NewViewMessage{} }
func (m *NewViewMessage) String() string { return proto.CompactTextString(m) }
func (*NewViewMessage) ProtoMessage()    {}
func (*NewViewMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ca0e2c64c316480, []int{4}
}
func (m *NewViewMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewViewMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewViewMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewViewMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewViewMessage.Merge(m, src)
}
func (m *NewViewMessage) XXX_Size() int {
	return m.Size()
}
func (m *NewViewMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NewViewMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NewViewMessage proto.InternalMessageInfo

func (m *NewViewMessage) GetFromView() View {
	if m != nil {
		return m.FromView
	}
	return 0
}

func (m *NewViewMessage) GetToView() View {
	if m != nil {
		return m.ToView
	}
	return 0
}

func (m *NewViewMessage) GetOrder() Order {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *NewViewMessage) GetHistory() []Support {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *NewViewMessage) GetProof() []Support {
	if m != nil {
		return m.Proof
	}
	return nil
}

type NewViewAckMessage struct {
	View    View      `protobuf:"varint,1,opt,name=view,proto3,casttype=View" json:"view,omitempty"`
	Order   Order     `protobuf:"varint,2,opt,name=order,proto3,casttype=Order" json:"order,omitempty"`
	History []Support `protobuf:"bytes,3,rep,name=history,proto3" json:"history"`
}

func (m *NewViewAckMessage) Reset()         { *m = NewViewAckMessage{} }
func (m *NewViewAckMessage) String() string { return proto.CompactTextString(m) }
func (*NewViewAckMessage) ProtoMessage()    {}
func (*NewViewAckMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ca0e2c64c316480, []int{5}
}
func (m *NewViewAckMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewViewAckMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewViewAckMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewViewAckMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewViewAckMessage.Merge(m, src)
}
func (m *NewViewAckMessage) XXX_Size() int {
	return m.Size()
}
func (m *NewViewAckMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NewViewAckMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NewViewAckMessage proto.InternalMessageInfo

func (m *NewViewAckMessage) GetView() View {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *NewViewAckMessage) GetOrder() Order {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *NewViewAckMessage) GetHistory() []Support {
	if m != nil {
		return m.History
	}
	return nil
}

func init() {
	proto.RegisterEnum("hybsterpb.NormalMessage_Type", NormalMessage_Type_name, NormalMessage_Type_value)
	proto.RegisterType((*HybsterMessage)(nil), "hybsterpb.HybsterMessage")
	proto.RegisterType((*NormalMessage)(nil), "hybsterpb.NormalMessage")
	proto.RegisterType((*Support)(nil), "hybsterpb.Support")
	proto.RegisterType((*ViewChangeMessage)(nil), "hybsterpb.ViewChangeMessage")
	proto.RegisterType((*NewViewMessage)(nil), "hybsterpb.NewViewMessage")
	proto.RegisterType((*NewViewAckMessage)(nil), "hybsterpb.NewViewAckMessage")
}

func init() {
	proto.RegisterFile("protocols/hybster/hybsterpb/hybster.proto", fileDescriptor_0ca0e2c64c316480)
}

var fileDescriptor_0ca0e2c64c316480 = []byte{
	// 650 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0x8e, 0x93, 0x4d, 0x9c, 0x4e, 0xf2, 0x47, 0xe9, 0xea, 0x97, 0x7e, 0xb7, 0xea, 0x9f, 0xb4,
	0x41, 0x48, 0x45, 0x02, 0x47, 0x04, 0xa9, 0x07, 0x2e, 0x85, 0x94, 0x43, 0x91, 0x68, 0xa9, 0x0c,
	0xaa, 0x04, 0x17, 0x6b, 0xed, 0x6e, 0x6d, 0xd3, 0xc4, 0x6b, 0xed, 0x6e, 0x1a, 0xe5, 0x05, 0xe0,
	0xca, 0x23, 0xf0, 0x38, 0xbd, 0x20, 0xf5, 0xc8, 0x29, 0xa0, 0xf6, 0x2d, 0x7a, 0x42, 0xbb, 0xb6,
	0x93, 0x96, 0x52, 0xda, 0x23, 0x97, 0xec, 0xe4, 0x9b, 0x6f, 0x66, 0x76, 0xe6, 0x9b, 0x35, 0x3c,
	0x48, 0x38, 0x93, 0xcc, 0x67, 0x03, 0xd1, 0x0d, 0x27, 0x9e, 0x90, 0x94, 0xe7, 0x67, 0xe2, 0xe5,
	0x96, 0xad, 0x39, 0x78, 0x61, 0xe6, 0x58, 0xfe, 0x37, 0x60, 0x01, 0xd3, 0x68, 0x57, 0x59, 0x29,
	0x61, 0xf9, 0x5e, 0x72, 0x14, 0x74, 0x7d, 0x36, 0x1c, 0x92, 0xf8, 0x20, 0x3f, 0x13, 0x2f, 0xb7,
	0x52, 0x52, 0xe7, 0x53, 0x11, 0x1a, 0xdb, 0x69, 0xa2, 0x1d, 0x2a, 0x04, 0x09, 0x28, 0xee, 0x41,
	0x25, 0x66, 0x7c, 0x48, 0x06, 0x96, 0xb1, 0x6a, 0xac, 0xd7, 0x7a, 0x96, 0x3d, 0xab, 0x64, 0xef,
	0x6a, 0x47, 0xc6, 0xdc, 0x2e, 0x38, 0x19, 0x13, 0x6f, 0x42, 0xed, 0x38, 0xa2, 0x63, 0xd7, 0x0f,
	0x49, 0x1c, 0x50, 0xab, 0xa8, 0x03, 0x57, 0x2e, 0x05, 0xee, 0x47, 0x74, 0xbc, 0xa5, 0x9d, 0xf3,
	0x60, 0x38, 0x9e, 0x81, 0x78, 0x03, 0xaa, 0x31, 0x1d, 0xbb, 0x0a, 0xb1, 0x4a, 0x3a, 0x7a, 0xe9,
	0x72, 0x59, 0x3a, 0x56, 0x09, 0xe6, 0xa1, 0x66, 0x9c, 0x22, 0xf8, 0x19, 0xd4, 0xf3, 0x38, 0x97,
	0xf8, 0x47, 0x16, 0xba, 0x56, 0x39, 0x8b, 0x7d, 0xee, 0x1f, 0x5d, 0xaa, 0x1c, 0xcf, 0xc0, 0x7e,
	0x05, 0x90, 0x9c, 0x24, 0xb4, 0xf3, 0xa5, 0x08, 0xff, 0x5c, 0x69, 0x0f, 0x3f, 0x4e, 0x3d, 0x7a,
	0x0c, 0x8d, 0xde, 0xff, 0x37, 0x8d, 0xc1, 0x7e, 0x3b, 0x49, 0xa8, 0xa3, 0xa9, 0x78, 0x05, 0x90,
	0x6e, 0x41, 0x0d, 0x00, 0xf5, 0xab, 0x17, 0xd3, 0x36, 0x52, 0x75, 0x1c, 0x8d, 0xe2, 0x36, 0x94,
	0x19, 0x3f, 0xa0, 0x5c, 0x77, 0x88, 0xfa, 0x0b, 0x17, 0xd3, 0x76, 0xf9, 0xb5, 0x02, 0x9c, 0x14,
	0xc7, 0x0f, 0xc1, 0xcc, 0xe4, 0xc9, 0x1a, 0xc1, 0xf6, 0x4c, 0x38, 0x7b, 0x2b, 0xb5, 0x9c, 0x9c,
	0x82, 0xd7, 0xa0, 0x9e, 0x99, 0x6e, 0x48, 0x44, 0x68, 0x95, 0x57, 0x8d, 0xf5, 0xba, 0x53, 0xcb,
	0xb0, 0x6d, 0x22, 0xc2, 0xce, 0x2b, 0x40, 0xea, 0x76, 0xb8, 0x06, 0xe6, 0x1e, 0xa7, 0x09, 0xe1,
	0xb4, 0x59, 0xc0, 0x00, 0x15, 0x95, 0x2b, 0x92, 0x4d, 0x03, 0x37, 0x00, 0xe6, 0xd2, 0x34, 0x4b,
	0x8a, 0x98, 0x0d, 0xac, 0x89, 0x94, 0x73, 0x3e, 0xbd, 0x66, 0xb9, 0xf3, 0xd1, 0x00, 0xf3, 0xcd,
	0x28, 0x49, 0x18, 0x97, 0xf8, 0x3f, 0x30, 0x39, 0x19, 0xbb, 0x43, 0x11, 0xe8, 0xf9, 0xd4, 0x9d,
	0x0a, 0x27, 0xe3, 0x1d, 0x11, 0x60, 0x0c, 0xc8, 0xa7, 0x5c, 0xea, 0x11, 0xd4, 0x1d, 0x6d, 0xe3,
	0x5d, 0x40, 0x87, 0x9c, 0x0d, 0xb3, 0xbe, 0x9f, 0x5e, 0x4c, 0xdb, 0x1b, 0x41, 0x24, 0xc3, 0x91,
	0xa7, 0xda, 0xeb, 0x46, 0x1e, 0x19, 0x90, 0x0f, 0x11, 0xe1, 0xa3, 0xb8, 0x1b, 0xb0, 0x47, 0x3e,
	0x8b, 0x05, 0x8d, 0xc5, 0x48, 0x74, 0x13, 0x4a, 0xb9, 0xfe, 0x49, 0x3c, 0x7b, 0x8f, 0x52, 0xfe,
	0xf2, 0x85, 0xa3, 0xf3, 0x74, 0xbe, 0x1a, 0xb0, 0x78, 0x6d, 0xa3, 0xf0, 0x7d, 0x58, 0x50, 0xde,
	0x74, 0x89, 0x8c, 0x5f, 0x14, 0xa8, 0x2a, 0x97, 0x5e, 0x99, 0x35, 0x30, 0x25, 0x73, 0x7f, 0x2b,
	0x53, 0x45, 0xb2, 0xfd, 0x3b, 0x09, 0xd5, 0x03, 0x33, 0x8c, 0x84, 0x64, 0x7c, 0x62, 0xa1, 0xd5,
	0x92, 0x16, 0x6a, 0xbe, 0x1d, 0xd9, 0x88, 0xfa, 0xe8, 0x64, 0xda, 0x2e, 0x38, 0x39, 0x11, 0x2f,
	0x41, 0x75, 0x40, 0x84, 0x74, 0x7d, 0xc9, 0xb5, 0x54, 0xc8, 0x31, 0xd5, 0xff, 0x2d, 0xc9, 0x3b,
	0xdf, 0x0d, 0x68, 0x5c, 0xdd, 0xf1, 0xbf, 0xbd, 0x19, 0x1b, 0xca, 0x09, 0x67, 0xec, 0xd0, 0x2a,
	0xdf, 0x12, 0x91, 0xd2, 0xd4, 0xea, 0x2c, 0x5e, 0x7b, 0x89, 0xb3, 0xe7, 0x62, 0xfc, 0xf9, 0xb9,
	0x14, 0x6f, 0xbf, 0x78, 0xe9, 0x8e, 0x17, 0xef, 0xbf, 0x3b, 0x39, 0x6b, 0x19, 0xa7, 0x67, 0x2d,
	0xe3, 0xc7, 0x59, 0xcb, 0xf8, 0x7c, 0xde, 0x2a, 0x9c, 0x9e, 0xb7, 0x0a, 0xdf, 0xce, 0x5b, 0x85,
	0xf7, 0x9b, 0x77, 0x5a, 0xc9, 0x9b, 0xbf, 0xcf, 0x5e, 0x45, 0x3b, 0x9f, 0xfc, 0x0c, 0x00, 0x00,
	0xff, 0xff, 0x2e, 0xea, 0xb8, 0xa0, 0xc5, 0x05, 0x00, 0x00,
}

func (m *HybsterMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HybsterMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HybsterMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *HybsterMessage_Normal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HybsterMessage_Normal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Normal != nil {
		{
			size, err := m.Normal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHybster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *HybsterMessage_ViewChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HybsterMessage_ViewChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ViewChange != nil {
		{
			size, err := m.ViewChange.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHybster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *HybsterMessage_NewView) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HybsterMessage_NewView) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NewView != nil {
		{
			size, err := m.NewView.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHybster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *HybsterMessage_NewViewAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HybsterMessage_NewViewAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.NewViewAck != nil {
		{
			size, err := m.NewViewAck.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHybster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *NormalMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NormalMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NormalMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommandHash) > 0 {
		i -= len(m.CommandHash)
		copy(dAtA[i:], m.CommandHash)
		i = encodeVarintHybster(dAtA, i, uint64(len(m.CommandHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHybster(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Order != 0 {
		i = encodeVarintHybster(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x18
	}
	if m.View != 0 {
		i = encodeVarintHybster(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintHybster(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Support) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Support) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Support) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.From != 0 {
		i = encodeVarintHybster(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Cert) > 0 {
		i -= len(m.Cert)
		copy(dAtA[i:], m.Cert)
		i = encodeVarintHybster(dAtA, i, uint64(len(m.Cert)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RawMsg) > 0 {
		i -= len(m.RawMsg)
		copy(dAtA[i:], m.RawMsg)
		i = encodeVarintHybster(dAtA, i, uint64(len(m.RawMsg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ViewChangeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ViewChangeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ViewChangeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastCtr != 0 {
		i = encodeVarintHybster(dAtA, i, uint64(m.LastCtr))
		i--
		dAtA[i] = 0x28
	}
	if len(m.History) > 0 {
		for iNdEx := len(m.History) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.History[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHybster(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Order != 0 {
		i = encodeVarintHybster(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x18
	}
	if m.ToView != 0 {
		i = encodeVarintHybster(dAtA, i, uint64(m.ToView))
		i--
		dAtA[i] = 0x10
	}
	if m.FromView != 0 {
		i = encodeVarintHybster(dAtA, i, uint64(m.FromView))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewViewMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewViewMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewViewMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		for iNdEx := len(m.Proof) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Proof[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHybster(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.History) > 0 {
		for iNdEx := len(m.History) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.History[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHybster(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Order != 0 {
		i = encodeVarintHybster(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x18
	}
	if m.ToView != 0 {
		i = encodeVarintHybster(dAtA, i, uint64(m.ToView))
		i--
		dAtA[i] = 0x10
	}
	if m.FromView != 0 {
		i = encodeVarintHybster(dAtA, i, uint64(m.FromView))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewViewAckMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewViewAckMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewViewAckMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.History) > 0 {
		for iNdEx := len(m.History) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.History[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHybster(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Order != 0 {
		i = encodeVarintHybster(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x10
	}
	if m.View != 0 {
		i = encodeVarintHybster(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintHybster(dAtA []byte, offset int, v uint64) int {
	offset -= sovHybster(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HybsterMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *HybsterMessage_Normal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Normal != nil {
		l = m.Normal.Size()
		n += 1 + l + sovHybster(uint64(l))
	}
	return n
}
func (m *HybsterMessage_ViewChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ViewChange != nil {
		l = m.ViewChange.Size()
		n += 1 + l + sovHybster(uint64(l))
	}
	return n
}
func (m *HybsterMessage_NewView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewView != nil {
		l = m.NewView.Size()
		n += 1 + l + sovHybster(uint64(l))
	}
	return n
}
func (m *HybsterMessage_NewViewAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewViewAck != nil {
		l = m.NewViewAck.Size()
		n += 1 + l + sovHybster(uint64(l))
	}
	return n
}
func (m *NormalMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovHybster(uint64(m.Type))
	}
	if m.View != 0 {
		n += 1 + sovHybster(uint64(m.View))
	}
	if m.Order != 0 {
		n += 1 + sovHybster(uint64(m.Order))
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovHybster(uint64(l))
	}
	l = len(m.CommandHash)
	if l > 0 {
		n += 1 + l + sovHybster(uint64(l))
	}
	return n
}

func (m *Support) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RawMsg)
	if l > 0 {
		n += 1 + l + sovHybster(uint64(l))
	}
	l = len(m.Cert)
	if l > 0 {
		n += 1 + l + sovHybster(uint64(l))
	}
	if m.From != 0 {
		n += 1 + sovHybster(uint64(m.From))
	}
	return n
}

func (m *ViewChangeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromView != 0 {
		n += 1 + sovHybster(uint64(m.FromView))
	}
	if m.ToView != 0 {
		n += 1 + sovHybster(uint64(m.ToView))
	}
	if m.Order != 0 {
		n += 1 + sovHybster(uint64(m.Order))
	}
	if len(m.History) > 0 {
		for _, e := range m.History {
			l = e.Size()
			n += 1 + l + sovHybster(uint64(l))
		}
	}
	if m.LastCtr != 0 {
		n += 1 + sovHybster(uint64(m.LastCtr))
	}
	return n
}

func (m *NewViewMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromView != 0 {
		n += 1 + sovHybster(uint64(m.FromView))
	}
	if m.ToView != 0 {
		n += 1 + sovHybster(uint64(m.ToView))
	}
	if m.Order != 0 {
		n += 1 + sovHybster(uint64(m.Order))
	}
	if len(m.History) > 0 {
		for _, e := range m.History {
			l = e.Size()
			n += 1 + l + sovHybster(uint64(l))
		}
	}
	if len(m.Proof) > 0 {
		for _, e := range m.Proof {
			l = e.Size()
			n += 1 + l + sovHybster(uint64(l))
		}
	}
	return n
}

func (m *NewViewAckMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovHybster(uint64(m.View))
	}
	if m.Order != 0 {
		n += 1 + sovHybster(uint64(m.Order))
	}
	if len(m.History) > 0 {
		for _, e := range m.History {
			l = e.Size()
			n += 1 + l + sovHybster(uint64(l))
		}
	}
	return n
}

func sovHybster(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHybster(x uint64) (n int) {
	return sovHybster(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HybsterMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHybster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HybsterMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HybsterMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Normal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHybster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHybster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NormalMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &HybsterMessage_Normal{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewChange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHybster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHybster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ViewChangeMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &HybsterMessage_ViewChange{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewView", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHybster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHybster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NewViewMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &HybsterMessage_NewView{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewViewAck", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHybster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHybster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NewViewAckMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &HybsterMessage_NewViewAck{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHybster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHybster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHybster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NormalMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHybster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NormalMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NormalMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= NormalMessage_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= Order(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHybster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHybster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &commandpb.Command{}
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHybster
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHybster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandHash = append(m.CommandHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CommandHash == nil {
				m.CommandHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHybster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHybster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHybster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Support) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHybster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Support: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Support: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawMsg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHybster
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHybster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawMsg = append(m.RawMsg[:0], dAtA[iNdEx:postIndex]...)
			if m.RawMsg == nil {
				m.RawMsg = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthHybster
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthHybster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = append(m.Cert[:0], dAtA[iNdEx:postIndex]...)
			if m.Cert == nil {
				m.Cert = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHybster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHybster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHybster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ViewChangeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHybster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ViewChangeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ViewChangeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromView", wireType)
			}
			m.FromView = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromView |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToView", wireType)
			}
			m.ToView = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToView |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= Order(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHybster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHybster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.History = append(m.History, Support{})
			if err := m.History[len(m.History)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCtr", wireType)
			}
			m.LastCtr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCtr |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHybster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHybster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHybster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewViewMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHybster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewViewMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewViewMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromView", wireType)
			}
			m.FromView = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromView |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToView", wireType)
			}
			m.ToView = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToView |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= Order(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHybster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHybster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.History = append(m.History, Support{})
			if err := m.History[len(m.History)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHybster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHybster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof, Support{})
			if err := m.Proof[len(m.Proof)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHybster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHybster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHybster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewViewAckMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHybster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewViewAckMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewViewAckMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= Order(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHybster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHybster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.History = append(m.History, Support{})
			if err := m.History[len(m.History)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHybster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHybster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthHybster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHybster(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHybster
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHybster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHybster
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHybster
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHybster
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHybster        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHybster          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHybster = fmt.Errorf("proto: unexpected end of group")
)
