// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocols/minbft/minbftpb/minbft.proto

package minbftpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	commandpb "github.com/ibalajiarun/go-consensus/pkg/command/commandpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NormalMessage_Type int32

const (
	NormalMessage_Prepare    NormalMessage_Type = 0
	NormalMessage_Commit     NormalMessage_Type = 1
	NormalMessage_ViewChange NormalMessage_Type = 3
	NormalMessage_NewView    NormalMessage_Type = 4
	NormalMessage_NewViewAck NormalMessage_Type = 5
)

var NormalMessage_Type_name = map[int32]string{
	0: "Prepare",
	1: "Commit",
	3: "ViewChange",
	4: "NewView",
	5: "NewViewAck",
}

var NormalMessage_Type_value = map[string]int32{
	"Prepare":    0,
	"Commit":     1,
	"ViewChange": 3,
	"NewView":    4,
	"NewViewAck": 5,
}

func (x NormalMessage_Type) String() string {
	return proto.EnumName(NormalMessage_Type_name, int32(x))
}

func (NormalMessage_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fdba5fa6cdff9afe, []int{1, 0}
}

type MinBFTMessage struct {
	// Types that are valid to be assigned to Type:
	//	*MinBFTMessage_Normal
	Type isMinBFTMessage_Type `protobuf_oneof:"type"`
}

func (m *MinBFTMessage) Reset()         { *m = MinBFTMessage{} }
func (m *MinBFTMessage) String() string { return proto.CompactTextString(m) }
func (*MinBFTMessage) ProtoMessage()    {}
func (*MinBFTMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdba5fa6cdff9afe, []int{0}
}
func (m *MinBFTMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MinBFTMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MinBFTMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MinBFTMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MinBFTMessage.Merge(m, src)
}
func (m *MinBFTMessage) XXX_Size() int {
	return m.Size()
}
func (m *MinBFTMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MinBFTMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MinBFTMessage proto.InternalMessageInfo

type isMinBFTMessage_Type interface {
	isMinBFTMessage_Type()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MinBFTMessage_Normal struct {
	Normal *NormalMessage `protobuf:"bytes,1,opt,name=normal,proto3,oneof" json:"normal,omitempty"`
}

func (*MinBFTMessage_Normal) isMinBFTMessage_Type() {}

func (m *MinBFTMessage) GetType() isMinBFTMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *MinBFTMessage) GetNormal() *NormalMessage {
	if x, ok := m.GetType().(*MinBFTMessage_Normal); ok {
		return x.Normal
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MinBFTMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MinBFTMessage_Normal)(nil),
	}
}

type NormalMessage struct {
	Type        NormalMessage_Type `protobuf:"varint,1,opt,name=type,proto3,enum=minbftpb.NormalMessage_Type" json:"type,omitempty"`
	View        View               `protobuf:"varint,2,opt,name=view,proto3,casttype=View" json:"view,omitempty"`
	Order       Order              `protobuf:"varint,3,opt,name=order,proto3,casttype=Order" json:"order,omitempty"`
	Command     *commandpb.Command `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	CommandHash []byte             `protobuf:"bytes,5,opt,name=command_hash,json=commandHash,proto3" json:"command_hash,omitempty"`
}

func (m *NormalMessage) Reset()         { *m = NormalMessage{} }
func (m *NormalMessage) String() string { return proto.CompactTextString(m) }
func (*NormalMessage) ProtoMessage()    {}
func (*NormalMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_fdba5fa6cdff9afe, []int{1}
}
func (m *NormalMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NormalMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NormalMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NormalMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NormalMessage.Merge(m, src)
}
func (m *NormalMessage) XXX_Size() int {
	return m.Size()
}
func (m *NormalMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NormalMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NormalMessage proto.InternalMessageInfo

func (m *NormalMessage) GetType() NormalMessage_Type {
	if m != nil {
		return m.Type
	}
	return NormalMessage_Prepare
}

func (m *NormalMessage) GetView() View {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *NormalMessage) GetOrder() Order {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *NormalMessage) GetCommand() *commandpb.Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *NormalMessage) GetCommandHash() []byte {
	if m != nil {
		return m.CommandHash
	}
	return nil
}

func init() {
	proto.RegisterEnum("minbftpb.NormalMessage_Type", NormalMessage_Type_name, NormalMessage_Type_value)
	proto.RegisterType((*MinBFTMessage)(nil), "minbftpb.MinBFTMessage")
	proto.RegisterType((*NormalMessage)(nil), "minbftpb.NormalMessage")
}

func init() {
	proto.RegisterFile("protocols/minbft/minbftpb/minbft.proto", fileDescriptor_fdba5fa6cdff9afe)
}

var fileDescriptor_fdba5fa6cdff9afe = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x8a, 0xd3, 0x40,
	0x18, 0xc7, 0x33, 0xbb, 0x49, 0x76, 0x9d, 0x6e, 0x4b, 0x18, 0x04, 0x43, 0x29, 0x69, 0xad, 0x20,
	0x3d, 0x68, 0xa2, 0xf5, 0xec, 0xc1, 0x14, 0xa4, 0x88, 0xad, 0x12, 0x8a, 0x82, 0x17, 0x99, 0xa4,
	0x63, 0x32, 0xb6, 0x99, 0x09, 0x99, 0xd4, 0xd2, 0xb7, 0xf0, 0x0d, 0x7c, 0x1d, 0x8f, 0x3d, 0x7a,
	0x2a, 0xd2, 0xbe, 0x45, 0x4f, 0x32, 0x93, 0x89, 0xb0, 0x87, 0x9e, 0xe6, 0x9f, 0xdf, 0xff, 0xc7,
	0x97, 0x6f, 0x60, 0xe0, 0xd3, 0xa2, 0xe4, 0x15, 0x4f, 0xf8, 0x5a, 0x04, 0x39, 0x65, 0xf1, 0xb7,
	0x4a, 0x1f, 0x45, 0xac, 0x83, 0xaf, 0x04, 0x74, 0xdb, 0xe0, 0xee, 0xc3, 0x94, 0xa7, 0x5c, 0xc1,
	0x40, 0xa6, 0xba, 0xef, 0x3e, 0x29, 0x56, 0x69, 0x90, 0xf0, 0x3c, 0xc7, 0x6c, 0xd9, 0x9c, 0x45,
	0xdc, 0xa4, 0x5a, 0x1a, 0xbe, 0x83, 0xed, 0x19, 0x65, 0xe1, 0xdb, 0xc5, 0x8c, 0x08, 0x81, 0x53,
	0x82, 0x5e, 0x42, 0x9b, 0xf1, 0x32, 0xc7, 0x6b, 0x17, 0x0c, 0xc0, 0xa8, 0x35, 0x7e, 0xe4, 0x37,
	0xbf, 0xf1, 0xe7, 0x8a, 0x6b, 0x71, 0x6a, 0x44, 0x5a, 0x0c, 0x6d, 0x68, 0x56, 0xbb, 0x82, 0x0c,
	0x7f, 0x5d, 0xc1, 0xf6, 0x3d, 0x07, 0xbd, 0xa8, 0x1b, 0x35, 0xaa, 0x33, 0xee, 0x5d, 0x18, 0xe5,
	0x2f, 0x76, 0x05, 0x89, 0x94, 0x89, 0x7a, 0xd0, 0xfc, 0x41, 0xc9, 0xd6, 0xbd, 0x1a, 0x80, 0x91,
	0x19, 0xde, 0x9e, 0x0f, 0x7d, 0xf3, 0x13, 0x25, 0xdb, 0x48, 0x51, 0xd4, 0x87, 0x16, 0x2f, 0x97,
	0xa4, 0x74, 0xaf, 0x55, 0xfd, 0xe0, 0x7c, 0xe8, 0x5b, 0x1f, 0x24, 0x88, 0x6a, 0x8e, 0x9e, 0xc1,
	0x1b, 0x7d, 0x3f, 0xd7, 0x54, 0xeb, 0x23, 0xff, 0xff, 0xcd, 0xfd, 0x49, 0x9d, 0xa2, 0x46, 0x41,
	0x8f, 0xe1, 0x9d, 0x8e, 0x5f, 0x33, 0x2c, 0x32, 0xd7, 0x1a, 0x80, 0xd1, 0x5d, 0xd4, 0xd2, 0x6c,
	0x8a, 0x45, 0x36, 0x7c, 0x0f, 0x4d, 0xb9, 0x1d, 0x6a, 0xc1, 0x9b, 0x8f, 0x25, 0x29, 0x70, 0x49,
	0x1c, 0x03, 0x41, 0x68, 0xcb, 0x59, 0xb4, 0x72, 0x00, 0xea, 0x40, 0x28, 0x17, 0x9c, 0x64, 0x98,
	0xa5, 0xc4, 0xb9, 0x96, 0xe2, 0x9c, 0x6c, 0x25, 0x72, 0x4c, 0x59, 0xea, 0x8f, 0x37, 0xc9, 0xca,
	0xb1, 0xc2, 0xcf, 0xbf, 0x8f, 0x1e, 0xd8, 0x1f, 0x3d, 0xf0, 0xf7, 0xe8, 0x81, 0x9f, 0x27, 0xcf,
	0xd8, 0x9f, 0x3c, 0xe3, 0xcf, 0xc9, 0x33, 0xbe, 0xbc, 0x4e, 0x69, 0x95, 0x6d, 0x62, 0xb9, 0x6d,
	0x40, 0x63, 0xbc, 0xc6, 0xdf, 0x29, 0x2e, 0x37, 0x2c, 0x48, 0xf9, 0xf3, 0x84, 0x33, 0x41, 0x98,
	0xd8, 0x88, 0xe0, 0xe2, 0xc3, 0x88, 0x6d, 0x55, 0xbd, 0xfa, 0x17, 0x00, 0x00, 0xff, 0xff, 0x15,
	0x30, 0x23, 0x2b, 0x3c, 0x02, 0x00, 0x00,
}

func (m *MinBFTMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MinBFTMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MinBFTMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *MinBFTMessage_Normal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MinBFTMessage_Normal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Normal != nil {
		{
			size, err := m.Normal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMinbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *NormalMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NormalMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NormalMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommandHash) > 0 {
		i -= len(m.CommandHash)
		copy(dAtA[i:], m.CommandHash)
		i = encodeVarintMinbft(dAtA, i, uint64(len(m.CommandHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMinbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Order != 0 {
		i = encodeVarintMinbft(dAtA, i, uint64(m.Order))
		i--
		dAtA[i] = 0x18
	}
	if m.View != 0 {
		i = encodeVarintMinbft(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintMinbft(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMinbft(dAtA []byte, offset int, v uint64) int {
	offset -= sovMinbft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MinBFTMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *MinBFTMessage_Normal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Normal != nil {
		l = m.Normal.Size()
		n += 1 + l + sovMinbft(uint64(l))
	}
	return n
}
func (m *NormalMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMinbft(uint64(m.Type))
	}
	if m.View != 0 {
		n += 1 + sovMinbft(uint64(m.View))
	}
	if m.Order != 0 {
		n += 1 + sovMinbft(uint64(m.Order))
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovMinbft(uint64(l))
	}
	l = len(m.CommandHash)
	if l > 0 {
		n += 1 + l + sovMinbft(uint64(l))
	}
	return n
}

func sovMinbft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMinbft(x uint64) (n int) {
	return sovMinbft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MinBFTMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMinbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MinBFTMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MinBFTMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Normal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMinbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMinbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NormalMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &MinBFTMessage_Normal{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMinbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMinbft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMinbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NormalMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMinbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NormalMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NormalMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= NormalMessage_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= Order(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMinbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMinbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &commandpb.Command{}
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMinbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMinbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandHash = append(m.CommandHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CommandHash == nil {
				m.CommandHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMinbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMinbft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMinbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMinbft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMinbft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMinbft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMinbft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMinbft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMinbft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMinbft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMinbft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMinbft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMinbft = fmt.Errorf("proto: unexpected end of group")
)
