// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocols/multichainduobft/chainduobft/chainduobftpb/chainduobft.proto

package chainduobftpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_ibalajiarun_go_consensus_peer_peerpb "github.com/ibalajiarun/go-consensus/peer/peerpb"
	commandpb "github.com/ibalajiarun/go-consensus/pkg/command/commandpb"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Signature struct {
	Sig     []byte                                                 `protobuf:"bytes,1,opt,name=sig,proto3" json:"sig,omitempty"`
	Signer  github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID `protobuf:"varint,2,opt,name=signer,proto3,casttype=github.com/ibalajiarun/go-consensus/peer/peerpb.PeerID" json:"signer,omitempty"`
	Counter uint64                                                 `protobuf:"varint,3,opt,name=counter,proto3" json:"counter,omitempty"`
}

func (m *Signature) Reset()      { *m = Signature{} }
func (*Signature) ProtoMessage() {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_85504712b658bb5c, []int{0}
}
func (m *Signature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return m.Size()
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *Signature) GetSigner() github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID {
	if m != nil {
		return m.Signer
	}
	return 0
}

func (m *Signature) GetCounter() uint64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

type QuorumCert struct {
	Sigs      map[github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID]*Signature `protobuf:"bytes,1,rep,name=sigs,proto3,castkey=github.com/ibalajiarun/go-consensus/peer/peerpb.PeerID" json:"sigs,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BlockHash BlockHashSlice                                                        `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3,casttype=BlockHashSlice" json:"block_hash,omitempty"`
	Height    Height                                                                `protobuf:"varint,3,opt,name=height,proto3,casttype=Height" json:"height,omitempty"`
}

func (m *QuorumCert) Reset()      { *m = QuorumCert{} }
func (*QuorumCert) ProtoMessage() {}
func (*QuorumCert) Descriptor() ([]byte, []int) {
	return fileDescriptor_85504712b658bb5c, []int{1}
}
func (m *QuorumCert) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuorumCert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *QuorumCert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuorumCert.Merge(m, src)
}
func (m *QuorumCert) XXX_Size() int {
	return m.Size()
}
func (m *QuorumCert) XXX_DiscardUnknown() {
	xxx_messageInfo_QuorumCert.DiscardUnknown(m)
}

var xxx_messageInfo_QuorumCert proto.InternalMessageInfo

func (m *QuorumCert) GetSigs() map[github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID]*Signature {
	if m != nil {
		return m.Sigs
	}
	return nil
}

func (m *QuorumCert) GetBlockHash() BlockHashSlice {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *QuorumCert) GetHeight() Height {
	if m != nil {
		return m.Height
	}
	return 0
}

type SlowChainState struct {
	ProposeBlockHash   BlockHashSlice `protobuf:"bytes,1,opt,name=propose_block_hash,json=proposeBlockHash,proto3,casttype=BlockHashSlice" json:"propose_block_hash,omitempty"`
	ProposeBlockHeight Height         `protobuf:"varint,6,opt,name=propose_block_height,json=proposeBlockHeight,proto3,casttype=Height" json:"propose_block_height,omitempty"`
	Height             Height         `protobuf:"varint,2,opt,name=height,proto3,casttype=Height" json:"height,omitempty"`
	Parent             BlockHashSlice `protobuf:"bytes,3,opt,name=parent,proto3,casttype=BlockHashSlice" json:"parent,omitempty"`
	QC                 *QuorumCert    `protobuf:"bytes,4,opt,name=q_c,json=qC,proto3" json:"q_c,omitempty"`
	SelfPropose        bool           `protobuf:"varint,5,opt,name=self_propose,json=selfPropose,proto3" json:"self_propose,omitempty"`
}

func (m *SlowChainState) Reset()      { *m = SlowChainState{} }
func (*SlowChainState) ProtoMessage() {}
func (*SlowChainState) Descriptor() ([]byte, []int) {
	return fileDescriptor_85504712b658bb5c, []int{2}
}
func (m *SlowChainState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlowChainState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlowChainState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlowChainState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlowChainState.Merge(m, src)
}
func (m *SlowChainState) XXX_Size() int {
	return m.Size()
}
func (m *SlowChainState) XXX_DiscardUnknown() {
	xxx_messageInfo_SlowChainState.DiscardUnknown(m)
}

var xxx_messageInfo_SlowChainState proto.InternalMessageInfo

func (m *SlowChainState) GetProposeBlockHash() BlockHashSlice {
	if m != nil {
		return m.ProposeBlockHash
	}
	return nil
}

func (m *SlowChainState) GetProposeBlockHeight() Height {
	if m != nil {
		return m.ProposeBlockHeight
	}
	return 0
}

func (m *SlowChainState) GetHeight() Height {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *SlowChainState) GetParent() BlockHashSlice {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *SlowChainState) GetQC() *QuorumCert {
	if m != nil {
		return m.QC
	}
	return nil
}

func (m *SlowChainState) GetSelfPropose() bool {
	if m != nil {
		return m.SelfPropose
	}
	return false
}

type FastChainState struct {
	Command *commandpb.Command `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Height  Height             `protobuf:"varint,2,opt,name=height,proto3,casttype=Height" json:"height,omitempty"`
	Parent  BlockHashSlice     `protobuf:"bytes,3,opt,name=parent,proto3,casttype=BlockHashSlice" json:"parent,omitempty"`
	QC      *QuorumCert        `protobuf:"bytes,4,opt,name=q_c,json=qC,proto3" json:"q_c,omitempty"`
}

func (m *FastChainState) Reset()      { *m = FastChainState{} }
func (*FastChainState) ProtoMessage() {}
func (*FastChainState) Descriptor() ([]byte, []int) {
	return fileDescriptor_85504712b658bb5c, []int{3}
}
func (m *FastChainState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FastChainState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FastChainState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FastChainState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FastChainState.Merge(m, src)
}
func (m *FastChainState) XXX_Size() int {
	return m.Size()
}
func (m *FastChainState) XXX_DiscardUnknown() {
	xxx_messageInfo_FastChainState.DiscardUnknown(m)
}

var xxx_messageInfo_FastChainState proto.InternalMessageInfo

func (m *FastChainState) GetCommand() *commandpb.Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *FastChainState) GetHeight() Height {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *FastChainState) GetParent() BlockHashSlice {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *FastChainState) GetQC() *QuorumCert {
	if m != nil {
		return m.QC
	}
	return nil
}

type BlockState struct {
	View      View            `protobuf:"varint,1,opt,name=view,proto3,casttype=View" json:"view,omitempty"`
	FastState *FastChainState `protobuf:"bytes,2,opt,name=fast_state,json=fastState,proto3" json:"fast_state,omitempty"`
	SlowState *SlowChainState `protobuf:"bytes,3,opt,name=slow_state,json=slowState,proto3" json:"slow_state,omitempty"`
}

func (m *BlockState) Reset()      { *m = BlockState{} }
func (*BlockState) ProtoMessage() {}
func (*BlockState) Descriptor() ([]byte, []int) {
	return fileDescriptor_85504712b658bb5c, []int{4}
}
func (m *BlockState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockState.Merge(m, src)
}
func (m *BlockState) XXX_Size() int {
	return m.Size()
}
func (m *BlockState) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockState.DiscardUnknown(m)
}

var xxx_messageInfo_BlockState proto.InternalMessageInfo

func (m *BlockState) GetView() View {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *BlockState) GetFastState() *FastChainState {
	if m != nil {
		return m.FastState
	}
	return nil
}

func (m *BlockState) GetSlowState() *SlowChainState {
	if m != nil {
		return m.SlowState
	}
	return nil
}

type ProposeMessage struct {
	BlockState `protobuf:"bytes,1,opt,name=block,proto3,embedded=block" json:"block"`
}

func (m *ProposeMessage) Reset()      { *m = ProposeMessage{} }
func (*ProposeMessage) ProtoMessage() {}
func (*ProposeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_85504712b658bb5c, []int{5}
}
func (m *ProposeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposeMessage.Merge(m, src)
}
func (m *ProposeMessage) XXX_Size() int {
	return m.Size()
}
func (m *ProposeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ProposeMessage proto.InternalMessageInfo

type VoteMessage struct {
	BlockHash BlockHashSlice `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3,casttype=BlockHashSlice" json:"block_hash,omitempty"`
	Signature *Signature     `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *VoteMessage) Reset()      { *m = VoteMessage{} }
func (*VoteMessage) ProtoMessage() {}
func (*VoteMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_85504712b658bb5c, []int{6}
}
func (m *VoteMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteMessage.Merge(m, src)
}
func (m *VoteMessage) XXX_Size() int {
	return m.Size()
}
func (m *VoteMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteMessage.DiscardUnknown(m)
}

var xxx_messageInfo_VoteMessage proto.InternalMessageInfo

func (m *VoteMessage) GetBlockHash() BlockHashSlice {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *VoteMessage) GetSignature() *Signature {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ChainDuoBFTMessage struct {
	// Types that are valid to be assigned to Type:
	//	*ChainDuoBFTMessage_Propose
	//	*ChainDuoBFTMessage_Vote
	Type isChainDuoBFTMessage_Type `protobuf_oneof:"type"`
}

func (m *ChainDuoBFTMessage) Reset()      { *m = ChainDuoBFTMessage{} }
func (*ChainDuoBFTMessage) ProtoMessage() {}
func (*ChainDuoBFTMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_85504712b658bb5c, []int{7}
}
func (m *ChainDuoBFTMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainDuoBFTMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainDuoBFTMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainDuoBFTMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainDuoBFTMessage.Merge(m, src)
}
func (m *ChainDuoBFTMessage) XXX_Size() int {
	return m.Size()
}
func (m *ChainDuoBFTMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainDuoBFTMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChainDuoBFTMessage proto.InternalMessageInfo

type isChainDuoBFTMessage_Type interface {
	isChainDuoBFTMessage_Type()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ChainDuoBFTMessage_Propose struct {
	Propose *ProposeMessage `protobuf:"bytes,1,opt,name=propose,proto3,oneof" json:"propose,omitempty"`
}
type ChainDuoBFTMessage_Vote struct {
	Vote *VoteMessage `protobuf:"bytes,2,opt,name=vote,proto3,oneof" json:"vote,omitempty"`
}

func (*ChainDuoBFTMessage_Propose) isChainDuoBFTMessage_Type() {}
func (*ChainDuoBFTMessage_Vote) isChainDuoBFTMessage_Type()    {}

func (m *ChainDuoBFTMessage) GetType() isChainDuoBFTMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ChainDuoBFTMessage) GetPropose() *ProposeMessage {
	if x, ok := m.GetType().(*ChainDuoBFTMessage_Propose); ok {
		return x.Propose
	}
	return nil
}

func (m *ChainDuoBFTMessage) GetVote() *VoteMessage {
	if x, ok := m.GetType().(*ChainDuoBFTMessage_Vote); ok {
		return x.Vote
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ChainDuoBFTMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ChainDuoBFTMessage_Propose)(nil),
		(*ChainDuoBFTMessage_Vote)(nil),
	}
}

func init() {
	proto.RegisterType((*Signature)(nil), "chainduobftpb.Signature")
	proto.RegisterType((*QuorumCert)(nil), "chainduobftpb.QuorumCert")
	proto.RegisterMapType((map[github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID]*Signature)(nil), "chainduobftpb.QuorumCert.SigsEntry")
	proto.RegisterType((*SlowChainState)(nil), "chainduobftpb.SlowChainState")
	proto.RegisterType((*FastChainState)(nil), "chainduobftpb.FastChainState")
	proto.RegisterType((*BlockState)(nil), "chainduobftpb.BlockState")
	proto.RegisterType((*ProposeMessage)(nil), "chainduobftpb.ProposeMessage")
	proto.RegisterType((*VoteMessage)(nil), "chainduobftpb.VoteMessage")
	proto.RegisterType((*ChainDuoBFTMessage)(nil), "chainduobftpb.ChainDuoBFTMessage")
}

func init() {
	proto.RegisterFile("protocols/multichainduobft/chainduobft/chainduobftpb/chainduobft.proto", fileDescriptor_85504712b658bb5c)
}

var fileDescriptor_85504712b658bb5c = []byte{
	// 760 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xbf, 0x6f, 0xeb, 0x54,
	0x14, 0xf6, 0x4d, 0xdc, 0x34, 0x39, 0x29, 0x51, 0x75, 0xd5, 0xc1, 0x44, 0xe0, 0x84, 0x74, 0x89,
	0x2a, 0x70, 0xa0, 0x48, 0x15, 0x44, 0x1d, 0x90, 0x53, 0xaa, 0x20, 0x84, 0xd4, 0xde, 0xa0, 0x0a,
	0xb1, 0x44, 0xb6, 0x7b, 0xeb, 0x98, 0x3a, 0xbe, 0xae, 0xaf, 0xdd, 0x50, 0xa6, 0x8a, 0x8d, 0x0d,
	0x36, 0x56, 0x76, 0x56, 0x76, 0xc6, 0x8e, 0x1d, 0x3b, 0xa0, 0x00, 0xe9, 0x7f, 0x91, 0xe9, 0xc9,
	0xd7, 0x76, 0x7e, 0xbd, 0x46, 0xaf, 0xea, 0xf2, 0x96, 0xe4, 0xf8, 0xf8, 0xfb, 0xce, 0x3d, 0xdf,
	0x77, 0xcf, 0x49, 0xe0, 0xd8, 0x0f, 0x58, 0xc8, 0x2c, 0xe6, 0xf2, 0xd6, 0x30, 0x72, 0x43, 0xc7,
	0x1a, 0x18, 0x8e, 0x77, 0x1e, 0x31, 0xf3, 0x22, 0x6c, 0xad, 0x89, 0x7d, 0x73, 0xf1, 0x49, 0x13,
	0x05, 0xf0, 0x3b, 0x4b, 0x80, 0xea, 0x8e, 0xcd, 0x6c, 0x26, 0xde, 0xb4, 0xe2, 0x28, 0x01, 0x55,
	0x77, 0xfd, 0x4b, 0xbb, 0x65, 0xb1, 0xe1, 0xd0, 0xf0, 0xce, 0xb3, 0xef, 0xb8, 0x5a, 0x12, 0x25,
	0xa0, 0xc6, 0x6f, 0x08, 0x4a, 0x3d, 0xc7, 0xf6, 0x8c, 0x30, 0x0a, 0x28, 0xde, 0x86, 0x3c, 0x77,
	0x6c, 0x05, 0xd5, 0x51, 0x73, 0x8b, 0xc4, 0x21, 0x26, 0x50, 0xe0, 0x8e, 0xed, 0xd1, 0x40, 0xc9,
	0xd5, 0x51, 0x53, 0xd6, 0xdb, 0xd3, 0x71, 0xed, 0xc0, 0x76, 0xc2, 0x41, 0x64, 0x6a, 0x16, 0x1b,
	0xb6, 0x1c, 0xd3, 0x70, 0x8d, 0x1f, 0x1c, 0x23, 0x88, 0xbc, 0x96, 0xcd, 0x3e, 0xb2, 0x98, 0xc7,
	0xa9, 0xc7, 0x23, 0xde, 0xf2, 0x29, 0x0d, 0xc4, 0x87, 0x6f, 0x6a, 0x27, 0x94, 0x06, 0x5f, 0x1d,
	0x91, 0xb4, 0x12, 0x56, 0x60, 0xd3, 0x62, 0x91, 0x17, 0xd2, 0x40, 0xc9, 0xc7, 0x45, 0x49, 0xf6,
	0xd8, 0x96, 0x6f, 0xff, 0xa9, 0x4b, 0x8d, 0xbf, 0x72, 0x00, 0xa7, 0x11, 0x0b, 0xa2, 0x61, 0x87,
	0x06, 0x21, 0xe6, 0x20, 0x73, 0xc7, 0xe6, 0x0a, 0xaa, 0xe7, 0x9b, 0xe5, 0xfd, 0x5d, 0x6d, 0x49,
	0xbb, 0x36, 0x07, 0x6a, 0x3d, 0xc7, 0xe6, 0x5f, 0x7a, 0x61, 0x70, 0xa3, 0xb7, 0x7f, 0xfe, 0xf7,
	0xc5, 0x5d, 0x8a, 0xc3, 0xf0, 0x27, 0x00, 0xa6, 0xcb, 0xac, 0xcb, 0xfe, 0xc0, 0xe0, 0x03, 0xa1,
	0x7d, 0x4b, 0xc7, 0xd3, 0x71, 0xad, 0xa2, 0xc7, 0xd9, 0xae, 0xc1, 0x07, 0x3d, 0xd7, 0xb1, 0x28,
	0x29, 0x99, 0xd9, 0x33, 0x6e, 0x40, 0x61, 0x40, 0x1d, 0x7b, 0x10, 0x26, 0xaa, 0x74, 0x98, 0x8e,
	0x6b, 0x85, 0xae, 0xc8, 0x90, 0xf4, 0x4d, 0xf5, 0x54, 0xb8, 0x9d, 0x74, 0x19, 0xbb, 0x7d, 0x49,
	0x6f, 0x84, 0xdb, 0x32, 0x89, 0x43, 0xac, 0xc1, 0xc6, 0xb5, 0xe1, 0x46, 0x54, 0x1c, 0x58, 0xde,
	0x57, 0x56, 0xb4, 0xce, 0x2e, 0x8a, 0x24, 0xb0, 0x76, 0xee, 0x33, 0xd4, 0x2e, 0xfe, 0xfe, 0x47,
	0x0d, 0x65, 0xbe, 0x55, 0x7a, 0x2e, 0x1b, 0x75, 0x62, 0x52, 0x2f, 0x34, 0x42, 0x8a, 0xbf, 0x00,
	0xec, 0x07, 0xcc, 0x67, 0x9c, 0xf6, 0x17, 0xe4, 0xa0, 0xb5, 0x72, 0xb6, 0x53, 0xf4, 0x2c, 0x8d,
	0x0f, 0x61, 0x67, 0xa5, 0x42, 0xa2, 0xb1, 0xf0, 0x9a, 0x46, 0xbc, 0xc4, 0x15, 0xb9, 0x05, 0x4f,
	0x72, 0xeb, 0x3c, 0xc1, 0x7b, 0x50, 0xf0, 0x8d, 0x80, 0x7a, 0x89, 0x6f, 0x4f, 0xf7, 0x95, 0x22,
	0xf0, 0x1e, 0xe4, 0xaf, 0xfa, 0x96, 0x22, 0x0b, 0x7b, 0xde, 0x5d, 0x3b, 0x0a, 0x24, 0x77, 0xd5,
	0xc1, 0x1f, 0xc0, 0x16, 0xa7, 0xee, 0x45, 0x3f, 0x6d, 0x4b, 0xd9, 0xa8, 0xa3, 0x66, 0x91, 0x94,
	0xe3, 0xdc, 0x49, 0x92, 0x4a, 0xe7, 0xed, 0x6f, 0x04, 0x95, 0x63, 0x83, 0x87, 0x0b, 0xbe, 0x7d,
	0x18, 0x8f, 0xa8, 0xd8, 0x13, 0x61, 0x56, 0x79, 0x1f, 0x6b, 0xb3, 0x0d, 0xd2, 0x3a, 0x49, 0x44,
	0x32, 0xc8, 0xdb, 0x54, 0x99, 0x4a, 0xf8, 0x13, 0x01, 0x88, 0x62, 0x49, 0xfb, 0xef, 0x81, 0x7c,
	0xed, 0xd0, 0x51, 0x32, 0x5a, 0x7a, 0x71, 0x3a, 0xae, 0xc9, 0x67, 0x0e, 0x1d, 0x11, 0x91, 0xc5,
	0x87, 0x00, 0x17, 0x06, 0x0f, 0xfb, 0x3c, 0xc6, 0xa6, 0xa3, 0xf6, 0xfe, 0xca, 0x29, 0xcb, 0x7e,
	0x90, 0x52, 0x4c, 0x48, 0x6a, 0x1f, 0x02, 0x70, 0x97, 0x8d, 0x52, 0x76, 0xfe, 0x49, 0xf6, 0xf2,
	0x14, 0x92, 0x52, 0x4c, 0x10, 0x61, 0xda, 0xee, 0xd7, 0x50, 0x49, 0xaf, 0xe0, 0x1b, 0xca, 0xb9,
	0x61, 0x53, 0xfc, 0x39, 0x6c, 0x88, 0xf1, 0x4a, 0xed, 0x5e, 0x15, 0x3d, 0xd7, 0xa6, 0x17, 0xef,
	0xc6, 0x35, 0xe9, 0x7e, 0x5c, 0x43, 0x24, 0x61, 0x34, 0x7e, 0x84, 0xf2, 0x19, 0x0b, 0x67, 0x95,
	0x96, 0x37, 0x17, 0x3d, 0x67, 0x73, 0x0f, 0xa0, 0xc4, 0xb3, 0xd5, 0x7a, 0xe3, 0xea, 0xcd, 0xa1,
	0x8d, 0x5f, 0x10, 0x60, 0x21, 0xf3, 0x28, 0x62, 0xfa, 0xf1, 0xb7, 0x73, 0x2d, 0x9b, 0xd9, 0xcc,
	0xa1, 0x27, 0xed, 0x59, 0xd6, 0xde, 0x95, 0x48, 0x86, 0xc7, 0x1f, 0x83, 0x7c, 0xcd, 0x66, 0x97,
	0x52, 0x5d, 0xe1, 0x2d, 0xc8, 0xec, 0x4a, 0x44, 0x20, 0xf5, 0x02, 0xc8, 0xe1, 0x8d, 0x4f, 0xf5,
	0x9f, 0x1e, 0xfe, 0x57, 0xa5, 0xdb, 0x89, 0x8a, 0xee, 0x26, 0x2a, 0xba, 0x9f, 0xa8, 0xe8, 0xbf,
	0x89, 0x8a, 0x7e, 0x7d, 0x54, 0xa5, 0xfb, 0x47, 0x55, 0x7a, 0x78, 0x54, 0xa5, 0xef, 0xbf, 0x7b,
	0xd6, 0x0f, 0xe2, 0x0b, 0xfe, 0xa0, 0xcc, 0x82, 0x60, 0x7d, 0xfa, 0x2a, 0x00, 0x00, 0xff, 0xff,
	0xbb, 0x31, 0xd6, 0x47, 0xdf, 0x06, 0x00, 0x00,
}

func (m *Signature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Signature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Signature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Counter != 0 {
		i = encodeVarintChainduobft(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x18
	}
	if m.Signer != 0 {
		i = encodeVarintChainduobft(dAtA, i, uint64(m.Signer))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintChainduobft(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuorumCert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuorumCert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuorumCert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintChainduobft(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintChainduobft(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sigs) > 0 {
		keysForSigs := make([]uint64, 0, len(m.Sigs))
		for k := range m.Sigs {
			keysForSigs = append(keysForSigs, uint64(k))
		}
		github_com_gogo_protobuf_sortkeys.Uint64s(keysForSigs)
		for iNdEx := len(keysForSigs) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Sigs[github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID(keysForSigs[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintChainduobft(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintChainduobft(dAtA, i, uint64(keysForSigs[iNdEx]))
			i--
			dAtA[i] = 0x8
			i = encodeVarintChainduobft(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SlowChainState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlowChainState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlowChainState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposeBlockHeight != 0 {
		i = encodeVarintChainduobft(dAtA, i, uint64(m.ProposeBlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.SelfPropose {
		i--
		if m.SelfPropose {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.QC != nil {
		{
			size, err := m.QC.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainduobft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Parent) > 0 {
		i -= len(m.Parent)
		copy(dAtA[i:], m.Parent)
		i = encodeVarintChainduobft(dAtA, i, uint64(len(m.Parent)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintChainduobft(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ProposeBlockHash) > 0 {
		i -= len(m.ProposeBlockHash)
		copy(dAtA[i:], m.ProposeBlockHash)
		i = encodeVarintChainduobft(dAtA, i, uint64(len(m.ProposeBlockHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FastChainState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FastChainState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FastChainState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.QC != nil {
		{
			size, err := m.QC.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainduobft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Parent) > 0 {
		i -= len(m.Parent)
		copy(dAtA[i:], m.Parent)
		i = encodeVarintChainduobft(dAtA, i, uint64(len(m.Parent)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintChainduobft(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainduobft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SlowState != nil {
		{
			size, err := m.SlowState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainduobft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.FastState != nil {
		{
			size, err := m.FastState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainduobft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.View != 0 {
		i = encodeVarintChainduobft(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProposeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BlockState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintChainduobft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VoteMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Signature != nil {
		{
			size, err := m.Signature.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainduobft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintChainduobft(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChainDuoBFTMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainDuoBFTMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainDuoBFTMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChainDuoBFTMessage_Propose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainDuoBFTMessage_Propose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Propose != nil {
		{
			size, err := m.Propose.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainduobft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *ChainDuoBFTMessage_Vote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainDuoBFTMessage_Vote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Vote != nil {
		{
			size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintChainduobft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func encodeVarintChainduobft(dAtA []byte, offset int, v uint64) int {
	offset -= sovChainduobft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Signature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovChainduobft(uint64(l))
	}
	if m.Signer != 0 {
		n += 1 + sovChainduobft(uint64(m.Signer))
	}
	if m.Counter != 0 {
		n += 1 + sovChainduobft(uint64(m.Counter))
	}
	return n
}

func (m *QuorumCert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sigs) > 0 {
		for k, v := range m.Sigs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovChainduobft(uint64(l))
			}
			mapEntrySize := 1 + sovChainduobft(uint64(k)) + l
			n += mapEntrySize + 1 + sovChainduobft(uint64(mapEntrySize))
		}
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovChainduobft(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovChainduobft(uint64(m.Height))
	}
	return n
}

func (m *SlowChainState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProposeBlockHash)
	if l > 0 {
		n += 1 + l + sovChainduobft(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovChainduobft(uint64(m.Height))
	}
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovChainduobft(uint64(l))
	}
	if m.QC != nil {
		l = m.QC.Size()
		n += 1 + l + sovChainduobft(uint64(l))
	}
	if m.SelfPropose {
		n += 2
	}
	if m.ProposeBlockHeight != 0 {
		n += 1 + sovChainduobft(uint64(m.ProposeBlockHeight))
	}
	return n
}

func (m *FastChainState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovChainduobft(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovChainduobft(uint64(m.Height))
	}
	l = len(m.Parent)
	if l > 0 {
		n += 1 + l + sovChainduobft(uint64(l))
	}
	if m.QC != nil {
		l = m.QC.Size()
		n += 1 + l + sovChainduobft(uint64(l))
	}
	return n
}

func (m *BlockState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovChainduobft(uint64(m.View))
	}
	if m.FastState != nil {
		l = m.FastState.Size()
		n += 1 + l + sovChainduobft(uint64(l))
	}
	if m.SlowState != nil {
		l = m.SlowState.Size()
		n += 1 + l + sovChainduobft(uint64(l))
	}
	return n
}

func (m *ProposeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BlockState.Size()
	n += 1 + l + sovChainduobft(uint64(l))
	return n
}

func (m *VoteMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovChainduobft(uint64(l))
	}
	if m.Signature != nil {
		l = m.Signature.Size()
		n += 1 + l + sovChainduobft(uint64(l))
	}
	return n
}

func (m *ChainDuoBFTMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *ChainDuoBFTMessage_Propose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Propose != nil {
		l = m.Propose.Size()
		n += 1 + l + sovChainduobft(uint64(l))
	}
	return n
}
func (m *ChainDuoBFTMessage_Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovChainduobft(uint64(l))
	}
	return n
}

func sovChainduobft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChainduobft(x uint64) (n int) {
	return sovChainduobft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ProposeMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProposeMessage{`,
		`BlockState:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.BlockState), "BlockState", "BlockState", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VoteMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VoteMessage{`,
		`BlockHash:` + fmt.Sprintf("%v", this.BlockHash) + `,`,
		`Signature:` + strings.Replace(fmt.Sprintf("%v", this.Signature), "Signature", "Signature", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChainDuoBFTMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChainDuoBFTMessage{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChainDuoBFTMessage_Propose) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChainDuoBFTMessage_Propose{`,
		`Propose:` + strings.Replace(fmt.Sprintf("%v", this.Propose), "ProposeMessage", "ProposeMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChainDuoBFTMessage_Vote) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChainDuoBFTMessage_Vote{`,
		`Vote:` + strings.Replace(fmt.Sprintf("%v", this.Vote), "VoteMessage", "VoteMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringChainduobft(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Signature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainduobft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Signature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Signature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainduobft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainduobft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			m.Signer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Signer |= github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChainduobft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainduobft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainduobft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuorumCert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainduobft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuorumCert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuorumCert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainduobft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainduobft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sigs == nil {
				m.Sigs = make(map[github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID]*Signature)
			}
			var mapkey uint64
			var mapvalue *Signature
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChainduobft
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChainduobft
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChainduobft
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthChainduobft
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthChainduobft
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Signature{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipChainduobft(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthChainduobft
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Sigs[github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID(mapkey)] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainduobft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainduobft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= Height(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChainduobft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainduobft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainduobft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlowChainState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainduobft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlowChainState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlowChainState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposeBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainduobft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainduobft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposeBlockHash = append(m.ProposeBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ProposeBlockHash == nil {
				m.ProposeBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= Height(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainduobft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainduobft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = append(m.Parent[:0], dAtA[iNdEx:postIndex]...)
			if m.Parent == nil {
				m.Parent = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainduobft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainduobft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QC == nil {
				m.QC = &QuorumCert{}
			}
			if err := m.QC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfPropose", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SelfPropose = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposeBlockHeight", wireType)
			}
			m.ProposeBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposeBlockHeight |= Height(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChainduobft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainduobft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainduobft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FastChainState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainduobft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FastChainState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FastChainState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainduobft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainduobft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &commandpb.Command{}
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= Height(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainduobft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainduobft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parent = append(m.Parent[:0], dAtA[iNdEx:postIndex]...)
			if m.Parent == nil {
				m.Parent = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QC", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainduobft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainduobft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QC == nil {
				m.QC = &QuorumCert{}
			}
			if err := m.QC.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainduobft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainduobft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainduobft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainduobft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainduobft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainduobft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FastState == nil {
				m.FastState = &FastChainState{}
			}
			if err := m.FastState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlowState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainduobft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainduobft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SlowState == nil {
				m.SlowState = &SlowChainState{}
			}
			if err := m.SlowState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainduobft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainduobft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainduobft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainduobft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainduobft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainduobft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BlockState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainduobft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainduobft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainduobft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainduobft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChainduobft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthChainduobft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainduobft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainduobft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Signature == nil {
				m.Signature = &Signature{}
			}
			if err := m.Signature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainduobft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainduobft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainduobft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainDuoBFTMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainduobft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainDuoBFTMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainDuoBFTMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Propose", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainduobft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainduobft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ProposeMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &ChainDuoBFTMessage_Propose{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainduobft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainduobft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &VoteMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &ChainDuoBFTMessage_Vote{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainduobft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChainduobft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChainduobft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChainduobft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChainduobft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainduobft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChainduobft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChainduobft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChainduobft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChainduobft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChainduobft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChainduobft = fmt.Errorf("proto: unexpected end of group")
)
