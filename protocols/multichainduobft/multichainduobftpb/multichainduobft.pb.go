// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocols/multichainduobft/multichainduobftpb/multichainduobft.proto

package multichainduobftpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_ibalajiarun_go_consensus_peer_peerpb "github.com/ibalajiarun/go-consensus/peer/peerpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChainID struct {
	PeerID  github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID `protobuf:"varint,1,opt,name=peer_id,json=peerId,proto3,casttype=github.com/ibalajiarun/go-consensus/peer/peerpb.PeerID" json:"peer_id,omitempty"`
	PeerSeq uint32                                                 `protobuf:"varint,2,opt,name=peer_seq,json=peerSeq,proto3" json:"peer_seq,omitempty"`
}

func (m *ChainID) Reset()         { *m = ChainID{} }
func (m *ChainID) String() string { return proto.CompactTextString(m) }
func (*ChainID) ProtoMessage()    {}
func (*ChainID) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c0cb0b6e965a0e4, []int{0}
}
func (m *ChainID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainID.Merge(m, src)
}
func (m *ChainID) XXX_Size() int {
	return m.Size()
}
func (m *ChainID) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainID.DiscardUnknown(m)
}

var xxx_messageInfo_ChainID proto.InternalMessageInfo

func (m *ChainID) GetPeerID() github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID {
	if m != nil {
		return m.PeerID
	}
	return 0
}

func (m *ChainID) GetPeerSeq() uint32 {
	if m != nil {
		return m.PeerSeq
	}
	return 0
}

func init() {
	proto.RegisterType((*ChainID)(nil), "multichainduobftpb.ChainID")
}

func init() {
	proto.RegisterFile("protocols/multichainduobft/multichainduobftpb/multichainduobft.proto", fileDescriptor_1c0cb0b6e965a0e4)
}

var fileDescriptor_1c0cb0b6e965a0e4 = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0xce, 0xcf, 0x29, 0xd6, 0xcf, 0x2d, 0xcd, 0x29, 0xc9, 0x4c, 0xce, 0x48, 0xcc, 0xcc,
	0x4b, 0x29, 0xcd, 0x4f, 0x4a, 0x2b, 0xc1, 0x10, 0x28, 0x48, 0xc2, 0x10, 0xd2, 0x03, 0x6b, 0x17,
	0x12, 0xc2, 0x54, 0x2a, 0x25, 0x92, 0x9e, 0x9f, 0x9e, 0x0f, 0x96, 0xd6, 0x07, 0xb1, 0x20, 0x2a,
	0x95, 0x9a, 0x19, 0xb9, 0xd8, 0x9d, 0x41, 0xea, 0x3c, 0x5d, 0x84, 0x62, 0xb9, 0xd8, 0x0b, 0x52,
	0x53, 0x8b, 0xe2, 0x33, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x9c, 0x5c, 0x1e, 0xdd, 0x93,
	0x67, 0x0b, 0x48, 0x4d, 0x2d, 0xf2, 0x74, 0xf9, 0x75, 0x4f, 0xde, 0x2c, 0x3d, 0xb3, 0x24, 0xa3,
	0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x3f, 0x33, 0x29, 0x31, 0x27, 0x31, 0x2b, 0x33, 0xb1, 0xa8,
	0x34, 0x4f, 0x3f, 0x3d, 0x5f, 0x37, 0x39, 0x3f, 0xaf, 0x38, 0x35, 0xaf, 0xb8, 0xb4, 0x58, 0x1f,
	0x64, 0x00, 0x98, 0x28, 0x48, 0xd2, 0x83, 0xe8, 0x0c, 0x62, 0x03, 0x71, 0x3d, 0x53, 0x84, 0x24,
	0xb9, 0x38, 0xc0, 0xc6, 0x17, 0xa7, 0x16, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0xf0, 0x06, 0x81, 0xad,
	0x0b, 0x4e, 0x2d, 0x74, 0xca, 0x3e, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f,
	0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0xa8,
	0x40, 0xa2, 0x2c, 0x25, 0x25, 0xcc, 0x92, 0xd8, 0xc0, 0xca, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x54, 0x04, 0x1e, 0x7e, 0x6b, 0x01, 0x00, 0x00,
}

func (m *ChainID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PeerSeq != 0 {
		i = encodeVarintMultichainduobft(dAtA, i, uint64(m.PeerSeq))
		i--
		dAtA[i] = 0x10
	}
	if m.PeerID != 0 {
		i = encodeVarintMultichainduobft(dAtA, i, uint64(m.PeerID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMultichainduobft(dAtA []byte, offset int, v uint64) int {
	offset -= sovMultichainduobft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChainID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PeerID != 0 {
		n += 1 + sovMultichainduobft(uint64(m.PeerID))
	}
	if m.PeerSeq != 0 {
		n += 1 + sovMultichainduobft(uint64(m.PeerSeq))
	}
	return n
}

func sovMultichainduobft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMultichainduobft(x uint64) (n int) {
	return sovMultichainduobft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChainID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultichainduobft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerID", wireType)
			}
			m.PeerID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultichainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerID |= github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerSeq", wireType)
			}
			m.PeerSeq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultichainduobft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeerSeq |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMultichainduobft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMultichainduobft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMultichainduobft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMultichainduobft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMultichainduobft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMultichainduobft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMultichainduobft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMultichainduobft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMultichainduobft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMultichainduobft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMultichainduobft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMultichainduobft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMultichainduobft = fmt.Errorf("proto: unexpected end of group")
)
