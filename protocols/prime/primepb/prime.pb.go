// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocols/prime/primepb/prime.proto

package primepb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_ibalajiarun_go_consensus_peer_peerpb "github.com/ibalajiarun/go-consensus/peer/peerpb"
	commandpb "github.com/ibalajiarun/go-consensus/pkg/command/commandpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InstanceState_Status int32

const (
	InstanceState_None        InstanceState_Status = 0
	InstanceState_PreOrder    InstanceState_Status = 1
	InstanceState_PreOrderAck InstanceState_Status = 2
	InstanceState_Summary     InstanceState_Status = 3
	InstanceState_Committed   InstanceState_Status = 4
	InstanceState_Executed    InstanceState_Status = 5
)

var InstanceState_Status_name = map[int32]string{
	0: "None",
	1: "PreOrder",
	2: "PreOrderAck",
	3: "Summary",
	4: "Committed",
	5: "Executed",
}

var InstanceState_Status_value = map[string]int32{
	"None":        0,
	"PreOrder":    1,
	"PreOrderAck": 2,
	"Summary":     3,
	"Committed":   4,
	"Executed":    5,
}

func (x InstanceState_Status) String() string {
	return proto.EnumName(InstanceState_Status_name, int32(x))
}

func (InstanceState_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_159e0b57de1af8e1, []int{2, 0}
}

type PreOrderMessage_Type int32

const (
	PreOrderMessage_PORequest PreOrderMessage_Type = 0
	PreOrderMessage_POAck     PreOrderMessage_Type = 1
	PreOrderMessage_POSummary PreOrderMessage_Type = 2
)

var PreOrderMessage_Type_name = map[int32]string{
	0: "PORequest",
	1: "POAck",
	2: "POSummary",
}

var PreOrderMessage_Type_value = map[string]int32{
	"PORequest": 0,
	"POAck":     1,
	"POSummary": 2,
}

func (x PreOrderMessage_Type) String() string {
	return proto.EnumName(PreOrderMessage_Type_name, int32(x))
}

func (PreOrderMessage_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_159e0b57de1af8e1, []int{3, 0}
}

type OInstanceState_Status int32

const (
	OInstanceState_None        OInstanceState_Status = 0
	OInstanceState_PrePrepared OInstanceState_Status = 1
	OInstanceState_Prepared    OInstanceState_Status = 2
	OInstanceState_Committed   OInstanceState_Status = 3
	OInstanceState_Executed    OInstanceState_Status = 4
)

var OInstanceState_Status_name = map[int32]string{
	0: "None",
	1: "PrePrepared",
	2: "Prepared",
	3: "Committed",
	4: "Executed",
}

var OInstanceState_Status_value = map[string]int32{
	"None":        0,
	"PrePrepared": 1,
	"Prepared":    2,
	"Committed":   3,
	"Executed":    4,
}

func (x OInstanceState_Status) String() string {
	return proto.EnumName(OInstanceState_Status_name, int32(x))
}

func (OInstanceState_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_159e0b57de1af8e1, []int{7, 0}
}

type OrderMessage_Type int32

const (
	OrderMessage_PrePrepare OrderMessage_Type = 0
	OrderMessage_Prepare    OrderMessage_Type = 1
	OrderMessage_Commit     OrderMessage_Type = 2
)

var OrderMessage_Type_name = map[int32]string{
	0: "PrePrepare",
	1: "Prepare",
	2: "Commit",
}

var OrderMessage_Type_value = map[string]int32{
	"PrePrepare": 0,
	"Prepare":    1,
	"Commit":     2,
}

func (x OrderMessage_Type) String() string {
	return proto.EnumName(OrderMessage_Type_name, int32(x))
}

func (OrderMessage_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_159e0b57de1af8e1, []int{8, 0}
}

type PrimeMessage struct {
	// Types that are valid to be assigned to Type:
	//	*PrimeMessage_Preorder
	//	*PrimeMessage_Order
	//	*PrimeMessage_Result
	Type isPrimeMessage_Type `protobuf_oneof:"type"`
}

func (m *PrimeMessage) Reset()         { *m = PrimeMessage{} }
func (m *PrimeMessage) String() string { return proto.CompactTextString(m) }
func (*PrimeMessage) ProtoMessage()    {}
func (*PrimeMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_159e0b57de1af8e1, []int{0}
}
func (m *PrimeMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrimeMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrimeMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrimeMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrimeMessage.Merge(m, src)
}
func (m *PrimeMessage) XXX_Size() int {
	return m.Size()
}
func (m *PrimeMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PrimeMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PrimeMessage proto.InternalMessageInfo

type isPrimeMessage_Type interface {
	isPrimeMessage_Type()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PrimeMessage_Preorder struct {
	Preorder *PreOrderMessage `protobuf:"bytes,1,opt,name=preorder,proto3,oneof" json:"preorder,omitempty"`
}
type PrimeMessage_Order struct {
	Order *OrderMessage `protobuf:"bytes,2,opt,name=order,proto3,oneof" json:"order,omitempty"`
}
type PrimeMessage_Result struct {
	Result *ResultMessage `protobuf:"bytes,3,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (*PrimeMessage_Preorder) isPrimeMessage_Type() {}
func (*PrimeMessage_Order) isPrimeMessage_Type()    {}
func (*PrimeMessage_Result) isPrimeMessage_Type()   {}

func (m *PrimeMessage) GetType() isPrimeMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *PrimeMessage) GetPreorder() *PreOrderMessage {
	if x, ok := m.GetType().(*PrimeMessage_Preorder); ok {
		return x.Preorder
	}
	return nil
}

func (m *PrimeMessage) GetOrder() *OrderMessage {
	if x, ok := m.GetType().(*PrimeMessage_Order); ok {
		return x.Order
	}
	return nil
}

func (m *PrimeMessage) GetResult() *ResultMessage {
	if x, ok := m.GetType().(*PrimeMessage_Result); ok {
		return x.Result
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PrimeMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PrimeMessage_Preorder)(nil),
		(*PrimeMessage_Order)(nil),
		(*PrimeMessage_Result)(nil),
	}
}

type InstanceID struct {
	ReplicaID github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3,casttype=github.com/ibalajiarun/go-consensus/peer/peerpb.PeerID" json:"replica_id,omitempty"`
	Index     Index                                                  `protobuf:"varint,2,opt,name=index,proto3,casttype=Index" json:"index,omitempty"`
}

func (m *InstanceID) Reset()         { *m = InstanceID{} }
func (m *InstanceID) String() string { return proto.CompactTextString(m) }
func (*InstanceID) ProtoMessage()    {}
func (*InstanceID) Descriptor() ([]byte, []int) {
	return fileDescriptor_159e0b57de1af8e1, []int{1}
}
func (m *InstanceID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstanceID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstanceID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceID.Merge(m, src)
}
func (m *InstanceID) XXX_Size() int {
	return m.Size()
}
func (m *InstanceID) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceID.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceID proto.InternalMessageInfo

func (m *InstanceID) GetReplicaID() github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID {
	if m != nil {
		return m.ReplicaID
	}
	return 0
}

func (m *InstanceID) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return 0
}

type InstanceState struct {
	View        View                 `protobuf:"varint,1,opt,name=view,proto3,casttype=View" json:"view,omitempty"`
	InstanceID  InstanceID           `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id"`
	Status      InstanceState_Status `protobuf:"varint,3,opt,name=status,proto3,enum=primepb.InstanceState_Status" json:"status,omitempty"`
	Command     *commandpb.Command   `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	CommandHash []byte               `protobuf:"bytes,5,opt,name=command_hash,json=commandHash,proto3" json:"command_hash,omitempty"`
}

func (m *InstanceState) Reset()         { *m = InstanceState{} }
func (m *InstanceState) String() string { return proto.CompactTextString(m) }
func (*InstanceState) ProtoMessage()    {}
func (*InstanceState) Descriptor() ([]byte, []int) {
	return fileDescriptor_159e0b57de1af8e1, []int{2}
}
func (m *InstanceState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstanceState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstanceState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceState.Merge(m, src)
}
func (m *InstanceState) XXX_Size() int {
	return m.Size()
}
func (m *InstanceState) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceState.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceState proto.InternalMessageInfo

func (m *InstanceState) GetView() View {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *InstanceState) GetInstanceID() InstanceID {
	if m != nil {
		return m.InstanceID
	}
	return InstanceID{}
}

func (m *InstanceState) GetStatus() InstanceState_Status {
	if m != nil {
		return m.Status
	}
	return InstanceState_None
}

func (m *InstanceState) GetCommand() *commandpb.Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *InstanceState) GetCommandHash() []byte {
	if m != nil {
		return m.CommandHash
	}
	return nil
}

type PreOrderMessage struct {
	InstanceID  InstanceID           `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id"`
	Type        PreOrderMessage_Type `protobuf:"varint,3,opt,name=type,proto3,enum=primepb.PreOrderMessage_Type" json:"type,omitempty"`
	Command     *commandpb.Command   `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	CommandHash []byte               `protobuf:"bytes,5,opt,name=command_hash,json=commandHash,proto3" json:"command_hash,omitempty"`
	POSummary   POSummary            `protobuf:"bytes,6,opt,name=po_summary,json=poSummary,proto3" json:"po_summary"`
}

func (m *PreOrderMessage) Reset()         { *m = PreOrderMessage{} }
func (m *PreOrderMessage) String() string { return proto.CompactTextString(m) }
func (*PreOrderMessage) ProtoMessage()    {}
func (*PreOrderMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_159e0b57de1af8e1, []int{3}
}
func (m *PreOrderMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PreOrderMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PreOrderMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PreOrderMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreOrderMessage.Merge(m, src)
}
func (m *PreOrderMessage) XXX_Size() int {
	return m.Size()
}
func (m *PreOrderMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PreOrderMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PreOrderMessage proto.InternalMessageInfo

func (m *PreOrderMessage) GetInstanceID() InstanceID {
	if m != nil {
		return m.InstanceID
	}
	return InstanceID{}
}

func (m *PreOrderMessage) GetType() PreOrderMessage_Type {
	if m != nil {
		return m.Type
	}
	return PreOrderMessage_PORequest
}

func (m *PreOrderMessage) GetCommand() *commandpb.Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *PreOrderMessage) GetCommandHash() []byte {
	if m != nil {
		return m.CommandHash
	}
	return nil
}

func (m *PreOrderMessage) GetPOSummary() POSummary {
	if m != nil {
		return m.POSummary
	}
	return POSummary{}
}

type ResultMessage struct {
	Result [][]byte `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Id     []uint64 `protobuf:"varint,2,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (m *ResultMessage) Reset()         { *m = ResultMessage{} }
func (m *ResultMessage) String() string { return proto.CompactTextString(m) }
func (*ResultMessage) ProtoMessage()    {}
func (*ResultMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_159e0b57de1af8e1, []int{4}
}
func (m *ResultMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResultMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResultMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResultMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultMessage.Merge(m, src)
}
func (m *ResultMessage) XXX_Size() int {
	return m.Size()
}
func (m *ResultMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ResultMessage proto.InternalMessageInfo

func (m *ResultMessage) GetResult() [][]byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ResultMessage) GetId() []uint64 {
	if m != nil {
		return m.Id
	}
	return nil
}

type POSummary struct {
	POSummary []Index `protobuf:"varint,5,rep,packed,name=po_summary,json=poSummary,proto3,casttype=Index" json:"po_summary,omitempty"`
}

func (m *POSummary) Reset()         { *m = POSummary{} }
func (m *POSummary) String() string { return proto.CompactTextString(m) }
func (*POSummary) ProtoMessage()    {}
func (*POSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_159e0b57de1af8e1, []int{5}
}
func (m *POSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *POSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_POSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *POSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_POSummary.Merge(m, src)
}
func (m *POSummary) XXX_Size() int {
	return m.Size()
}
func (m *POSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_POSummary.DiscardUnknown(m)
}

var xxx_messageInfo_POSummary proto.InternalMessageInfo

func (m *POSummary) GetPOSummary() []Index {
	if m != nil {
		return m.POSummary
	}
	return nil
}

type POSummaryMatrix struct {
	POSummaryMatrix []POSummary `protobuf:"bytes,5,rep,name=po_summary_matrix,json=poSummaryMatrix,proto3" json:"po_summary_matrix"`
}

func (m *POSummaryMatrix) Reset()         { *m = POSummaryMatrix{} }
func (m *POSummaryMatrix) String() string { return proto.CompactTextString(m) }
func (*POSummaryMatrix) ProtoMessage()    {}
func (*POSummaryMatrix) Descriptor() ([]byte, []int) {
	return fileDescriptor_159e0b57de1af8e1, []int{6}
}
func (m *POSummaryMatrix) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *POSummaryMatrix) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_POSummaryMatrix.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *POSummaryMatrix) XXX_Merge(src proto.Message) {
	xxx_messageInfo_POSummaryMatrix.Merge(m, src)
}
func (m *POSummaryMatrix) XXX_Size() int {
	return m.Size()
}
func (m *POSummaryMatrix) XXX_DiscardUnknown() {
	xxx_messageInfo_POSummaryMatrix.DiscardUnknown(m)
}

var xxx_messageInfo_POSummaryMatrix proto.InternalMessageInfo

func (m *POSummaryMatrix) GetPOSummaryMatrix() []POSummary {
	if m != nil {
		return m.POSummaryMatrix
	}
	return nil
}

type OInstanceState struct {
	View                View                  `protobuf:"varint,1,opt,name=view,proto3,casttype=View" json:"view,omitempty"`
	Index               Index                 `protobuf:"varint,2,opt,name=index,proto3,casttype=Index" json:"index,omitempty"`
	Status              OInstanceState_Status `protobuf:"varint,3,opt,name=status,proto3,enum=primepb.OInstanceState_Status" json:"status,omitempty"`
	POSummaryMatrix     *POSummaryMatrix      `protobuf:"bytes,5,opt,name=po_summary_matrix,json=poSummaryMatrix,proto3" json:"po_summary_matrix,omitempty"`
	POSummaryMatrixHash []byte                `protobuf:"bytes,6,opt,name=po_summary_matrix_hash,json=poSummaryMatrixHash,proto3" json:"po_summary_matrix_hash,omitempty"`
}

func (m *OInstanceState) Reset()         { *m = OInstanceState{} }
func (m *OInstanceState) String() string { return proto.CompactTextString(m) }
func (*OInstanceState) ProtoMessage()    {}
func (*OInstanceState) Descriptor() ([]byte, []int) {
	return fileDescriptor_159e0b57de1af8e1, []int{7}
}
func (m *OInstanceState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OInstanceState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OInstanceState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OInstanceState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OInstanceState.Merge(m, src)
}
func (m *OInstanceState) XXX_Size() int {
	return m.Size()
}
func (m *OInstanceState) XXX_DiscardUnknown() {
	xxx_messageInfo_OInstanceState.DiscardUnknown(m)
}

var xxx_messageInfo_OInstanceState proto.InternalMessageInfo

func (m *OInstanceState) GetView() View {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *OInstanceState) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *OInstanceState) GetStatus() OInstanceState_Status {
	if m != nil {
		return m.Status
	}
	return OInstanceState_None
}

func (m *OInstanceState) GetPOSummaryMatrix() *POSummaryMatrix {
	if m != nil {
		return m.POSummaryMatrix
	}
	return nil
}

func (m *OInstanceState) GetPOSummaryMatrixHash() []byte {
	if m != nil {
		return m.POSummaryMatrixHash
	}
	return nil
}

type OrderMessage struct {
	View                View              `protobuf:"varint,1,opt,name=view,proto3,casttype=View" json:"view,omitempty"`
	Index               Index             `protobuf:"varint,2,opt,name=index,proto3,casttype=Index" json:"index,omitempty"`
	Type                OrderMessage_Type `protobuf:"varint,3,opt,name=type,proto3,enum=primepb.OrderMessage_Type" json:"type,omitempty"`
	POSummaryMatrix     *POSummaryMatrix  `protobuf:"bytes,5,opt,name=po_summary_matrix,json=poSummaryMatrix,proto3" json:"po_summary_matrix,omitempty"`
	POSummaryMatrixHash []byte            `protobuf:"bytes,6,opt,name=po_summary_matrix_hash,json=poSummaryMatrixHash,proto3" json:"po_summary_matrix_hash,omitempty"`
}

func (m *OrderMessage) Reset()         { *m = OrderMessage{} }
func (m *OrderMessage) String() string { return proto.CompactTextString(m) }
func (*OrderMessage) ProtoMessage()    {}
func (*OrderMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_159e0b57de1af8e1, []int{8}
}
func (m *OrderMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderMessage.Merge(m, src)
}
func (m *OrderMessage) XXX_Size() int {
	return m.Size()
}
func (m *OrderMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderMessage.DiscardUnknown(m)
}

var xxx_messageInfo_OrderMessage proto.InternalMessageInfo

func (m *OrderMessage) GetView() View {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *OrderMessage) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *OrderMessage) GetType() OrderMessage_Type {
	if m != nil {
		return m.Type
	}
	return OrderMessage_PrePrepare
}

func (m *OrderMessage) GetPOSummaryMatrix() *POSummaryMatrix {
	if m != nil {
		return m.POSummaryMatrix
	}
	return nil
}

func (m *OrderMessage) GetPOSummaryMatrixHash() []byte {
	if m != nil {
		return m.POSummaryMatrixHash
	}
	return nil
}

func init() {
	proto.RegisterEnum("primepb.InstanceState_Status", InstanceState_Status_name, InstanceState_Status_value)
	proto.RegisterEnum("primepb.PreOrderMessage_Type", PreOrderMessage_Type_name, PreOrderMessage_Type_value)
	proto.RegisterEnum("primepb.OInstanceState_Status", OInstanceState_Status_name, OInstanceState_Status_value)
	proto.RegisterEnum("primepb.OrderMessage_Type", OrderMessage_Type_name, OrderMessage_Type_value)
	proto.RegisterType((*PrimeMessage)(nil), "primepb.PrimeMessage")
	proto.RegisterType((*InstanceID)(nil), "primepb.InstanceID")
	proto.RegisterType((*InstanceState)(nil), "primepb.InstanceState")
	proto.RegisterType((*PreOrderMessage)(nil), "primepb.PreOrderMessage")
	proto.RegisterType((*ResultMessage)(nil), "primepb.ResultMessage")
	proto.RegisterType((*POSummary)(nil), "primepb.POSummary")
	proto.RegisterType((*POSummaryMatrix)(nil), "primepb.POSummaryMatrix")
	proto.RegisterType((*OInstanceState)(nil), "primepb.OInstanceState")
	proto.RegisterType((*OrderMessage)(nil), "primepb.OrderMessage")
}

func init() {
	proto.RegisterFile("protocols/prime/primepb/prime.proto", fileDescriptor_159e0b57de1af8e1)
}

var fileDescriptor_159e0b57de1af8e1 = []byte{
	// 836 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0x4d, 0x8f, 0xdb, 0x44,
	0x18, 0xb6, 0x1d, 0x27, 0xbb, 0x79, 0x93, 0xdd, 0xb8, 0x13, 0x48, 0xa3, 0x15, 0xc4, 0x8b, 0x7b,
	0xc9, 0x81, 0x3a, 0x50, 0xd4, 0xe5, 0xc0, 0x09, 0x13, 0xc4, 0x46, 0xa2, 0x4d, 0x34, 0xcb, 0x87,
	0x80, 0x43, 0xe4, 0xd8, 0x43, 0xe2, 0x36, 0xb1, 0x8d, 0x3f, 0xe8, 0xee, 0x8d, 0x9f, 0xc0, 0x85,
	0xdf, 0xc1, 0xdf, 0xe8, 0xb1, 0x27, 0xe0, 0x80, 0x22, 0x94, 0xfd, 0x17, 0x7b, 0x42, 0xf3, 0x61,
	0x27, 0xf6, 0x46, 0x50, 0x44, 0x2f, 0xbd, 0xd8, 0x33, 0xef, 0x3c, 0xef, 0xd7, 0x93, 0xf7, 0x19,
	0x07, 0xee, 0x85, 0x51, 0x90, 0x04, 0x4e, 0xb0, 0x8c, 0x07, 0x61, 0xe4, 0xad, 0x08, 0x7f, 0x86,
	0x33, 0xfe, 0x36, 0xd9, 0x29, 0x3a, 0x10, 0xc6, 0x93, 0x37, 0xe6, 0xc1, 0x3c, 0x60, 0xb6, 0x01,
	0x5d, 0xf1, 0xe3, 0x93, 0x7b, 0xe1, 0xd3, 0xf9, 0xc0, 0x09, 0x56, 0x2b, 0xdb, 0x77, 0xb3, 0x77,
	0x38, 0xcb, 0x56, 0x1c, 0x64, 0xfc, 0x2a, 0x43, 0x73, 0x42, 0xc3, 0x3c, 0x22, 0x71, 0x6c, 0xcf,
	0x09, 0x3a, 0x83, 0xc3, 0x30, 0x22, 0x41, 0xe4, 0x92, 0xa8, 0x2b, 0x9f, 0xca, 0xfd, 0xc6, 0x83,
	0xae, 0x29, 0xf2, 0x98, 0x93, 0x88, 0x8c, 0xe9, 0x81, 0xc0, 0x9e, 0x4b, 0x38, 0xc7, 0xa2, 0xfb,
	0x50, 0xe5, 0x4e, 0x0a, 0x73, 0x7a, 0x33, 0x77, 0x2a, 0x79, 0x70, 0x14, 0x7a, 0x0f, 0x6a, 0x11,
	0x89, 0xd3, 0x65, 0xd2, 0xad, 0x30, 0x7c, 0x27, 0xc7, 0x63, 0x66, 0xde, 0x3a, 0x08, 0x9c, 0x55,
	0x03, 0x35, 0xb9, 0x0a, 0x89, 0xf1, 0x8b, 0x0c, 0x30, 0xf2, 0xe3, 0xc4, 0xf6, 0x1d, 0x32, 0x1a,
	0xa2, 0xef, 0x01, 0x22, 0x12, 0x2e, 0x3d, 0xc7, 0x9e, 0x7a, 0x2e, 0xab, 0x58, 0xb5, 0x3e, 0xdb,
	0xac, 0xf5, 0x3a, 0xe6, 0xd6, 0xd1, 0xf0, 0x66, 0xad, 0x9f, 0xcd, 0xbd, 0x64, 0x91, 0xce, 0x4c,
	0x27, 0x58, 0x0d, 0xbc, 0x99, 0xbd, 0xb4, 0x9f, 0x78, 0x76, 0x94, 0xfa, 0x83, 0x79, 0x70, 0xdf,
	0x09, 0xfc, 0x98, 0xf8, 0x71, 0x1a, 0x0f, 0x42, 0x42, 0x22, 0xf6, 0xa0, 0x9d, 0x12, 0x12, 0x8d,
	0x86, 0xb8, 0x2e, 0x42, 0x8f, 0x5c, 0xa4, 0x43, 0xd5, 0xf3, 0x5d, 0x72, 0xc9, 0xfa, 0x53, 0xad,
	0xfa, 0xcd, 0x5a, 0xaf, 0x8e, 0xa8, 0x01, 0x73, 0xbb, 0xf1, 0xa7, 0x02, 0x47, 0x59, 0x5d, 0x17,
	0x89, 0x9d, 0x10, 0xf4, 0x16, 0xa8, 0x3f, 0x7a, 0xe4, 0x99, 0x28, 0xea, 0xf0, 0x66, 0xad, 0xab,
	0x5f, 0x79, 0xe4, 0x19, 0x66, 0x56, 0x74, 0x0e, 0x0d, 0x4f, 0xc0, 0x69, 0xe5, 0x9c, 0xb6, 0x76,
	0x4e, 0xc3, 0xb6, 0x45, 0x0b, 0x3d, 0x5f, 0xeb, 0xd2, 0x66, 0xad, 0xef, 0xb4, 0x8d, 0x21, 0xf3,
	0x1d, 0xb9, 0xe8, 0x21, 0xd4, 0xe2, 0xc4, 0x4e, 0xd2, 0x98, 0x71, 0x79, 0xfc, 0xe0, 0xed, 0x5b,
	0x41, 0x58, 0x3d, 0xe6, 0x05, 0x03, 0x61, 0x01, 0x46, 0xef, 0xc2, 0x81, 0x98, 0x85, 0xae, 0xca,
	0x92, 0x23, 0x33, 0x9f, 0x12, 0xf3, 0x13, 0xbe, 0xc2, 0x19, 0x04, 0xbd, 0x03, 0x4d, 0xb1, 0x9c,
	0x2e, 0xec, 0x78, 0xd1, 0xad, 0x9e, 0xca, 0xfd, 0x26, 0x6e, 0x08, 0xdb, 0xb9, 0x1d, 0x2f, 0x8c,
	0xef, 0xa0, 0xc6, 0x53, 0xa0, 0x43, 0x50, 0x1f, 0x07, 0x3e, 0xd1, 0x24, 0xd4, 0x84, 0xc3, 0x6c,
	0x6a, 0x34, 0x19, 0xb5, 0xa0, 0x91, 0xed, 0x3e, 0x76, 0x9e, 0x6a, 0x0a, 0x6a, 0xc0, 0xc1, 0x45,
	0xba, 0x5a, 0xd9, 0xd1, 0x95, 0x56, 0x41, 0x47, 0x50, 0xa7, 0x69, 0xbd, 0x24, 0x21, 0xae, 0xa6,
	0x52, 0xd7, 0x4f, 0x2f, 0x89, 0x93, 0xd2, 0x5d, 0xd5, 0xf8, 0x4d, 0x81, 0x56, 0x69, 0xfe, 0x5e,
	0x21, 0x85, 0xef, 0xf3, 0xe1, 0xba, 0x45, 0x60, 0x29, 0xa3, 0xf9, 0xc5, 0x55, 0x48, 0x30, 0x83,
	0xbe, 0x72, 0xfa, 0xd0, 0x10, 0x20, 0x0c, 0xa6, 0x31, 0xa7, 0xa3, 0x5b, 0x13, 0x31, 0xf3, 0x4a,
	0xc6, 0x82, 0x28, 0xeb, 0x8e, 0xe8, 0xa5, 0x9e, 0x9b, 0x70, 0x3d, 0x0c, 0xc4, 0xd2, 0x18, 0x80,
	0x4a, 0x8b, 0xa4, 0x64, 0x4e, 0xc6, 0x98, 0xfc, 0x90, 0x92, 0x38, 0xd1, 0x24, 0x54, 0x87, 0xea,
	0x64, 0x4c, 0x39, 0x97, 0xf9, 0x49, 0xc6, 0xba, 0x62, 0x7c, 0x08, 0x47, 0x05, 0xc9, 0xa1, 0x4e,
	0x2e, 0x4d, 0xf9, 0xb4, 0xd2, 0x6f, 0x66, 0x02, 0x44, 0xc7, 0xa0, 0x30, 0x92, 0x2b, 0x7d, 0x15,
	0x2b, 0x9e, 0x6b, 0x58, 0x3b, 0x71, 0xd0, 0xc3, 0x42, 0xf1, 0x55, 0x0a, 0xb2, 0x3a, 0x85, 0x22,
	0xb7, 0x82, 0xd9, 0xa9, 0xf6, 0x09, 0xb4, 0x72, 0xc0, 0x23, 0x3b, 0x89, 0xbc, 0x4b, 0xf4, 0x35,
	0xdc, 0xd9, 0x46, 0x9a, 0xae, 0x98, 0x91, 0x05, 0xdc, 0xcf, 0xc6, 0x5d, 0xc1, 0x46, 0x39, 0x0e,
	0x6e, 0xe5, 0x59, 0xb8, 0xc1, 0xf8, 0xa9, 0x02, 0xc7, 0xe3, 0xff, 0xa2, 0xd0, 0x7f, 0x93, 0x3c,
	0x3a, 0x2b, 0x09, 0xaf, 0xb7, 0xbd, 0xf4, 0xfe, 0x51, 0x79, 0xdf, 0xec, 0x6f, 0xb1, 0x74, 0xd9,
	0x16, 0xfb, 0xb1, 0xda, 0x2f, 0xd3, 0x24, 0xfa, 0x1c, 0x3a, 0xb7, 0x42, 0xf3, 0x89, 0xa3, 0x03,
	0xd5, 0xb4, 0xee, 0x6e, 0xd6, 0x7a, 0xbb, 0x14, 0x85, 0x4e, 0x1f, 0x6e, 0x97, 0x22, 0x31, 0x45,
	0x3f, 0xde, 0xa3, 0x68, 0xae, 0xe1, 0x49, 0x44, 0x42, 0x3b, 0x22, 0xae, 0x26, 0x0b, 0x89, 0xf3,
	0x9d, 0x52, 0x14, 0x71, 0xa5, 0x20, 0x62, 0xd5, 0xf8, 0x5d, 0x81, 0x66, 0x41, 0xc1, 0xff, 0xf3,
	0x07, 0x30, 0x0b, 0xb2, 0x3d, 0xd9, 0xfb, 0xcd, 0xd9, 0xd5, 0xec, 0x6b, 0x43, 0x7c, 0xa6, 0xe2,
	0x63, 0x80, 0x2d, 0xd9, 0x9a, 0x44, 0xef, 0xcb, 0x6c, 0x23, 0x23, 0x80, 0x1a, 0xa7, 0x5a, 0x53,
	0xac, 0x2f, 0x9f, 0x6f, 0x7a, 0xf2, 0x8b, 0x4d, 0x4f, 0xfe, 0x6b, 0xd3, 0x93, 0x7f, 0xbe, 0xee,
	0x49, 0x2f, 0xae, 0x7b, 0xd2, 0x1f, 0xd7, 0x3d, 0xe9, 0xdb, 0x8f, 0x5e, 0xea, 0xdb, 0xb7, 0xff,
	0xef, 0xc6, 0xac, 0xc6, 0x0e, 0x3e, 0xf8, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x2d, 0x61, 0x7b,
	0x90, 0x08, 0x00, 0x00,
}

func (m *PrimeMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrimeMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimeMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *PrimeMessage_Preorder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimeMessage_Preorder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Preorder != nil {
		{
			size, err := m.Preorder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrime(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *PrimeMessage_Order) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimeMessage_Order) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Order != nil {
		{
			size, err := m.Order.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrime(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PrimeMessage_Result) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrimeMessage_Result) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrime(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *InstanceID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstanceID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintPrime(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.ReplicaID != 0 {
		i = encodeVarintPrime(dAtA, i, uint64(m.ReplicaID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InstanceState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstanceState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommandHash) > 0 {
		i -= len(m.CommandHash)
		copy(dAtA[i:], m.CommandHash)
		i = encodeVarintPrime(dAtA, i, uint64(len(m.CommandHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrime(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintPrime(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.InstanceID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPrime(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.View != 0 {
		i = encodeVarintPrime(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PreOrderMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PreOrderMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PreOrderMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.POSummary.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPrime(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.CommandHash) > 0 {
		i -= len(m.CommandHash)
		copy(dAtA[i:], m.CommandHash)
		i = encodeVarintPrime(dAtA, i, uint64(len(m.CommandHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrime(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintPrime(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.InstanceID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPrime(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}

func (m *ResultMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResultMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA10 := make([]byte, len(m.Id)*10)
		var j9 int
		for _, num := range m.Id {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintPrime(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Result) > 0 {
		for iNdEx := len(m.Result) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Result[iNdEx])
			copy(dAtA[i:], m.Result[iNdEx])
			i = encodeVarintPrime(dAtA, i, uint64(len(m.Result[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *POSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *POSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *POSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.POSummary) > 0 {
		dAtA12 := make([]byte, len(m.POSummary)*10)
		var j11 int
		for _, num := range m.POSummary {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintPrime(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}

func (m *POSummaryMatrix) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *POSummaryMatrix) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *POSummaryMatrix) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.POSummaryMatrix) > 0 {
		for iNdEx := len(m.POSummaryMatrix) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.POSummaryMatrix[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPrime(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	return len(dAtA) - i, nil
}

func (m *OInstanceState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OInstanceState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OInstanceState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.POSummaryMatrixHash) > 0 {
		i -= len(m.POSummaryMatrixHash)
		copy(dAtA[i:], m.POSummaryMatrixHash)
		i = encodeVarintPrime(dAtA, i, uint64(len(m.POSummaryMatrixHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.POSummaryMatrix != nil {
		{
			size, err := m.POSummaryMatrix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrime(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintPrime(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintPrime(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.View != 0 {
		i = encodeVarintPrime(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OrderMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.POSummaryMatrixHash) > 0 {
		i -= len(m.POSummaryMatrixHash)
		copy(dAtA[i:], m.POSummaryMatrixHash)
		i = encodeVarintPrime(dAtA, i, uint64(len(m.POSummaryMatrixHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.POSummaryMatrix != nil {
		{
			size, err := m.POSummaryMatrix.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPrime(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Type != 0 {
		i = encodeVarintPrime(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintPrime(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.View != 0 {
		i = encodeVarintPrime(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPrime(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrime(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PrimeMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *PrimeMessage_Preorder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Preorder != nil {
		l = m.Preorder.Size()
		n += 1 + l + sovPrime(uint64(l))
	}
	return n
}
func (m *PrimeMessage_Order) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Order != nil {
		l = m.Order.Size()
		n += 1 + l + sovPrime(uint64(l))
	}
	return n
}
func (m *PrimeMessage_Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovPrime(uint64(l))
	}
	return n
}
func (m *InstanceID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReplicaID != 0 {
		n += 1 + sovPrime(uint64(m.ReplicaID))
	}
	if m.Index != 0 {
		n += 1 + sovPrime(uint64(m.Index))
	}
	return n
}

func (m *InstanceState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovPrime(uint64(m.View))
	}
	l = m.InstanceID.Size()
	n += 1 + l + sovPrime(uint64(l))
	if m.Status != 0 {
		n += 1 + sovPrime(uint64(m.Status))
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovPrime(uint64(l))
	}
	l = len(m.CommandHash)
	if l > 0 {
		n += 1 + l + sovPrime(uint64(l))
	}
	return n
}

func (m *PreOrderMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InstanceID.Size()
	n += 1 + l + sovPrime(uint64(l))
	if m.Type != 0 {
		n += 1 + sovPrime(uint64(m.Type))
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovPrime(uint64(l))
	}
	l = len(m.CommandHash)
	if l > 0 {
		n += 1 + l + sovPrime(uint64(l))
	}
	l = m.POSummary.Size()
	n += 1 + l + sovPrime(uint64(l))
	return n
}

func (m *ResultMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, b := range m.Result {
			l = len(b)
			n += 1 + l + sovPrime(uint64(l))
		}
	}
	if len(m.Id) > 0 {
		l = 0
		for _, e := range m.Id {
			l += sovPrime(uint64(e))
		}
		n += 1 + sovPrime(uint64(l)) + l
	}
	return n
}

func (m *POSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.POSummary) > 0 {
		l = 0
		for _, e := range m.POSummary {
			l += sovPrime(uint64(e))
		}
		n += 1 + sovPrime(uint64(l)) + l
	}
	return n
}

func (m *POSummaryMatrix) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.POSummaryMatrix) > 0 {
		for _, e := range m.POSummaryMatrix {
			l = e.Size()
			n += 1 + l + sovPrime(uint64(l))
		}
	}
	return n
}

func (m *OInstanceState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovPrime(uint64(m.View))
	}
	if m.Index != 0 {
		n += 1 + sovPrime(uint64(m.Index))
	}
	if m.Status != 0 {
		n += 1 + sovPrime(uint64(m.Status))
	}
	if m.POSummaryMatrix != nil {
		l = m.POSummaryMatrix.Size()
		n += 1 + l + sovPrime(uint64(l))
	}
	l = len(m.POSummaryMatrixHash)
	if l > 0 {
		n += 1 + l + sovPrime(uint64(l))
	}
	return n
}

func (m *OrderMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovPrime(uint64(m.View))
	}
	if m.Index != 0 {
		n += 1 + sovPrime(uint64(m.Index))
	}
	if m.Type != 0 {
		n += 1 + sovPrime(uint64(m.Type))
	}
	if m.POSummaryMatrix != nil {
		l = m.POSummaryMatrix.Size()
		n += 1 + l + sovPrime(uint64(l))
	}
	l = len(m.POSummaryMatrixHash)
	if l > 0 {
		n += 1 + l + sovPrime(uint64(l))
	}
	return n
}

func sovPrime(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrime(x uint64) (n int) {
	return sovPrime(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PrimeMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrimeMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrimeMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preorder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrime
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PreOrderMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &PrimeMessage_Preorder{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrime
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OrderMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &PrimeMessage_Order{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrime
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResultMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &PrimeMessage_Result{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrime
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstanceID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstanceID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaID", wireType)
			}
			m.ReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaID |= github_com_ibalajiarun_go_consensus_peer_peerpb.PeerID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrime
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstanceState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstanceState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrime
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InstanceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= InstanceState_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrime
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &commandpb.Command{}
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPrime
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPrime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandHash = append(m.CommandHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CommandHash == nil {
				m.CommandHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrime
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PreOrderMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PreOrderMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PreOrderMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstanceID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrime
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InstanceID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PreOrderMessage_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrime
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &commandpb.Command{}
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPrime
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPrime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandHash = append(m.CommandHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CommandHash == nil {
				m.CommandHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field POSummary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrime
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.POSummary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrime
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPrime
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPrime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, make([]byte, postIndex-iNdEx))
			copy(m.Result[len(m.Result)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPrime
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Id = append(m.Id, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPrime
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPrime
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPrime
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Id) == 0 {
					m.Id = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPrime
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Id = append(m.Id, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrime
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *POSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: POSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: POSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType == 0 {
				var v Index
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPrime
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Index(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.POSummary = append(m.POSummary, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPrime
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPrime
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPrime
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.POSummary) == 0 {
					m.POSummary = make([]Index, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Index
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPrime
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Index(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.POSummary = append(m.POSummary, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field POSummary", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPrime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrime
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *POSummaryMatrix) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: POSummaryMatrix: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: POSummaryMatrix: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field POSummaryMatrix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrime
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.POSummaryMatrix = append(m.POSummaryMatrix, POSummary{})
			if err := m.POSummaryMatrix[len(m.POSummaryMatrix)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrime
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OInstanceState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OInstanceState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OInstanceState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= OInstanceState_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field POSummaryMatrix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrime
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.POSummaryMatrix == nil {
				m.POSummaryMatrix = &POSummaryMatrix{}
			}
			if err := m.POSummaryMatrix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field POSummaryMatrixHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPrime
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPrime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.POSummaryMatrixHash = append(m.POSummaryMatrixHash[:0], dAtA[iNdEx:postIndex]...)
			if m.POSummaryMatrixHash == nil {
				m.POSummaryMatrixHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrime
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrime
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= OrderMessage_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field POSummaryMatrix", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrime
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPrime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.POSummaryMatrix == nil {
				m.POSummaryMatrix = &POSummaryMatrix{}
			}
			if err := m.POSummaryMatrix.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field POSummaryMatrixHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPrime
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPrime
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.POSummaryMatrixHash = append(m.POSummaryMatrixHash[:0], dAtA[iNdEx:postIndex]...)
			if m.POSummaryMatrixHash == nil {
				m.POSummaryMatrixHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrime(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrime
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPrime
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrime(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrime
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrime
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrime
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrime
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrime
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrime        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrime          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrime = fmt.Errorf("proto: unexpected end of group")
)
