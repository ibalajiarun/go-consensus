// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protocols/sbft/sbftpb/sbft.proto

package sbftpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	commandpb "github.com/ibalajiarun/go-consensus/pkg/command/commandpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InstanceState_Status int32

const (
	InstanceState_None        InstanceState_Status = 0
	InstanceState_Prepared    InstanceState_Status = 1
	InstanceState_SignShared  InstanceState_Status = 2
	InstanceState_Committed   InstanceState_Status = 3
	InstanceState_StateShared InstanceState_Status = 4
	InstanceState_Executed    InstanceState_Status = 5
)

var InstanceState_Status_name = map[int32]string{
	0: "None",
	1: "Prepared",
	2: "SignShared",
	3: "Committed",
	4: "StateShared",
	5: "Executed",
}

var InstanceState_Status_value = map[string]int32{
	"None":        0,
	"Prepared":    1,
	"SignShared":  2,
	"Committed":   3,
	"StateShared": 4,
	"Executed":    5,
}

func (x InstanceState_Status) String() string {
	return proto.EnumName(InstanceState_Status_name, int32(x))
}

func (InstanceState_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b3f5d97fb3757856, []int{1, 0}
}

type NormalMessage_Type int32

const (
	NormalMessage_None       NormalMessage_Type = 0
	NormalMessage_Prepare    NormalMessage_Type = 1
	NormalMessage_SignShare  NormalMessage_Type = 2
	NormalMessage_Commit     NormalMessage_Type = 3
	NormalMessage_StateShare NormalMessage_Type = 4
	NormalMessage_ExecProof  NormalMessage_Type = 5
)

var NormalMessage_Type_name = map[int32]string{
	0: "None",
	1: "Prepare",
	2: "SignShare",
	3: "Commit",
	4: "StateShare",
	5: "ExecProof",
}

var NormalMessage_Type_value = map[string]int32{
	"None":       0,
	"Prepare":    1,
	"SignShare":  2,
	"Commit":     3,
	"StateShare": 4,
	"ExecProof":  5,
}

func (x NormalMessage_Type) String() string {
	return proto.EnumName(NormalMessage_Type_name, int32(x))
}

func (NormalMessage_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b3f5d97fb3757856, []int{2, 0}
}

type SBFTMessage struct {
	// Types that are valid to be assigned to Type:
	//	*SBFTMessage_Normal
	//	*SBFTMessage_Result
	Type isSBFTMessage_Type `protobuf_oneof:"type"`
}

func (m *SBFTMessage) Reset()         { *m = SBFTMessage{} }
func (m *SBFTMessage) String() string { return proto.CompactTextString(m) }
func (*SBFTMessage) ProtoMessage()    {}
func (*SBFTMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f5d97fb3757856, []int{0}
}
func (m *SBFTMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SBFTMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SBFTMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SBFTMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SBFTMessage.Merge(m, src)
}
func (m *SBFTMessage) XXX_Size() int {
	return m.Size()
}
func (m *SBFTMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SBFTMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SBFTMessage proto.InternalMessageInfo

type isSBFTMessage_Type interface {
	isSBFTMessage_Type()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SBFTMessage_Normal struct {
	Normal *NormalMessage `protobuf:"bytes,1,opt,name=normal,proto3,oneof" json:"normal,omitempty"`
}
type SBFTMessage_Result struct {
	Result *ResultMessage `protobuf:"bytes,2,opt,name=result,proto3,oneof" json:"result,omitempty"`
}

func (*SBFTMessage_Normal) isSBFTMessage_Type() {}
func (*SBFTMessage_Result) isSBFTMessage_Type() {}

func (m *SBFTMessage) GetType() isSBFTMessage_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *SBFTMessage) GetNormal() *NormalMessage {
	if x, ok := m.GetType().(*SBFTMessage_Normal); ok {
		return x.Normal
	}
	return nil
}

func (m *SBFTMessage) GetResult() *ResultMessage {
	if x, ok := m.GetType().(*SBFTMessage_Result); ok {
		return x.Result
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SBFTMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SBFTMessage_Normal)(nil),
		(*SBFTMessage_Result)(nil),
	}
}

type InstanceState struct {
	View        View                 `protobuf:"varint,1,opt,name=view,proto3,casttype=View" json:"view,omitempty"`
	Index       Index                `protobuf:"varint,2,opt,name=index,proto3,casttype=Index" json:"index,omitempty"`
	Status      InstanceState_Status `protobuf:"varint,3,opt,name=status,proto3,enum=sbftpb.InstanceState_Status" json:"status,omitempty"`
	Command     *commandpb.Command   `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	CommandHash []byte               `protobuf:"bytes,5,opt,name=command_hash,json=commandHash,proto3" json:"command_hash,omitempty"`
}

func (m *InstanceState) Reset()         { *m = InstanceState{} }
func (m *InstanceState) String() string { return proto.CompactTextString(m) }
func (*InstanceState) ProtoMessage()    {}
func (*InstanceState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f5d97fb3757856, []int{1}
}
func (m *InstanceState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstanceState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InstanceState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceState.Merge(m, src)
}
func (m *InstanceState) XXX_Size() int {
	return m.Size()
}
func (m *InstanceState) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceState.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceState proto.InternalMessageInfo

func (m *InstanceState) GetView() View {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *InstanceState) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *InstanceState) GetStatus() InstanceState_Status {
	if m != nil {
		return m.Status
	}
	return InstanceState_None
}

func (m *InstanceState) GetCommand() *commandpb.Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *InstanceState) GetCommandHash() []byte {
	if m != nil {
		return m.CommandHash
	}
	return nil
}

type NormalMessage struct {
	View        View               `protobuf:"varint,1,opt,name=view,proto3,casttype=View" json:"view,omitempty"`
	Index       Index              `protobuf:"varint,2,opt,name=index,proto3,casttype=Index" json:"index,omitempty"`
	Type        NormalMessage_Type `protobuf:"varint,3,opt,name=type,proto3,enum=sbftpb.NormalMessage_Type" json:"type,omitempty"`
	Command     *commandpb.Command `protobuf:"bytes,4,opt,name=command,proto3" json:"command,omitempty"`
	CommandHash []byte             `protobuf:"bytes,5,opt,name=command_hash,json=commandHash,proto3" json:"command_hash,omitempty"`
}

func (m *NormalMessage) Reset()         { *m = NormalMessage{} }
func (m *NormalMessage) String() string { return proto.CompactTextString(m) }
func (*NormalMessage) ProtoMessage()    {}
func (*NormalMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f5d97fb3757856, []int{2}
}
func (m *NormalMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NormalMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NormalMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NormalMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NormalMessage.Merge(m, src)
}
func (m *NormalMessage) XXX_Size() int {
	return m.Size()
}
func (m *NormalMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_NormalMessage.DiscardUnknown(m)
}

var xxx_messageInfo_NormalMessage proto.InternalMessageInfo

func (m *NormalMessage) GetView() View {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *NormalMessage) GetIndex() Index {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *NormalMessage) GetType() NormalMessage_Type {
	if m != nil {
		return m.Type
	}
	return NormalMessage_None
}

func (m *NormalMessage) GetCommand() *commandpb.Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *NormalMessage) GetCommandHash() []byte {
	if m != nil {
		return m.CommandHash
	}
	return nil
}

type ResultMessage struct {
	Result []byte `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Id     uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ResultMessage) Reset()         { *m = ResultMessage{} }
func (m *ResultMessage) String() string { return proto.CompactTextString(m) }
func (*ResultMessage) ProtoMessage()    {}
func (*ResultMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3f5d97fb3757856, []int{3}
}
func (m *ResultMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResultMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResultMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResultMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultMessage.Merge(m, src)
}
func (m *ResultMessage) XXX_Size() int {
	return m.Size()
}
func (m *ResultMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ResultMessage proto.InternalMessageInfo

func (m *ResultMessage) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ResultMessage) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterEnum("sbftpb.InstanceState_Status", InstanceState_Status_name, InstanceState_Status_value)
	proto.RegisterEnum("sbftpb.NormalMessage_Type", NormalMessage_Type_name, NormalMessage_Type_value)
	proto.RegisterType((*SBFTMessage)(nil), "sbftpb.SBFTMessage")
	proto.RegisterType((*InstanceState)(nil), "sbftpb.InstanceState")
	proto.RegisterType((*NormalMessage)(nil), "sbftpb.NormalMessage")
	proto.RegisterType((*ResultMessage)(nil), "sbftpb.ResultMessage")
}

func init() { proto.RegisterFile("protocols/sbft/sbftpb/sbft.proto", fileDescriptor_b3f5d97fb3757856) }

var fileDescriptor_b3f5d97fb3757856 = []byte{
	// 525 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0x63, 0xc7, 0x71, 0xd3, 0xc9, 0x07, 0xd6, 0x0a, 0x50, 0x14, 0x55, 0x4e, 0x08, 0x97,
	0x1c, 0xc0, 0x96, 0x0a, 0x12, 0xe2, 0x1a, 0x04, 0x6a, 0x0f, 0x54, 0x95, 0x5d, 0x81, 0xc4, 0x01,
	0xb4, 0x8e, 0xb7, 0x8e, 0x21, 0xd9, 0xb5, 0xbc, 0x6b, 0xd2, 0xbe, 0x05, 0x8f, 0xc1, 0x0b, 0xf0,
	0x0e, 0x1c, 0x7b, 0xe4, 0x54, 0xa1, 0xe4, 0x2d, 0x7a, 0x42, 0xfb, 0x91, 0xa8, 0x91, 0x7a, 0xa3,
	0x97, 0xec, 0xec, 0x7f, 0xfe, 0x93, 0xd9, 0xfd, 0xcd, 0x1a, 0x86, 0x45, 0xc9, 0x04, 0x9b, 0xb2,
	0x39, 0x0f, 0x79, 0x72, 0x2e, 0xd4, 0x4f, 0x91, 0xa8, 0x25, 0x50, 0x29, 0xe4, 0x6a, 0xa9, 0xff,
	0x30, 0x63, 0x19, 0x53, 0x52, 0x28, 0x23, 0x9d, 0xed, 0x3f, 0x2d, 0xbe, 0x65, 0xe1, 0x94, 0x2d,
	0x16, 0x98, 0xa6, 0x9b, 0xb5, 0x48, 0x36, 0x91, 0x36, 0x8d, 0x96, 0xd0, 0x8a, 0x27, 0xef, 0xce,
	0xde, 0x13, 0xce, 0x71, 0x46, 0x50, 0x08, 0x2e, 0x65, 0xe5, 0x02, 0xcf, 0x7b, 0xd6, 0xd0, 0x1a,
	0xb7, 0x0e, 0x1f, 0x05, 0xba, 0x45, 0x70, 0xa2, 0x54, 0x63, 0x3b, 0xaa, 0x45, 0xc6, 0x26, 0x0b,
	0x4a, 0xc2, 0xab, 0xb9, 0xe8, 0xd9, 0xbb, 0x05, 0x91, 0x52, 0x6f, 0x15, 0x68, 0xdb, 0xc4, 0x05,
	0x47, 0x5c, 0x16, 0x64, 0xf4, 0xcb, 0x86, 0xce, 0x31, 0xe5, 0x02, 0xd3, 0x29, 0x89, 0x05, 0x16,
	0x04, 0x1d, 0x80, 0xf3, 0x3d, 0x27, 0x4b, 0xd5, 0xd9, 0x99, 0x34, 0x6f, 0xae, 0x07, 0xce, 0x87,
	0x9c, 0x2c, 0x23, 0xa5, 0xa2, 0x01, 0x34, 0x72, 0x9a, 0x92, 0x0b, 0xd5, 0xc7, 0x99, 0xec, 0xdf,
	0x5c, 0x0f, 0x1a, 0xc7, 0x52, 0x88, 0xb4, 0x8e, 0x5e, 0x82, 0xcb, 0x05, 0x16, 0x15, 0xef, 0xd5,
	0x87, 0xd6, 0xb8, 0x7b, 0x78, 0xb0, 0x39, 0xc9, 0x4e, 0x97, 0x20, 0x56, 0x9e, 0xc8, 0x78, 0xd1,
	0x33, 0xd8, 0x33, 0x40, 0x7a, 0x8e, 0xba, 0x00, 0x0a, 0xb6, 0xa8, 0x82, 0x37, 0x3a, 0x8a, 0x36,
	0x16, 0xf4, 0x04, 0xda, 0x26, 0xfc, 0x32, 0xc3, 0x7c, 0xd6, 0x6b, 0x0c, 0xad, 0x71, 0x3b, 0x6a,
	0x19, 0xed, 0x08, 0xf3, 0xd9, 0xe8, 0x33, 0xb8, 0xba, 0x05, 0x6a, 0x82, 0x73, 0xc2, 0x28, 0xf1,
	0x6a, 0xa8, 0x0d, 0xcd, 0xd3, 0x92, 0x14, 0xb8, 0x24, 0xa9, 0x67, 0xa1, 0x2e, 0x40, 0x9c, 0x67,
	0x34, 0x9e, 0xa9, 0xbd, 0x8d, 0x3a, 0xb0, 0x2f, 0x1b, 0xe5, 0x42, 0x90, 0xd4, 0xab, 0xa3, 0x07,
	0xd0, 0x52, 0x27, 0x35, 0x79, 0x47, 0x56, 0xbf, 0xbd, 0x20, 0xd3, 0x4a, 0xa6, 0x1b, 0xa3, 0x9f,
	0x36, 0x74, 0x76, 0x86, 0xf1, 0xbf, 0xdc, 0x02, 0x3d, 0x10, 0x43, 0xad, 0x7f, 0xe7, 0xc0, 0x83,
	0xb3, 0xcb, 0x82, 0x44, 0xca, 0x77, 0xff, 0xc4, 0x3e, 0x82, 0x23, 0xff, 0xfe, 0x16, 0xaf, 0x16,
	0xec, 0x19, 0x5e, 0x9e, 0x25, 0xf1, 0x6c, 0x71, 0x79, 0x36, 0x02, 0x70, 0x35, 0x2d, 0xaf, 0xae,
	0x48, 0x6e, 0x51, 0x79, 0x8e, 0xb4, 0x4a, 0x52, 0xa7, 0x25, 0x63, 0xe7, 0x5e, 0x63, 0xf4, 0x0a,
	0x3a, 0x3b, 0xaf, 0x10, 0x3d, 0xde, 0x3e, 0x56, 0x4b, 0x1d, 0xc3, 0xec, 0x50, 0x17, 0xec, 0x3c,
	0xd5, 0x80, 0x22, 0x3b, 0x4f, 0x27, 0xf1, 0xef, 0x95, 0x6f, 0x5d, 0xad, 0x7c, 0xeb, 0xef, 0xca,
	0xb7, 0x7e, 0xac, 0xfd, 0xda, 0xd5, 0xda, 0xaf, 0xfd, 0x59, 0xfb, 0xb5, 0x4f, 0xaf, 0xb3, 0x5c,
	0xcc, 0xaa, 0x44, 0xde, 0x38, 0xcc, 0x13, 0x3c, 0xc7, 0x5f, 0x73, 0x5c, 0x56, 0x34, 0xcc, 0xd8,
	0xf3, 0x29, 0xa3, 0x9c, 0x50, 0x5e, 0xf1, 0xf0, 0xce, 0xef, 0x36, 0x71, 0x95, 0xfc, 0xe2, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xe3, 0xb6, 0x1d, 0x54, 0xd7, 0x03, 0x00, 0x00,
}

func (m *SBFTMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SBFTMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SBFTMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size := m.Type.Size()
			i -= size
			if _, err := m.Type.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SBFTMessage_Normal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SBFTMessage_Normal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Normal != nil {
		{
			size, err := m.Normal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *SBFTMessage_Result) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SBFTMessage_Result) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *InstanceState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InstanceState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommandHash) > 0 {
		i -= len(m.CommandHash)
		copy(dAtA[i:], m.CommandHash)
		i = encodeVarintSbft(dAtA, i, uint64(len(m.CommandHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintSbft(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintSbft(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.View != 0 {
		i = encodeVarintSbft(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NormalMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NormalMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NormalMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CommandHash) > 0 {
		i -= len(m.CommandHash)
		copy(dAtA[i:], m.CommandHash)
		i = encodeVarintSbft(dAtA, i, uint64(len(m.CommandHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Command != nil {
		{
			size, err := m.Command.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSbft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintSbft(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Index != 0 {
		i = encodeVarintSbft(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.View != 0 {
		i = encodeVarintSbft(dAtA, i, uint64(m.View))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResultMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResultMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintSbft(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintSbft(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSbft(dAtA []byte, offset int, v uint64) int {
	offset -= sovSbft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SBFTMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	return n
}

func (m *SBFTMessage_Normal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Normal != nil {
		l = m.Normal.Size()
		n += 1 + l + sovSbft(uint64(l))
	}
	return n
}
func (m *SBFTMessage_Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovSbft(uint64(l))
	}
	return n
}
func (m *InstanceState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovSbft(uint64(m.View))
	}
	if m.Index != 0 {
		n += 1 + sovSbft(uint64(m.Index))
	}
	if m.Status != 0 {
		n += 1 + sovSbft(uint64(m.Status))
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovSbft(uint64(l))
	}
	l = len(m.CommandHash)
	if l > 0 {
		n += 1 + l + sovSbft(uint64(l))
	}
	return n
}

func (m *NormalMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovSbft(uint64(m.View))
	}
	if m.Index != 0 {
		n += 1 + sovSbft(uint64(m.Index))
	}
	if m.Type != 0 {
		n += 1 + sovSbft(uint64(m.Type))
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovSbft(uint64(l))
	}
	l = len(m.CommandHash)
	if l > 0 {
		n += 1 + l + sovSbft(uint64(l))
	}
	return n
}

func (m *ResultMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovSbft(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovSbft(uint64(m.Id))
	}
	return n
}

func sovSbft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSbft(x uint64) (n int) {
	return sovSbft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SBFTMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SBFTMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SBFTMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Normal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &NormalMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &SBFTMessage_Normal{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ResultMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &SBFTMessage_Result{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSbft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstanceState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstanceState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= InstanceState_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &commandpb.Command{}
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandHash = append(m.CommandHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CommandHash == nil {
				m.CommandHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSbft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NormalMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NormalMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NormalMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= View(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= Index(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= NormalMessage_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSbft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &commandpb.Command{}
			}
			if err := m.Command.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommandHash = append(m.CommandHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CommandHash == nil {
				m.CommandHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSbft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSbft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSbft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSbft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSbft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSbft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSbft
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSbft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSbft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSbft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSbft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSbft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSbft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSbft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSbft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSbft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSbft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSbft = fmt.Errorf("proto: unexpected end of group")
)
